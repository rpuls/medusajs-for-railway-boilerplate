"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminPostOrdersOrderClaimsReq = void 0;
var class_transformer_1 = require("class-transformer");
var class_validator_1 = require("class-validator");
var medusa_core_utils_1 = require("medusa-core-utils");
var _1 = require(".");
var common_1 = require("../../../../types/common");
var validator_1 = require("../../../../utils/validator");
/**
 * @oas [post] /order/{id}/claims
 * operationId: "PostOrdersOrderClaims"
 * summary: "Create a Claim"
 * description: "Creates a Claim."
 * x-authenticated: true
 * parameters:
 *   - (path) id=* {string} The id of the Order.
 * requestBody:
 *   content:
 *     application/json:
 *       schema:
 *         required:
 *           - type
 *           - claim_items
 *         properties:
 *           type:
 *             description: "The type of the Claim. This will determine how the Claim is treated: `replace` Claims will result in a Fulfillment with new items being created, while a `refund` Claim will refund the amount paid for the claimed items."
 *             type: string
 *             enum:
 *               - replace
 *               - refund
 *           claim_items:
 *             description: The Claim Items that the Claim will consist of.
 *             type: array
 *             items:
 *               properties:
 *                 item_id:
 *                   description: The id of the Line Item that will be claimed.
 *                   type: string
 *                 quantity:
 *                   description: The number of items that will be returned
 *                   type: integer
 *                 note:
 *                   description: Short text describing the Claim Item in further detail.
 *                   type: string
 *                 reason:
 *                   description: The reason for the Claim
 *                   type: string
 *                   enum:
 *                     - missing_item
 *                     - wrong_item
 *                     - production_failure
 *                     - other
 *                 tags:
 *                   description: A list o tags to add to the Claim Item
 *                   type: array
 *                   items:
 *                     type: string
 *                 images:
 *                   description: A list of image URL's that will be associated with the Claim
 *                   items:
 *                     type: string
 *            return_shipping:
 *              description: Optional details for the Return Shipping Method, if the items are to be sent back.
 *              type: object
 *              properties:
 *                option_id:
 *                  type: string
 *                  description: The id of the Shipping Option to create the Shipping Method from.
 *                price:
 *                  type: integer
 *                  description: The price to charge for the Shipping Method.
 *            additional_items:
 *              description: The new items to send to the Customer when the Claim type is Replace.
 *              type: array
 *              items:
 *                properties:
 *                  variant_id:
 *                    description: The id of the Product Variant to ship.
 *                    type: string
 *                  quantity:
 *                    description: The quantity of the Product Variant to ship.
 *                    type: integer
 *            shipping_methods:
 *              description: The Shipping Methods to send the additional Line Items with.
 *              type: array
 *              items:
 *                 properties:
 *                   id:
 *                     description: The id of an existing Shipping Method
 *                     type: string
 *                   option_id:
 *                     description: The id of the Shipping Option to create a Shipping Method from
 *                     type: string
 *                   price:
 *                     description: The price to charge for the Shipping Method
 *                     type: integer
 *            shipping_address:
 *              type: object
 *              description: "An optional shipping address to send the claim to. Defaults to the parent order's shipping address"
 *            refund_amount:
 *              description: The amount to refund the Customer when the Claim type is `refund`.
 *              type: integer
 *            no_notification:
 *              description: If set to true no notification will be send related to this Claim.
 *              type: boolean
 *            metadata:
 *              description: An optional set of key-value pairs to hold additional information.
 *              type: object
 * tags:
 *   - Order
 * responses:
 *   200:
 *     description: OK
 *     content:
 *       application/json:
 *         schema:
 *           properties:
 *             order:
 *               $ref: "#/components/schemas/order"
 */
exports.default = (function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var id, value, idempotencyKeyService, headerKey, idempotencyKey, error_1, orderService, claimService, returnService, inProgress, err, _a, _b, key, error, _c, key, error, _d, key, error;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                id = req.params.id;
                return [4 /*yield*/, (0, validator_1.validator)(AdminPostOrdersOrderClaimsReq, req.body)];
            case 1:
                value = _e.sent();
                idempotencyKeyService = req.scope.resolve("idempotencyKeyService");
                headerKey = req.get("Idempotency-Key") || "";
                _e.label = 2;
            case 2:
                _e.trys.push([2, 4, , 5]);
                return [4 /*yield*/, idempotencyKeyService.initializeRequest(headerKey, req.method, req.params, req.path)];
            case 3:
                idempotencyKey = _e.sent();
                return [3 /*break*/, 5];
            case 4:
                error_1 = _e.sent();
                res.status(409).send("Failed to create idempotency key");
                return [2 /*return*/];
            case 5:
                res.setHeader("Access-Control-Expose-Headers", "Idempotency-Key");
                res.setHeader("Idempotency-Key", idempotencyKey.idempotency_key);
                orderService = req.scope.resolve("orderService");
                claimService = req.scope.resolve("claimService");
                returnService = req.scope.resolve("returnService");
                inProgress = true;
                err = false;
                _e.label = 6;
            case 6:
                if (!inProgress) return [3 /*break*/, 17];
                _a = idempotencyKey.recovery_point;
                switch (_a) {
                    case "started": return [3 /*break*/, 7];
                    case "claim_created": return [3 /*break*/, 9];
                    case "refund_handled": return [3 /*break*/, 11];
                    case "finished": return [3 /*break*/, 13];
                }
                return [3 /*break*/, 14];
            case 7: return [4 /*yield*/, idempotencyKeyService.workStage(idempotencyKey.idempotency_key, function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                    var order;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, orderService
                                    .withTransaction(manager)
                                    .retrieve(id, {
                                    relations: ["items", "discounts", "discounts.rule"],
                                })];
                            case 1:
                                order = _a.sent();
                                return [4 /*yield*/, claimService.withTransaction(manager).create({
                                        idempotency_key: idempotencyKey.idempotency_key,
                                        order: order,
                                        type: value.type,
                                        shipping_address: value.shipping_address,
                                        claim_items: value.claim_items,
                                        return_shipping: value.return_shipping,
                                        additional_items: value.additional_items,
                                        shipping_methods: value.shipping_methods,
                                        no_notification: value.no_notification,
                                        metadata: value.metadata,
                                    })];
                            case 2:
                                _a.sent();
                                return [2 /*return*/, {
                                        recovery_point: "claim_created",
                                    }];
                        }
                    });
                }); })];
            case 8:
                _b = _e.sent(), key = _b.key, error = _b.error;
                if (error) {
                    inProgress = false;
                    err = error;
                }
                else {
                    idempotencyKey = key;
                }
                return [3 /*break*/, 16];
            case 9: return [4 /*yield*/, idempotencyKeyService.workStage(idempotencyKey.idempotency_key, function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                    var claim;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, claimService.withTransaction(manager).list({
                                    idempotency_key: idempotencyKey.idempotency_key,
                                })];
                            case 1:
                                claim = _a.sent();
                                if (!claim.length) {
                                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Claim not found");
                                }
                                claim = claim[0];
                                if (!(claim.type === "refund")) return [3 /*break*/, 3];
                                return [4 /*yield*/, claimService
                                        .withTransaction(manager)
                                        .processRefund(claim.id)];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3: return [2 /*return*/, {
                                    recovery_point: "refund_handled",
                                }];
                        }
                    });
                }); })];
            case 10:
                _c = _e.sent(), key = _c.key, error = _c.error;
                if (error) {
                    inProgress = false;
                    err = error;
                }
                else {
                    idempotencyKey = key;
                }
                return [3 /*break*/, 16];
            case 11: return [4 /*yield*/, idempotencyKeyService.workStage(idempotencyKey.idempotency_key, function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                    var order, claim;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, orderService
                                    .withTransaction(manager)
                                    .retrieve(id, {
                                    relations: ["items", "discounts"],
                                })];
                            case 1:
                                order = _a.sent();
                                return [4 /*yield*/, claimService.withTransaction(manager).list({
                                        idempotency_key: idempotencyKey.idempotency_key,
                                    }, {
                                        relations: ["return_order"],
                                    })];
                            case 2:
                                claim = _a.sent();
                                if (!claim.length) {
                                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Claim not found");
                                }
                                claim = claim[0];
                                if (!claim.return_order) return [3 /*break*/, 4];
                                return [4 /*yield*/, returnService
                                        .withTransaction(manager)
                                        .fulfill(claim.return_order.id)];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4: return [4 /*yield*/, orderService.withTransaction(manager).retrieve(id, {
                                    select: _1.defaultAdminOrdersFields,
                                    relations: _1.defaultAdminOrdersRelations,
                                })];
                            case 5:
                                order = _a.sent();
                                return [2 /*return*/, {
                                        response_code: 200,
                                        response_body: { order: order },
                                    }];
                        }
                    });
                }); })];
            case 12:
                _d = _e.sent(), key = _d.key, error = _d.error;
                if (error) {
                    inProgress = false;
                    err = error;
                }
                else {
                    idempotencyKey = key;
                }
                return [3 /*break*/, 16];
            case 13:
                {
                    inProgress = false;
                    return [3 /*break*/, 16];
                }
                _e.label = 14;
            case 14: return [4 /*yield*/, idempotencyKeyService.update(idempotencyKey.idempotency_key, {
                    recovery_point: "finished",
                    response_code: 500,
                    response_body: { message: "Unknown recovery point" },
                })];
            case 15:
                idempotencyKey = _e.sent();
                return [3 /*break*/, 16];
            case 16: return [3 /*break*/, 6];
            case 17:
                if (err) {
                    throw err;
                }
                res.status(idempotencyKey.response_code).json(idempotencyKey.response_body);
                return [2 /*return*/];
        }
    });
}); });
var ClaimTypes;
(function (ClaimTypes) {
    ClaimTypes["replace"] = "replace";
    ClaimTypes["refund"] = "refund";
})(ClaimTypes || (ClaimTypes = {}));
var ClaimItemReason;
(function (ClaimItemReason) {
    ClaimItemReason["missing_item"] = "missing_item";
    ClaimItemReason["wrong_item"] = "wrong_item";
    ClaimItemReason["production_failure"] = "production_failure";
    ClaimItemReason["other"] = "other";
})(ClaimItemReason || (ClaimItemReason = {}));
var AdminPostOrdersOrderClaimsReq = /** @class */ (function () {
    function AdminPostOrdersOrderClaimsReq() {
    }
    __decorate([
        (0, class_validator_1.IsEnum)(ClaimTypes),
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", String)
    ], AdminPostOrdersOrderClaimsReq.prototype, "type", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsNotEmpty)(),
        (0, class_transformer_1.Type)(function () { return Item; }),
        (0, class_validator_1.ValidateNested)({ each: true }),
        __metadata("design:type", Array)
    ], AdminPostOrdersOrderClaimsReq.prototype, "claim_items", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.ValidateNested)({ each: true }),
        (0, class_transformer_1.Type)(function () { return ReturnShipping; }),
        __metadata("design:type", ReturnShipping)
    ], AdminPostOrdersOrderClaimsReq.prototype, "return_shipping", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.ValidateNested)({ each: true }),
        (0, class_transformer_1.Type)(function () { return AdditionalItem; }),
        __metadata("design:type", Array)
    ], AdminPostOrdersOrderClaimsReq.prototype, "additional_items", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.ValidateNested)({ each: true }),
        (0, class_transformer_1.Type)(function () { return ShippingMethod; }),
        __metadata("design:type", Array)
    ], AdminPostOrdersOrderClaimsReq.prototype, "shipping_methods", void 0);
    __decorate([
        (0, class_validator_1.IsInt)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Number)
    ], AdminPostOrdersOrderClaimsReq.prototype, "refund_amount", void 0);
    __decorate([
        (0, class_validator_1.IsObject)(),
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.ValidateNested)(),
        (0, class_transformer_1.Type)(function () { return common_1.AddressPayload; }),
        __metadata("design:type", common_1.AddressPayload)
    ], AdminPostOrdersOrderClaimsReq.prototype, "shipping_address", void 0);
    __decorate([
        (0, class_validator_1.IsBoolean)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Boolean)
    ], AdminPostOrdersOrderClaimsReq.prototype, "no_notification", void 0);
    __decorate([
        (0, class_validator_1.IsObject)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Object)
    ], AdminPostOrdersOrderClaimsReq.prototype, "metadata", void 0);
    return AdminPostOrdersOrderClaimsReq;
}());
exports.AdminPostOrdersOrderClaimsReq = AdminPostOrdersOrderClaimsReq;
var ReturnShipping = /** @class */ (function () {
    function ReturnShipping() {
    }
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], ReturnShipping.prototype, "option_id", void 0);
    __decorate([
        (0, class_validator_1.IsInt)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Number)
    ], ReturnShipping.prototype, "price", void 0);
    return ReturnShipping;
}());
var ShippingMethod = /** @class */ (function () {
    function ShippingMethod() {
    }
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "id", void 0);
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "option_id", void 0);
    __decorate([
        (0, class_validator_1.IsInt)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Number)
    ], ShippingMethod.prototype, "price", void 0);
    return ShippingMethod;
}());
var Item = /** @class */ (function () {
    function Item() {
    }
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", String)
    ], Item.prototype, "item_id", void 0);
    __decorate([
        (0, class_validator_1.IsInt)(),
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", Number)
    ], Item.prototype, "quantity", void 0);
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], Item.prototype, "note", void 0);
    __decorate([
        (0, class_validator_1.IsEnum)(ClaimItemReason),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], Item.prototype, "reason", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsString)({ each: true }),
        __metadata("design:type", Array)
    ], Item.prototype, "tags", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsString)({ each: true }),
        __metadata("design:type", Array)
    ], Item.prototype, "images", void 0);
    return Item;
}());
var AdditionalItem = /** @class */ (function () {
    function AdditionalItem() {
    }
    __decorate([
        (0, class_validator_1.IsString)(),
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", String)
    ], AdditionalItem.prototype, "variant_id", void 0);
    __decorate([
        (0, class_validator_1.IsInt)(),
        (0, class_validator_1.IsNotEmpty)(),
        __metadata("design:type", Number)
    ], AdditionalItem.prototype, "quantity", void 0);
    return AdditionalItem;
}());
//# sourceMappingURL=create-claim.js.map