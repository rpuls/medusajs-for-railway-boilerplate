"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminGetRegionsRegionFulfillmentOptionsRes = exports.FulfillmentOption = exports.AdminRegionsRes = exports.defaultAdminRegionRelations = exports.defaultAdminRegionFields = void 0;
var express_1 = require("express");
var middlewares_1 = __importDefault(require("../../../middlewares"));
require("reflect-metadata");
var route = (0, express_1.Router)();
exports.default = (function (app) {
    app.use("/regions", route);
    route.get("/", middlewares_1.default.wrap(require("./list-regions").default));
    route.get("/:region_id", middlewares_1.default.wrap(require("./get-region").default));
    route.get("/:region_id/fulfillment-options", middlewares_1.default.wrap(require("./get-fulfillment-options").default));
    route.post("/", middlewares_1.default.wrap(require("./create-region").default));
    route.post("/:region_id", middlewares_1.default.wrap(require("./update-region").default));
    route.delete("/:region_id", middlewares_1.default.wrap(require("./delete-region").default));
    route.post("/:region_id/countries", middlewares_1.default.wrap(require("./add-country").default));
    route.delete("/:region_id/countries/:country_code", middlewares_1.default.wrap(require("./remove-country").default));
    route.post("/:region_id/payment-providers", middlewares_1.default.wrap(require("./add-payment-provider").default));
    route.delete("/:region_id/payment-providers/:provider_id", middlewares_1.default.wrap(require("./remove-payment-provider").default));
    route.post("/:region_id/fulfillment-providers", middlewares_1.default.wrap(require("./add-fulfillment-provider").default));
    route.delete("/:region_id/fulfillment-providers/:provider_id", middlewares_1.default.wrap(require("./remove-fulfillment-provider").default));
    /**
     * Set metadata key / value pair.
     */
    route.post("/:id/metadata", middlewares_1.default.wrap(require("./set-metadata").default));
    /**
     * Delete metadata key / value pair.
     */
    route.delete("/:id/metadata/:key", middlewares_1.default.wrap(require("./delete-metadata").default));
    return app;
});
exports.defaultAdminRegionFields = [
    "id",
    "name",
    "currency_code",
    "tax_rate",
    "tax_code",
    "created_at",
    "updated_at",
    "deleted_at",
    "metadata",
];
exports.defaultAdminRegionRelations = [
    "countries",
    "payment_providers",
    "fulfillment_providers",
];
var AdminRegionsRes = /** @class */ (function () {
    function AdminRegionsRes() {
    }
    return AdminRegionsRes;
}());
exports.AdminRegionsRes = AdminRegionsRes;
var FulfillmentOption = /** @class */ (function () {
    function FulfillmentOption() {
    }
    return FulfillmentOption;
}());
exports.FulfillmentOption = FulfillmentOption;
var AdminGetRegionsRegionFulfillmentOptionsRes = /** @class */ (function () {
    function AdminGetRegionsRegionFulfillmentOptionsRes() {
    }
    return AdminGetRegionsRegionFulfillmentOptionsRes;
}());
exports.AdminGetRegionsRegionFulfillmentOptionsRes = AdminGetRegionsRegionFulfillmentOptionsRes;
__exportStar(require("./list-regions"), exports);
__exportStar(require("./update-region"), exports);
__exportStar(require("./create-region"), exports);
__exportStar(require("./add-country"), exports);
__exportStar(require("./add-payment-provider"), exports);
__exportStar(require("./add-fulfillment-provider"), exports);
__exportStar(require("./set-metadata"), exports);
//# sourceMappingURL=index.js.map