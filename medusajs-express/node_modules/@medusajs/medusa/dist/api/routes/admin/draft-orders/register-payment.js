"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../orders/index");
/**
 * @oas [post] /draft-orders/{id}/register-payment
 * summary: "Registers a payment for a Draft Order"
 * operationId: "PostDraftOrdersDraftOrderRegisterPayment"
 * description: "Registers a payment for a Draft Order."
 * x-authenticated: true
 * parameters:
 *   - (path) id=* {String} The Draft Order id.
 * tags:
 *   - Draft Order
 * responses:
 *   200:
 *     description: OK
 *     content:
 *       application/json:
 *         schema:
 *           properties:
 *             draft_order:
 *               $ref: "#/components/schemas/draft-order"
 */
exports.default = (function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var id, draftOrderService, paymentProviderService, orderService, cartService, entityManager, result, order;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                id = req.params.id;
                draftOrderService = req.scope.resolve("draftOrderService");
                paymentProviderService = req.scope.resolve("paymentProviderService");
                orderService = req.scope.resolve("orderService");
                cartService = req.scope.resolve("cartService");
                entityManager = req.scope.resolve("manager");
                return [4 /*yield*/, entityManager.transaction(function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                        var draftOrder, cart;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, draftOrderService
                                        .withTransaction(manager)
                                        .retrieve(id)];
                                case 1:
                                    draftOrder = _a.sent();
                                    return [4 /*yield*/, cartService
                                            .withTransaction(manager)
                                            .retrieve(draftOrder.cart_id, {
                                            select: ["total"],
                                            relations: [
                                                "discounts",
                                                "discounts.rule",
                                                "discounts.rule.valid_for",
                                                "shipping_methods",
                                                "region",
                                                "items",
                                            ],
                                        })];
                                case 2:
                                    cart = _a.sent();
                                    return [4 /*yield*/, paymentProviderService
                                            .withTransaction(manager)
                                            .createSession("system", cart)];
                                case 3:
                                    _a.sent();
                                    return [4 /*yield*/, cartService
                                            .withTransaction(manager)
                                            .setPaymentSession(cart.id, "system")];
                                case 4:
                                    _a.sent();
                                    return [4 /*yield*/, cartService.withTransaction(manager).authorizePayment(cart.id)];
                                case 5:
                                    _a.sent();
                                    return [4 /*yield*/, orderService.withTransaction(manager).createFromCart(cart.id)];
                                case 6:
                                    result = _a.sent();
                                    return [4 /*yield*/, draftOrderService
                                            .withTransaction(manager)
                                            .registerCartCompletion(draftOrder.id, result.id)];
                                case 7:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            case 1:
                _a.sent();
                return [4 /*yield*/, orderService.retrieve(result.id, {
                        relations: index_1.defaultAdminOrdersRelations,
                        select: index_1.defaultAdminOrdersFields,
                    })];
            case 2:
                order = _a.sent();
                res.status(200).json({ order: order });
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=register-payment.js.map