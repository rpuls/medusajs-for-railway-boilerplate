"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
/**
 * @oas [post] /carts/{id}/complete
 * summary: "Complete a Cart"
 * operationId: "PostCartsCartComplete"
 * description: "Completes a cart. The following steps will be performed. Payment
 *   authorization is attempted and if more work is required, we simply return
 *   the cart for further updates. If payment is authorized and order is not yet
 *   created, we make sure to do so. The completion of a cart can be performed
 *   idempotently with a provided header `Idempotency-Key`. If not provided, we
 *   will generate one for the request."
 * parameters:
 *   - (path) id=* {String} The Cart id.
 * tags:
 *   - Cart
 * responses:
 *   200:
 *     description: "If a cart was successfully authorized, but requires further
 *       action from the user the response body will contain the cart with an
 *       updated payment session. If the Cart was successfully completed the
 *       response body will contain the newly created Order."
 *     content:
 *       application/json:
 *         schema:
 *           oneOf:
 *            - type: object
 *              properties:
 *                order:
 *                  $ref: "#/components/schemas/order"
 *            - type: object
 *              properties:
 *                cart:
 *                  $ref: "#/components/schemas/cart"
 *            - type: object
 *              properties:
 *                cart:
 *                  $ref: "#/components/schemas/swap"
 */
exports.default = (function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
    var id, idempotencyKeyService, headerKey, idempotencyKey, error_1, cartService, orderService, swapService, inProgress, err, _a, _b, key, error, _c, key, error;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                id = req.params.id;
                idempotencyKeyService = req.scope.resolve("idempotencyKeyService");
                headerKey = req.get("Idempotency-Key") || "";
                _d.label = 1;
            case 1:
                _d.trys.push([1, 3, , 4]);
                return [4 /*yield*/, idempotencyKeyService.initializeRequest(headerKey, req.method, req.params, req.path)];
            case 2:
                idempotencyKey = _d.sent();
                return [3 /*break*/, 4];
            case 3:
                error_1 = _d.sent();
                console.log(error_1);
                res.status(409).send("Failed to create idempotency key");
                return [2 /*return*/];
            case 4:
                res.setHeader("Access-Control-Expose-Headers", "Idempotency-Key");
                res.setHeader("Idempotency-Key", idempotencyKey.idempotency_key);
                cartService = req.scope.resolve("cartService");
                orderService = req.scope.resolve("orderService");
                swapService = req.scope.resolve("swapService");
                inProgress = true;
                err = false;
                _d.label = 5;
            case 5:
                if (!inProgress) return [3 /*break*/, 14];
                _a = idempotencyKey.recovery_point;
                switch (_a) {
                    case "started": return [3 /*break*/, 6];
                    case "payment_authorized": return [3 /*break*/, 8];
                    case "finished": return [3 /*break*/, 10];
                }
                return [3 /*break*/, 11];
            case 6: return [4 /*yield*/, idempotencyKeyService.workStage(idempotencyKey.idempotency_key, function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                    var cart;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, cartService.withTransaction(manager).retrieve(id)];
                            case 1:
                                cart = _a.sent();
                                if (cart.completed_at) {
                                    return [2 /*return*/, {
                                            response_code: 409,
                                            response_body: {
                                                code: medusa_core_utils_1.MedusaError.Codes.CART_INCOMPATIBLE_STATE,
                                                message: "Cart has already been completed",
                                                type: medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED,
                                            },
                                        }];
                                }
                                return [4 /*yield*/, cartService
                                        .withTransaction(manager)
                                        .authorizePayment(id, __assign(__assign({}, req.request_context), { idempotency_key: idempotencyKey.idempotency_key }))];
                            case 2:
                                cart = _a.sent();
                                if (cart.payment_session) {
                                    if (cart.payment_session.status === "requires_more" ||
                                        cart.payment_session.status === "pending") {
                                        return [2 /*return*/, {
                                                response_code: 200,
                                                response_body: {
                                                    data: cart,
                                                    payment_status: cart.payment_session.status,
                                                    type: "cart",
                                                },
                                            }];
                                    }
                                }
                                return [2 /*return*/, {
                                        recovery_point: "payment_authorized",
                                    }];
                        }
                    });
                }); })];
            case 7:
                _b = _d.sent(), key = _b.key, error = _b.error;
                if (error) {
                    inProgress = false;
                    err = error;
                }
                else {
                    idempotencyKey = key;
                }
                return [3 /*break*/, 13];
            case 8: return [4 /*yield*/, idempotencyKeyService.workStage(idempotencyKey.idempotency_key, function (manager) { return __awaiter(void 0, void 0, void 0, function () {
                    var cart, order, _a, swapId, swap, error_2, error_3;
                    var _b;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, cartService
                                    .withTransaction(manager)
                                    .retrieve(id, {
                                    select: ["total"],
                                    relations: ["payment", "payment_sessions"],
                                })];
                            case 1:
                                cart = _c.sent();
                                _a = cart.type;
                                switch (_a) {
                                    case "swap": return [3 /*break*/, 2];
                                }
                                return [3 /*break*/, 6];
                            case 2:
                                _c.trys.push([2, 5, , 6]);
                                swapId = (_b = cart.metadata) === null || _b === void 0 ? void 0 : _b.swap_id;
                                return [4 /*yield*/, swapService
                                        .withTransaction(manager)
                                        .registerCartCompletion(swapId)];
                            case 3:
                                swap = _c.sent();
                                return [4 /*yield*/, swapService
                                        .withTransaction(manager)
                                        .retrieve(swap.id, { relations: ["shipping_address"] })];
                            case 4:
                                swap = _c.sent();
                                return [2 /*return*/, {
                                        response_code: 200,
                                        response_body: { data: swap, type: "swap" },
                                    }];
                            case 5:
                                error_2 = _c.sent();
                                if (error_2 &&
                                    error_2.code === medusa_core_utils_1.MedusaError.Codes.INSUFFICIENT_INVENTORY) {
                                    return [2 /*return*/, {
                                            response_code: 409,
                                            response_body: {
                                                message: error_2.message,
                                                type: error_2.type,
                                                code: error_2.code,
                                            },
                                        }];
                                }
                                else {
                                    throw error_2;
                                }
                                return [3 /*break*/, 6];
                            case 6:
                                if (typeof cart.total === "undefined") {
                                    return [2 /*return*/, {
                                            response_code: 500,
                                            response_body: {
                                                message: "Unexpected state",
                                            },
                                        }];
                                }
                                if (!cart.payment && cart.total > 0) {
                                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Cart payment not authorized");
                                }
                                _c.label = 7;
                            case 7:
                                _c.trys.push([7, 9, , 13]);
                                return [4 /*yield*/, orderService
                                        .withTransaction(manager)
                                        .createFromCart(cart.id)];
                            case 8:
                                order = _c.sent();
                                return [3 /*break*/, 13];
                            case 9:
                                error_3 = _c.sent();
                                if (!(error_3 &&
                                    error_3.message === "Order from cart already exists")) return [3 /*break*/, 11];
                                return [4 /*yield*/, orderService
                                        .withTransaction(manager)
                                        .retrieveByCartId(id, {
                                        select: [
                                            "subtotal",
                                            "tax_total",
                                            "shipping_total",
                                            "discount_total",
                                            "total",
                                        ],
                                        relations: ["shipping_address", "items", "payments"],
                                    })];
                            case 10:
                                order = _c.sent();
                                return [2 /*return*/, {
                                        response_code: 200,
                                        response_body: { data: order, type: "order" },
                                    }];
                            case 11:
                                if (error_3 &&
                                    error_3.code === medusa_core_utils_1.MedusaError.Codes.INSUFFICIENT_INVENTORY) {
                                    return [2 /*return*/, {
                                            response_code: 409,
                                            response_body: {
                                                message: error_3.message,
                                                type: error_3.type,
                                                code: error_3.code,
                                            },
                                        }];
                                }
                                else {
                                    throw error_3;
                                }
                                _c.label = 12;
                            case 12: return [3 /*break*/, 13];
                            case 13: return [4 /*yield*/, orderService
                                    .withTransaction(manager)
                                    .retrieve(order.id, {
                                    select: [
                                        "subtotal",
                                        "tax_total",
                                        "shipping_total",
                                        "discount_total",
                                        "total",
                                    ],
                                    relations: ["shipping_address", "items", "payments"],
                                })];
                            case 14:
                                order = _c.sent();
                                return [2 /*return*/, {
                                        response_code: 200,
                                        response_body: { data: order, type: "order" },
                                    }];
                        }
                    });
                }); })];
            case 9:
                _c = _d.sent(), key = _c.key, error = _c.error;
                if (error) {
                    inProgress = false;
                    err = error;
                }
                else {
                    idempotencyKey = key;
                }
                return [3 /*break*/, 13];
            case 10:
                {
                    inProgress = false;
                    return [3 /*break*/, 13];
                }
                _d.label = 11;
            case 11: return [4 /*yield*/, idempotencyKeyService.update(idempotencyKey.idempotency_key, {
                    recovery_point: "finished",
                    response_code: 500,
                    response_body: { message: "Unknown recovery point" },
                })];
            case 12:
                idempotencyKey = _d.sent();
                return [3 /*break*/, 13];
            case 13: return [3 /*break*/, 5];
            case 14:
                if (err) {
                    throw err;
                }
                res.status(idempotencyKey.response_code).json(idempotencyKey.response_body);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=complete-cart.js.map