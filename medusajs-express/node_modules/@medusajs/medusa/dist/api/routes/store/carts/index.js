"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultStoreCartRelations = exports.defaultStoreCartFields = void 0;
var express_1 = require("express");
require("reflect-metadata");
var middlewares_1 = __importDefault(require("../../../middlewares"));
var route = (0, express_1.Router)();
exports.default = (function (app, container) {
    var e_1, _a;
    var middlewareService = container.resolve("middlewareService");
    app.use("/carts", route);
    // Inject plugin routes
    var routers = middlewareService.getRouters("store/carts");
    try {
        for (var routers_1 = __values(routers), routers_1_1 = routers_1.next(); !routers_1_1.done; routers_1_1 = routers_1.next()) {
            var router = routers_1_1.value;
            route.use("/", router);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (routers_1_1 && !routers_1_1.done && (_a = routers_1.return)) _a.call(routers_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    route.get("/:id", middlewares_1.default.wrap(require("./get-cart").default));
    route.post("/", middlewareService.usePreCartCreation(), middlewares_1.default.wrap(require("./create-cart").default));
    route.post("/:id", middlewares_1.default.wrap(require("./update-cart").default));
    route.post("/:id/complete", middlewares_1.default.wrap(require("./complete-cart").default));
    // DEPRECATION
    route.post("/:id/complete-cart", middlewares_1.default.wrap(require("./complete-cart").default));
    // Line items
    route.post("/:id/line-items", middlewares_1.default.wrap(require("./create-line-item").default));
    route.post("/:id/line-items/:line_id", middlewares_1.default.wrap(require("./update-line-item").default));
    route.delete("/:id/line-items/:line_id", middlewares_1.default.wrap(require("./delete-line-item").default));
    route.delete("/:id/discounts/:code", middlewares_1.default.wrap(require("./delete-discount").default));
    // Payment sessions
    route.post("/:id/payment-sessions", middlewares_1.default.wrap(require("./create-payment-sessions").default));
    route.post("/:id/payment-sessions/:provider_id", middlewares_1.default.wrap(require("./update-payment-session").default));
    route.delete("/:id/payment-sessions/:provider_id", middlewares_1.default.wrap(require("./delete-payment-session").default));
    route.post("/:id/payment-sessions/:provider_id/refresh", middlewares_1.default.wrap(require("./refresh-payment-session").default));
    route.post("/:id/payment-session", middlewares_1.default.wrap(require("./set-payment-session").default));
    route.post("/:id/payment-method", middlewares_1.default.wrap(require("./update-payment-method").default));
    // Shipping Options
    route.post("/:id/shipping-methods", middlewares_1.default.wrap(require("./add-shipping-method").default));
    return app;
});
exports.defaultStoreCartFields = [
    "subtotal",
    "tax_total",
    "shipping_total",
    "discount_total",
    "gift_card_total",
    "total",
];
exports.defaultStoreCartRelations = [
    "gift_cards",
    "region",
    "items",
    "payment",
    "shipping_address",
    "billing_address",
    "region.countries",
    "region.payment_providers",
    "shipping_methods",
    "payment_sessions",
    "shipping_methods.shipping_option",
    "discounts",
    "discounts.rule",
    "discounts.rule.valid_for",
];
__exportStar(require("./add-shipping-method"), exports);
__exportStar(require("./create-cart"), exports);
__exportStar(require("./create-line-item"), exports);
__exportStar(require("./create-payment-sessions"), exports);
__exportStar(require("./set-payment-session"), exports);
__exportStar(require("./update-cart"), exports);
__exportStar(require("./update-line-item"), exports);
__exportStar(require("./update-payment-method"), exports);
__exportStar(require("./update-payment-session"), exports);
//# sourceMappingURL=index.js.map