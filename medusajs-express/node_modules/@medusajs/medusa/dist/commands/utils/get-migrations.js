"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var lodash_1 = require("lodash");
var fs_exists_cached_1 = require("fs-exists-cached");
var medusa_core_utils_1 = require("medusa-core-utils");
function createFileContentHash(path, files) {
    return path + files;
}
// TODO: Create unique id for each plugin
function createPluginId(name) {
    return name;
}
/**
 * Finds the correct path for the plugin. If it is a local plugin it will be
 * found in the plugins folder. Otherwise we will look for the plugin in the
 * installed npm packages.
 * @param {string} pluginName - the name of the plugin to find. Should match
 *    the name of the folder where the plugin is contained.
 * @return {object} the plugin details
 */
function resolvePlugin(pluginName) {
    // Only find plugins when we're not given an absolute path
    if (!(0, fs_exists_cached_1.sync)(pluginName)) {
        // Find the plugin in the local plugins folder
        var resolvedPath = path_1.default.resolve("./plugins/".concat(pluginName));
        if ((0, fs_exists_cached_1.sync)(resolvedPath)) {
            if ((0, fs_exists_cached_1.sync)("".concat(resolvedPath, "/package.json"))) {
                var packageJSON = JSON.parse(fs_1.default.readFileSync("".concat(resolvedPath, "/package.json"), "utf-8"));
                var name = packageJSON.name || pluginName;
                //warnOnIncompatiblePeerDependency(name, packageJSON)
                return {
                    resolve: resolvedPath,
                    name: name,
                    id: createPluginId(name),
                    options: {},
                    version: packageJSON.version || createFileContentHash(resolvedPath, "**"),
                };
            }
            else {
                // Make package.json a requirement for local plugins too
                throw new Error("Plugin ".concat(pluginName, " requires a package.json file"));
            }
        }
    }
    var rootDir = path_1.default.resolve(".");
    /**
     *  Here we have an absolute path to an internal plugin, or a name of a module
     *  which should be located in node_modules.
     */
    try {
        var requireSource = rootDir !== null
            ? (0, medusa_core_utils_1.createRequireFromPath)("".concat(rootDir, "/:internal:"))
            : require;
        // If the path is absolute, resolve the directory of the internal plugin,
        // otherwise resolve the directory containing the package.json
        var resolvedPath = path_1.default.dirname(requireSource.resolve("".concat(pluginName, "/package.json")));
        var packageJSON = JSON.parse(fs_1.default.readFileSync("".concat(resolvedPath, "/package.json"), "utf-8"));
        // warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)
        return {
            resolve: resolvedPath,
            id: createPluginId(packageJSON.name),
            name: packageJSON.name,
            version: packageJSON.version,
        };
    }
    catch (err) {
        throw new Error("Unable to find plugin \"".concat(pluginName, "\". Perhaps you need to install its package?"));
    }
}
exports.default = (function (directory) {
    var e_1, _a;
    var configModule = (0, medusa_core_utils_1.getConfigFile)(directory, "medusa-config").configModule;
    var plugins = configModule.plugins;
    var resolved = plugins.map(function (plugin) {
        if ((0, lodash_1.isString)(plugin)) {
            return resolvePlugin(plugin);
        }
        var details = resolvePlugin(plugin.resolve);
        details.options = plugin.options;
        return details;
    });
    resolved.push({
        resolve: "".concat(directory, "/dist"),
        name: "project-plugin",
        id: createPluginId("project-plugin"),
        options: {},
        version: createFileContentHash(process.cwd(), "**"),
    });
    var migrationDirs = [];
    var coreMigrations = path_1.default.resolve(path_1.default.join(__dirname, "..", "..", "migrations"));
    migrationDirs.push(path_1.default.join(coreMigrations, "*.js"));
    try {
        for (var resolved_1 = __values(resolved), resolved_1_1 = resolved_1.next(); !resolved_1_1.done; resolved_1_1 = resolved_1.next()) {
            var p = resolved_1_1.value;
            var exists = (0, fs_exists_cached_1.sync)("".concat(p.resolve, "/migrations"));
            if (exists) {
                migrationDirs.push("".concat(p.resolve, "/migrations/*.js"));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (resolved_1_1 && !resolved_1_1.done && (_a = resolved_1.return)) _a.call(resolved_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return migrationDirs;
});
//# sourceMappingURL=get-migrations.js.map