export default FulfillmentProviderService;
/**
 * Helps retrive fulfillment providers
 */
declare class FulfillmentProviderService {
    constructor(container: any);
    /** @private {logger} */
    private container_;
    registerInstalledProviders(providers: any): Promise<void>;
    list(): Promise<any>;
    listFulfillmentOptions(providers: any): Promise<any[]>;
    /**
     * @param {string} provider_id - the provider id
     * @return {FulfillmentService} the payment fulfillment provider
     */
    retrieveProvider(provider_id: string): FulfillmentService;
    createFulfillment(method: any, items: any, order: any, fulfillment: any): Promise<any>;
    canCalculate(option: any): Promise<any>;
    validateFulfillmentData(option: any, data: any, cart: any): Promise<any>;
    cancelFulfillment(fulfillment: any): Promise<any>;
    calculatePrice(option: any, data: any, cart: any): Promise<any>;
    validateOption(option: any): Promise<any>;
    createReturn(returnOrder: any): Promise<any>;
    /**
     * Fetches documents from the fulfillment provider
     * @param {string} providerId - the id of the provider
     * @param {object} fulfillmentData - the data relating to the fulfillment
     * @param {"invoice" | "label"} documentType - the typ of
     *  document to fetch
     */
    retrieveDocuments(providerId: string, fulfillmentData: object, documentType: "invoice" | "label"): Promise<any>;
}
