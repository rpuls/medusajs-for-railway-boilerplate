"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
var typeorm_1 = require("typeorm");
/**
 * Handles draft orders
 * @implements {BaseService}
 */
var DraftOrderService = /** @class */ (function (_super) {
    __extends(DraftOrderService, _super);
    function DraftOrderService(_a) {
        var manager = _a.manager, draftOrderRepository = _a.draftOrderRepository, paymentRepository = _a.paymentRepository, orderRepository = _a.orderRepository, eventBusService = _a.eventBusService, cartService = _a.cartService, lineItemService = _a.lineItemService, productVariantService = _a.productVariantService, shippingOptionService = _a.shippingOptionService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {DraftOrderRepository} */
        _this.draftOrderRepository_ = draftOrderRepository;
        /** @private @const {PaymentRepository} */
        _this.paymentRepository_ = paymentRepository;
        /** @private @const {OrderRepository} */
        _this.orderRepository_ = orderRepository;
        /** @private @const {LineItemService} */
        _this.lineItemService_ = lineItemService;
        /** @private @const {CartService} */
        _this.cartService_ = cartService;
        /** @private @const {ProductVariantService} */
        _this.productVariantService_ = productVariantService;
        /** @private @const {ShippingOptionService} */
        _this.shippingOptionService_ = shippingOptionService;
        /** @private @const {EventBusService} */
        _this.eventBus_ = eventBusService;
        return _this;
    }
    DraftOrderService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new DraftOrderService({
            manager: transactionManager,
            draftOrderRepository: this.draftOrderRepository_,
            paymentRepository: this.paymentRepository_,
            orderRepository: this.orderRepository_,
            lineItemService: this.lineItemService_,
            cartService: this.cartService_,
            productVariantService: this.productVariantService_,
            shippingOptionService: this.shippingOptionService_,
            eventBusService: this.eventBus_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Retrieves a draft order with the given id.
     * @param {string} id - id of the draft order to retrieve
     * @param {object} config - query object for findOne
     * @return {Promise<DraftOrder>} the draft order
     */
    DraftOrderService.prototype.retrieve = function (id, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var draftOrderRepo, validatedId, query, draftOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        draftOrderRepo = this.manager_.getCustomRepository(this.draftOrderRepository_);
                        validatedId = this.validateId_(id);
                        query = this.buildQuery_({ id: validatedId }, config);
                        return [4 /*yield*/, draftOrderRepo.findOne(query)];
                    case 1:
                        draftOrder = _a.sent();
                        if (!draftOrder) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Draft order with ".concat(id, " was not found"));
                        }
                        return [2 /*return*/, draftOrder];
                }
            });
        });
    };
    /**
     * Retrieves a draft order based on its associated cart id
     * @param {string} cartId - cart id that the draft orders's cart has
     * @param {object} config - query object for findOne
     * @return {Promise<DraftOrder>} the draft order
     */
    DraftOrderService.prototype.retrieveByCartId = function (cartId, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var draftOrderRepo, query, draftOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        draftOrderRepo = this.manager_.getCustomRepository(this.draftOrderRepository_);
                        query = this.buildQuery_({ cart_id: cartId }, config);
                        return [4 /*yield*/, draftOrderRepo.findOne(query)];
                    case 1:
                        draftOrder = _a.sent();
                        if (!draftOrder) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Draft order was not found");
                        }
                        return [2 /*return*/, draftOrder];
                }
            });
        });
    };
    /**
     * Deletes draft order idempotently.
     * @param {string} draftOrderId - id of draft order to delete
     * @return {Promise} empty promise
     */
    DraftOrderService.prototype.delete = function (draftOrderId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var draftOrderRepo, draftOrder;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    draftOrderRepo = manager.getCustomRepository(this.draftOrderRepository_);
                                    return [4 /*yield*/, draftOrderRepo.findOne({
                                            where: { id: draftOrderId },
                                        })];
                                case 1:
                                    draftOrder = _a.sent();
                                    if (!draftOrder) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, draftOrderRepo.remove(draftOrder)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Lists draft orders alongside the count
     * @param {object} selector - query selector to filter draft orders
     * @param {object} config - query config
     * @return {Promise<DraftOrder[]>} draft orders
     */
    DraftOrderService.prototype.listAndCount = function (selector, config) {
        if (config === void 0) { config = { skip: 0, take: 50, order: { created_at: "DESC" } }; }
        return __awaiter(this, void 0, void 0, function () {
            var draftOrderRepository, q, query, where_1, _a, draftOrders, count;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        draftOrderRepository = this.manager_.getCustomRepository(this.draftOrderRepository_);
                        if ("q" in selector) {
                            q = selector.q;
                            delete selector.q;
                        }
                        query = this.buildQuery_(selector, config);
                        if (q) {
                            where_1 = query.where;
                            delete where_1.display_id;
                            query.join = {
                                alias: "draft_order",
                                innerJoin: {
                                    cart: "draft_order.cart",
                                },
                            };
                            query.where = function (qb) {
                                qb.where(where_1);
                                qb.andWhere(new typeorm_1.Brackets(function (qb) {
                                    qb.where("cart.email ILIKE :q", {
                                        q: "%".concat(q, "%"),
                                    }).orWhere("draft_order.display_id::varchar(255) ILIKE :dId", {
                                        dId: "".concat(q),
                                    });
                                }));
                            };
                        }
                        return [4 /*yield*/, draftOrderRepository.findAndCount(query)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), draftOrders = _a[0], count = _a[1];
                        return [2 /*return*/, [draftOrders, count]];
                }
            });
        });
    };
    /**
     * Lists draft orders
     * @param {Object} selector - query object for find
     * @param {Object} config - configurable attributes for find
     * @return {Promise<DraftOrder>} list of draft orders
     */
    DraftOrderService.prototype.list = function (selector, config) {
        if (config === void 0) { config = { skip: 0, take: 50, order: { created_at: "DESC" } }; }
        return __awaiter(this, void 0, void 0, function () {
            var draftOrderRepo, query;
            return __generator(this, function (_a) {
                draftOrderRepo = this.manager_.getCustomRepository(this.draftOrderRepository_);
                query = this.buildQuery_(selector, config);
                return [2 /*return*/, draftOrderRepo.find(query)];
            });
        });
    };
    /**
     * Creates a draft order.
     * @param {object} data - data to create draft order from
     * @return {Promise<DraftOrder>} the created draft order
     */
    DraftOrderService.prototype.create = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var draftOrderRepo, shipping_methods, discounts, no_notification_order, items, rest, discounts_1, discounts_1_1, code, e_1_1, createdCart, draftOrder, result, items_1, items_1_1, item, line, price, e_2_1, shipping_methods_1, shipping_methods_1_1, method, e_3_1;
                        var e_1, _a, e_2, _b, e_3, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    draftOrderRepo = manager.getCustomRepository(this.draftOrderRepository_);
                                    if (!data.region_id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "region_id is required to create a draft order");
                                    }
                                    if (!data.items || !data.items.length) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Items are required to create a draft order");
                                    }
                                    shipping_methods = data.shipping_methods, discounts = data.discounts, no_notification_order = data.no_notification_order, items = data.items, rest = __rest(data, ["shipping_methods", "discounts", "no_notification_order", "items"]);
                                    if (!discounts) return [3 /*break*/, 8];
                                    _d.label = 1;
                                case 1:
                                    _d.trys.push([1, 6, 7, 8]);
                                    discounts_1 = __values(discounts), discounts_1_1 = discounts_1.next();
                                    _d.label = 2;
                                case 2:
                                    if (!!discounts_1_1.done) return [3 /*break*/, 5];
                                    code = discounts_1_1.value.code;
                                    rest.discounts = [];
                                    return [4 /*yield*/, this.cartService_
                                            .withTransaction(manager)
                                            .applyDiscount(rest, code)];
                                case 3:
                                    _d.sent();
                                    _d.label = 4;
                                case 4:
                                    discounts_1_1 = discounts_1.next();
                                    return [3 /*break*/, 2];
                                case 5: return [3 /*break*/, 8];
                                case 6:
                                    e_1_1 = _d.sent();
                                    e_1 = { error: e_1_1 };
                                    return [3 /*break*/, 8];
                                case 7:
                                    try {
                                        if (discounts_1_1 && !discounts_1_1.done && (_a = discounts_1.return)) _a.call(discounts_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                    return [7 /*endfinally*/];
                                case 8: return [4 /*yield*/, this.cartService_
                                        .withTransaction(manager)
                                        .create(__assign({ type: "draft_order" }, rest))];
                                case 9:
                                    createdCart = _d.sent();
                                    draftOrder = draftOrderRepo.create({
                                        cart_id: createdCart.id,
                                        no_notification_order: no_notification_order,
                                    });
                                    return [4 /*yield*/, draftOrderRepo.save(draftOrder)];
                                case 10:
                                    result = _d.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(DraftOrderService.Events.CREATED, {
                                            id: result.id,
                                        })];
                                case 11:
                                    _d.sent();
                                    _d.label = 12;
                                case 12:
                                    _d.trys.push([12, 20, 21, 22]);
                                    items_1 = __values(items), items_1_1 = items_1.next();
                                    _d.label = 13;
                                case 13:
                                    if (!!items_1_1.done) return [3 /*break*/, 19];
                                    item = items_1_1.value;
                                    if (!item.variant_id) return [3 /*break*/, 16];
                                    return [4 /*yield*/, this.lineItemService_
                                            .withTransaction(manager)
                                            .generate(item.variant_id, data.region_id, item.quantity, {
                                            metadata: (item === null || item === void 0 ? void 0 : item.metadata) || {},
                                            unit_price: item.unit_price,
                                        })];
                                case 14:
                                    line = _d.sent();
                                    return [4 /*yield*/, this.lineItemService_.withTransaction(manager).create(__assign({ cart_id: createdCart.id }, line))];
                                case 15:
                                    _d.sent();
                                    return [3 /*break*/, 18];
                                case 16:
                                    price = void 0;
                                    if (typeof item.unit_price === "undefined" || item.unit_price < 0) {
                                        price = 0;
                                    }
                                    else {
                                        price = item.unit_price;
                                    }
                                    // custom line items can be added to a draft order
                                    return [4 /*yield*/, this.lineItemService_.withTransaction(manager).create({
                                            cart_id: createdCart.id,
                                            has_shipping: true,
                                            title: item.title || "Custom item",
                                            allow_discounts: false,
                                            unit_price: price,
                                            quantity: item.quantity,
                                        })];
                                case 17:
                                    // custom line items can be added to a draft order
                                    _d.sent();
                                    _d.label = 18;
                                case 18:
                                    items_1_1 = items_1.next();
                                    return [3 /*break*/, 13];
                                case 19: return [3 /*break*/, 22];
                                case 20:
                                    e_2_1 = _d.sent();
                                    e_2 = { error: e_2_1 };
                                    return [3 /*break*/, 22];
                                case 21:
                                    try {
                                        if (items_1_1 && !items_1_1.done && (_b = items_1.return)) _b.call(items_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                    return [7 /*endfinally*/];
                                case 22:
                                    _d.trys.push([22, 27, 28, 29]);
                                    shipping_methods_1 = __values(shipping_methods), shipping_methods_1_1 = shipping_methods_1.next();
                                    _d.label = 23;
                                case 23:
                                    if (!!shipping_methods_1_1.done) return [3 /*break*/, 26];
                                    method = shipping_methods_1_1.value;
                                    return [4 /*yield*/, this.cartService_
                                            .withTransaction(manager)
                                            .addShippingMethod(createdCart.id, method.option_id, method.data)];
                                case 24:
                                    _d.sent();
                                    _d.label = 25;
                                case 25:
                                    shipping_methods_1_1 = shipping_methods_1.next();
                                    return [3 /*break*/, 23];
                                case 26: return [3 /*break*/, 29];
                                case 27:
                                    e_3_1 = _d.sent();
                                    e_3 = { error: e_3_1 };
                                    return [3 /*break*/, 29];
                                case 28:
                                    try {
                                        if (shipping_methods_1_1 && !shipping_methods_1_1.done && (_c = shipping_methods_1.return)) _c.call(shipping_methods_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                    return [7 /*endfinally*/];
                                case 29: return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Registers a draft order as completed, when an order has been completed.
     * @param {string} doId - id of draft order to complete
     * @param {string} orderId - id of order completed from draft order cart
     * @return {Promise} the created order
     */
    DraftOrderService.prototype.registerCartCompletion = function (doId, orderId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var draftOrderRepo, draftOrder;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    draftOrderRepo = manager.getCustomRepository(this.draftOrderRepository_);
                                    return [4 /*yield*/, this.retrieve(doId)];
                                case 1:
                                    draftOrder = _a.sent();
                                    draftOrder.status = "completed";
                                    draftOrder.completed_at = new Date();
                                    draftOrder.order_id = orderId;
                                    return [4 /*yield*/, draftOrderRepo.save(draftOrder)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Updates a draft order with the given data
     * @param {String} doId - id of the draft order
     * @param {DraftOrder} data - values to update the order with
     * @return {Promise<DraftOrder>} the updated draft order
     */
    DraftOrderService.prototype.update = function (doId, data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var doRepo, draftOrder, touched;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    doRepo = manager.getCustomRepository(this.draftOrderRepository_);
                                    return [4 /*yield*/, this.retrieve(doId)];
                                case 1:
                                    draftOrder = _a.sent();
                                    touched = false;
                                    if (draftOrder.status === "completed") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Can't update a draft order which is complete");
                                    }
                                    if (data.no_notification_order !== undefined) {
                                        touched = true;
                                        draftOrder.no_notification_order = data.no_notification_order;
                                    }
                                    if (!touched) return [3 /*break*/, 3];
                                    doRepo.save(draftOrder);
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(DraftOrderService.Events.UPDATED, {
                                            id: draftOrder.id,
                                        })];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3: return [2 /*return*/, draftOrder];
                            }
                        });
                    }); })];
            });
        });
    };
    DraftOrderService.Events = {
        CREATED: "draft_order.created",
        UPDATED: "draft_order.updated",
    };
    return DraftOrderService;
}(medusa_interfaces_1.BaseService));
exports.default = DraftOrderService;
//# sourceMappingURL=draft-order.js.map