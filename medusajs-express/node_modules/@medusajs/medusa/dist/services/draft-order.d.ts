/// <reference path="../../index.d.ts" />
export default DraftOrderService;
declare const DraftOrderService_base: any;
/**
 * Handles draft orders
 * @implements {BaseService}
 */
declare class DraftOrderService extends DraftOrderService_base implements BaseService {
    [x: string]: any;
    static Events: {
        CREATED: string;
        UPDATED: string;
    };
    constructor({ manager, draftOrderRepository, paymentRepository, orderRepository, eventBusService, cartService, lineItemService, productVariantService, shippingOptionService, }: {
        manager: any;
        draftOrderRepository: any;
        paymentRepository: any;
        orderRepository: any;
        eventBusService: any;
        cartService: any;
        lineItemService: any;
        productVariantService: any;
        shippingOptionService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {DraftOrderRepository} */
    private draftOrderRepository_;
    /** @private @const {PaymentRepository} */
    private paymentRepository_;
    /** @private @const {OrderRepository} */
    private orderRepository_;
    /** @private @const {LineItemService} */
    private lineItemService_;
    /** @private @const {CartService} */
    private cartService_;
    /** @private @const {ProductVariantService} */
    private productVariantService_;
    /** @private @const {ShippingOptionService} */
    private shippingOptionService_;
    /** @private @const {EventBusService} */
    private eventBus_;
    withTransaction(transactionManager: any): DraftOrderService;
    /**
     * Retrieves a draft order with the given id.
     * @param {string} id - id of the draft order to retrieve
     * @param {object} config - query object for findOne
     * @return {Promise<DraftOrder>} the draft order
     */
    retrieve(id: string, config?: object): Promise<DraftOrder>;
    /**
     * Retrieves a draft order based on its associated cart id
     * @param {string} cartId - cart id that the draft orders's cart has
     * @param {object} config - query object for findOne
     * @return {Promise<DraftOrder>} the draft order
     */
    retrieveByCartId(cartId: string, config?: object): Promise<DraftOrder>;
    /**
     * Deletes draft order idempotently.
     * @param {string} draftOrderId - id of draft order to delete
     * @return {Promise} empty promise
     */
    delete(draftOrderId: string): Promise<any>;
    /**
     * Lists draft orders alongside the count
     * @param {object} selector - query selector to filter draft orders
     * @param {object} config - query config
     * @return {Promise<DraftOrder[]>} draft orders
     */
    listAndCount(selector: object, config?: object): Promise<DraftOrder[]>;
    /**
     * Lists draft orders
     * @param {Object} selector - query object for find
     * @param {Object} config - configurable attributes for find
     * @return {Promise<DraftOrder>} list of draft orders
     */
    list(selector: any, config?: any): Promise<DraftOrder>;
    /**
     * Creates a draft order.
     * @param {object} data - data to create draft order from
     * @return {Promise<DraftOrder>} the created draft order
     */
    create(data: object): Promise<DraftOrder>;
    /**
     * Registers a draft order as completed, when an order has been completed.
     * @param {string} doId - id of draft order to complete
     * @param {string} orderId - id of order completed from draft order cart
     * @return {Promise} the created order
     */
    registerCartCompletion(doId: string, orderId: string): Promise<any>;
    /**
     * Updates a draft order with the given data
     * @param {String} doId - id of the draft order
     * @param {DraftOrder} data - values to update the order with
     * @return {Promise<DraftOrder>} the updated draft order
     */
    update(doId: string, data: DraftOrder): Promise<DraftOrder>;
}
import { BaseService } from "medusa-interfaces";
