export default IdempotencyKeyService;
declare const IdempotencyKeyService_base: any;
declare class IdempotencyKeyService extends IdempotencyKeyService_base {
    [x: string]: any;
    constructor({ manager, idempotencyKeyRepository, transactionService }: {
        manager: any;
        idempotencyKeyRepository: any;
        transactionService: any;
    });
    /** @private @constant {EntityManager} */
    private manager_;
    /** @private @constant {IdempotencyKeyRepository} */
    private idempotencyKeyRepository_;
    /** @private @constant {TransactionService} */
    private transactionService_;
    /**
     * Execute the initial steps in a idempotent request.
     * @param {string} headerKey - potential idempotency key from header
     * @param {string} reqMethod - method of request
     * @param {string} reqParams - params of request
     * @param {string} reqPath - path of request
     * @return {Promise<IdempotencyKeyModel>} the existing or created idempotency key
     */
    initializeRequest(headerKey: string, reqMethod: string, reqParams: string, reqPath: string): Promise<IdempotencyKeyModel>;
    /**
     * Creates an idempotency key for a request.
     * If no idempotency key is provided in request, we will create a unique
     * identifier.
     * @param {object} payload - payload of request to create idempotency key for
     * @return {Promise<IdempotencyKeyModel>} the created idempotency key
     */
    create(payload: object): Promise<IdempotencyKeyModel>;
    /**
     * Retrieves an idempotency key
     * @param {string} idempotencyKey - key to retrieve
     * @return {Promise<IdempotencyKeyModel>} idempotency key
     */
    retrieve(idempotencyKey: string): Promise<IdempotencyKeyModel>;
    /**
     * Locks an idempotency.
     * @param {string} idempotencyKey - key to lock
     * @param {object} session - mongoose transaction session
     * @return {Promise} result of the update operation
     */
    lock(idempotencyKey: string): Promise<any>;
    /**
     * Locks an idempotency.
     * @param {string} idempotencyKey - key to update
     * @param {object} update - update object
     * @return {Promise} result of the update operation
     */
    update(idempotencyKey: string, update: object): Promise<any>;
    /**
     * Performs an atomic work stage.
     * An atomic work stage contains some related functionality, that needs to be
     * transactionally executed in isolation. An idempotent request will
     * always consist of 2 or more of these phases. The required phases are
     * "started" and "finished".
     * @param {string} idempotencyKey - current idempotency key
     * @param {Function} func - functionality to execute within the phase
     * @return {IdempotencyKeyModel} new updated idempotency key
     */
    workStage(idempotencyKey: string, func: Function): IdempotencyKeyModel;
}
