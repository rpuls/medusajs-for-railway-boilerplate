"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
/**
 * Helps retrive payment providers
 */
var PaymentProviderService = /** @class */ (function (_super) {
    __extends(PaymentProviderService, _super);
    function PaymentProviderService(container) {
        var _this = _super.call(this) || this;
        /** @private {logger} */
        _this.container_ = container;
        _this.manager_ = container.manager;
        _this.paymentSessionRepository_ = container.paymentSessionRepository;
        _this.paymentRepository_ = container.paymentRepository;
        _this.refundRepository_ = container.refundRepository;
        return _this;
    }
    PaymentProviderService.prototype.withTransaction = function (manager) {
        if (!manager) {
            return this;
        }
        var cloned = new PaymentProviderService(this.container_);
        cloned.transactionManager_ = manager;
        cloned.manager_ = manager;
        return cloned;
    };
    PaymentProviderService.prototype.registerInstalledProviders = function (providers) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, manager, paymentProviderRepository, model, providers_1, providers_1_1, p, n, e_1_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.container_, manager = _a.manager, paymentProviderRepository = _a.paymentProviderRepository;
                        model = manager.getCustomRepository(paymentProviderRepository);
                        model.update({}, { is_installed: false });
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, 7, 8]);
                        providers_1 = __values(providers), providers_1_1 = providers_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!providers_1_1.done) return [3 /*break*/, 5];
                        p = providers_1_1.value;
                        n = model.create({ id: p, is_installed: true });
                        return [4 /*yield*/, model.save(n)];
                    case 3:
                        _c.sent();
                        _c.label = 4;
                    case 4:
                        providers_1_1 = providers_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (providers_1_1 && !providers_1_1.done && (_b = providers_1.return)) _b.call(providers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PaymentProviderService.prototype.list = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, manager, paymentProviderRepository, ppRepo;
            return __generator(this, function (_b) {
                _a = this.container_, manager = _a.manager, paymentProviderRepository = _a.paymentProviderRepository;
                ppRepo = manager.getCustomRepository(paymentProviderRepository);
                return [2 /*return*/, ppRepo.find({})];
            });
        });
    };
    PaymentProviderService.prototype.retrievePayment = function (id, relations) {
        if (relations === void 0) { relations = []; }
        return __awaiter(this, void 0, void 0, function () {
            var paymentRepo, validatedId, query, payment;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        paymentRepo = this.manager_.getCustomRepository(this.paymentRepository_);
                        validatedId = this.validateId_(id);
                        query = {
                            where: { id: validatedId },
                        };
                        if (relations.length) {
                            query.relations = relations;
                        }
                        return [4 /*yield*/, paymentRepo.findOne(query)];
                    case 1:
                        payment = _a.sent();
                        if (!payment) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Payment with ".concat(id, " was not found"));
                        }
                        return [2 /*return*/, payment];
                }
            });
        });
    };
    PaymentProviderService.prototype.listPayments = function (selector, config) {
        if (config === void 0) { config = { skip: 0, take: 50, order: { created_at: "DESC" } }; }
        var payRepo = this.manager_.getCustomRepository(this.paymentRepository_);
        var query = this.buildQuery_(selector, config);
        return payRepo.find(query);
    };
    PaymentProviderService.prototype.retrieveSession = function (id, relations) {
        if (relations === void 0) { relations = []; }
        return __awaiter(this, void 0, void 0, function () {
            var sessionRepo, validatedId, query, session;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sessionRepo = this.manager_.getCustomRepository(this.paymentSessionRepository_);
                        validatedId = this.validateId_(id);
                        query = {
                            where: { id: validatedId },
                        };
                        if (relations.length) {
                            query.relations = relations;
                        }
                        return [4 /*yield*/, sessionRepo.findOne(query)];
                    case 1:
                        session = _a.sent();
                        if (!session) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Payment Session with ".concat(id, " was not found"));
                        }
                        return [2 /*return*/, session];
                }
            });
        });
    };
    /**
     * Creates a payment session with the given provider.
     * @param {string} providerId - the id of the provider to create payment with
     * @param {Cart} cart - a cart object used to calculate the amount, etc. from
     * @return {Promise} the payment session
     */
    PaymentProviderService.prototype.createSession = function (providerId, cart) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var provider, sessionData, sessionRepo, toCreate, created, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    provider = this.retrieveProvider(providerId);
                                    return [4 /*yield*/, provider.createPayment(cart)];
                                case 1:
                                    sessionData = _a.sent();
                                    sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                                    toCreate = {
                                        cart_id: cart.id,
                                        provider_id: providerId,
                                        data: sessionData,
                                        status: "pending",
                                    };
                                    created = sessionRepo.create(toCreate);
                                    return [4 /*yield*/, sessionRepo.save(created)];
                                case 2:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Refreshes a payment session with the given provider.
     * This means, that we delete the current one and create a new.
     * @param {PaymentSession} paymentSession - the payment session object to
     *    update
     * @param {Cart} cart - a cart object used to calculate the amount, etc. from
     * @return {Promise} the payment session
     */
    PaymentProviderService.prototype.refreshSession = function (paymentSession, cart) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var session, provider, sessionRepo, sessionData, toCreate, created, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieveSession(paymentSession.id)];
                                case 1:
                                    session = _a.sent();
                                    provider = this.retrieveProvider(paymentSession.provider_id);
                                    return [4 /*yield*/, provider.deletePayment(session)];
                                case 2:
                                    _a.sent();
                                    sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                                    return [4 /*yield*/, sessionRepo.remove(session)];
                                case 3:
                                    _a.sent();
                                    return [4 /*yield*/, provider.createPayment(cart)];
                                case 4:
                                    sessionData = _a.sent();
                                    toCreate = {
                                        cart_id: cart.id,
                                        provider_id: session.provider_id,
                                        data: sessionData,
                                        is_selected: true,
                                        status: "pending",
                                    };
                                    created = sessionRepo.create(toCreate);
                                    return [4 /*yield*/, sessionRepo.save(created)];
                                case 5:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Updates an existing payment session.
     * @param {PaymentSession} paymentSession - the payment session object to
     *    update
     * @param {Cart} cart - the cart object to update for
     * @return {Promise} the updated payment session
     */
    PaymentProviderService.prototype.updateSession = function (paymentSession, cart) {
        var _this = this;
        return this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
            var session, provider, _a, sessionRepo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.retrieveSession(paymentSession.id)];
                    case 1:
                        session = _b.sent();
                        provider = this.retrieveProvider(paymentSession.provider_id);
                        _a = session;
                        return [4 /*yield*/, provider.updatePayment(paymentSession.data, cart)];
                    case 2:
                        _a.data = _b.sent();
                        sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                        return [2 /*return*/, sessionRepo.save(session)];
                }
            });
        }); });
    };
    PaymentProviderService.prototype.deleteSession = function (paymentSession) {
        var _this = this;
        return this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
            var session, provider, sessionRepo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.retrieveSession(paymentSession.id).catch(function (_) { return undefined; })];
                    case 1:
                        session = _a.sent();
                        if (!session) {
                            return [2 /*return*/, Promise.resolve()];
                        }
                        provider = this.retrieveProvider(paymentSession.provider_id);
                        return [4 /*yield*/, provider.deletePayment(paymentSession)];
                    case 2:
                        _a.sent();
                        sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                        return [2 /*return*/, sessionRepo.remove(session)];
                }
            });
        }); });
    };
    /**
     * Finds a provider given an id
     * @param {string} providerId - the id of the provider to get
     * @return {PaymentService} the payment provider
     */
    PaymentProviderService.prototype.retrieveProvider = function (providerId) {
        try {
            var provider = void 0;
            if (providerId === "system") {
                provider = this.container_["systemPaymentProviderService"];
            }
            else {
                provider = this.container_["pp_".concat(providerId)];
            }
            return provider;
        }
        catch (err) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Could not find a payment provider with id: ".concat(providerId));
        }
    };
    PaymentProviderService.prototype.createPayment = function (cart) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var paymentSession, region, total, provider, paymentData, paymentRepo, created;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    paymentSession = cart.payment_session, region = cart.region, total = cart.total;
                                    provider = this.retrieveProvider(paymentSession.provider_id);
                                    return [4 /*yield*/, provider.getPaymentData(paymentSession)];
                                case 1:
                                    paymentData = _a.sent();
                                    paymentRepo = manager.getCustomRepository(this.paymentRepository_);
                                    created = paymentRepo.create({
                                        provider_id: paymentSession.provider_id,
                                        amount: total,
                                        currency_code: region.currency_code,
                                        data: paymentData,
                                        cart_id: cart.id,
                                    });
                                    return [2 /*return*/, paymentRepo.save(created)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.updatePayment = function (paymentId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var payment, payRepo;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrievePayment(paymentId)];
                                case 1:
                                    payment = _a.sent();
                                    if ("order_id" in update) {
                                        payment.order_id = update.order_id;
                                    }
                                    if ("swap_id" in update) {
                                        payment.swap_id = update.swap_id;
                                    }
                                    payRepo = manager.getCustomRepository(this.paymentRepository_);
                                    return [2 /*return*/, payRepo.save(payment)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.authorizePayment = function (paymentSession, context) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var session, provider, _a, status, data, sessionRepo;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, this.retrieveSession(paymentSession.id).catch(function (_) { return undefined; })];
                                case 1:
                                    session = _b.sent();
                                    if (!session) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    provider = this.retrieveProvider(paymentSession.provider_id);
                                    return [4 /*yield*/, provider
                                            .withTransaction(manager)
                                            .authorizePayment(session, context)];
                                case 2:
                                    _a = _b.sent(), status = _a.status, data = _a.data;
                                    session.data = data;
                                    session.status = status;
                                    sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                                    return [2 /*return*/, sessionRepo.save(session)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.updateSessionData = function (paySession, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var session, provider, _a, sessionRepo;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, this.retrieveSession(paySession.id)];
                                case 1:
                                    session = _b.sent();
                                    provider = this.retrieveProvider(paySession.provider_id);
                                    _a = session;
                                    return [4 /*yield*/, provider.updatePaymentData(paySession.data, update)];
                                case 2:
                                    _a.data = _b.sent();
                                    session.status = paySession.status;
                                    sessionRepo = manager.getCustomRepository(this.paymentSessionRepository_);
                                    return [2 /*return*/, sessionRepo.save(session)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.cancelPayment = function (paymentObj) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var payment, provider, _a, now, paymentRepo;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, this.retrievePayment(paymentObj.id)];
                                case 1:
                                    payment = _b.sent();
                                    provider = this.retrieveProvider(payment.provider_id);
                                    _a = payment;
                                    return [4 /*yield*/, provider.cancelPayment(payment)];
                                case 2:
                                    _a.data = _b.sent();
                                    now = new Date();
                                    payment.canceled_at = now.toISOString();
                                    paymentRepo = manager.getCustomRepository(this.paymentRepository_);
                                    return [4 /*yield*/, paymentRepo.save(payment)];
                                case 3: return [2 /*return*/, _b.sent()];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.getStatus = function (payment) {
        return __awaiter(this, void 0, void 0, function () {
            var provider;
            return __generator(this, function (_a) {
                provider = this.retrieveProvider(payment.provider_id);
                return [2 /*return*/, provider.getStatus(payment.data)];
            });
        });
    };
    PaymentProviderService.prototype.capturePayment = function (paymentObj) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var payment, provider, _a, now, paymentRepo;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, this.retrievePayment(paymentObj.id)];
                                case 1:
                                    payment = _b.sent();
                                    provider = this.retrieveProvider(payment.provider_id);
                                    _a = payment;
                                    return [4 /*yield*/, provider.capturePayment(payment)];
                                case 2:
                                    _a.data = _b.sent();
                                    now = new Date();
                                    payment.captured_at = now.toISOString();
                                    paymentRepo = manager.getCustomRepository(this.paymentRepository_);
                                    return [2 /*return*/, paymentRepo.save(payment)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.refundPayment = function (payObjs, amount, reason, note) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var payments, order_id, refundable, balance, used, paymentRepo, toRefund, currentRefundable, refundAmount, provider, _a, refundRepo, toCreate, created;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4 /*yield*/, this.listPayments({ id: payObjs.map(function (p) { return p.id; }) })];
                                case 1:
                                    payments = _b.sent();
                                    refundable = payments.reduce(function (acc, next) {
                                        order_id = next.order_id;
                                        if (next.captured_at) {
                                            return (acc += next.amount - next.amount_refunded);
                                        }
                                        return acc;
                                    }, 0);
                                    if (refundable < amount) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Refund amount is too high");
                                    }
                                    balance = amount;
                                    used = [];
                                    paymentRepo = manager.getCustomRepository(this.paymentRepository_);
                                    toRefund = payments.find(function (p) { return p.amount - p.amount_refunded > 0; });
                                    _b.label = 2;
                                case 2:
                                    if (!toRefund) return [3 /*break*/, 5];
                                    currentRefundable = toRefund.amount - toRefund.amount_refunded;
                                    refundAmount = Math.min(currentRefundable, balance);
                                    provider = this.retrieveProvider(toRefund.provider_id);
                                    _a = toRefund;
                                    return [4 /*yield*/, provider.refundPayment(toRefund, refundAmount)];
                                case 3:
                                    _a.data = _b.sent();
                                    toRefund.amount_refunded += refundAmount;
                                    return [4 /*yield*/, paymentRepo.save(toRefund)];
                                case 4:
                                    _b.sent();
                                    balance -= refundAmount;
                                    used.push(toRefund.id);
                                    if (balance > 0) {
                                        toRefund = payments.find(function (p) { return p.amount - p.amount_refunded > 0 && !used.includes(p.id); });
                                    }
                                    else {
                                        toRefund = null;
                                    }
                                    return [3 /*break*/, 2];
                                case 5:
                                    refundRepo = manager.getCustomRepository(this.refundRepository_);
                                    toCreate = {
                                        order_id: order_id,
                                        amount: amount,
                                        reason: reason,
                                        note: note,
                                    };
                                    created = refundRepo.create(toCreate);
                                    return [2 /*return*/, refundRepo.save(created)];
                            }
                        });
                    }); })];
            });
        });
    };
    PaymentProviderService.prototype.retrieveRefund = function (id, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var refRepo, query, refund;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        refRepo = this.manager_.getCustomRepository(this.refundRepository_);
                        query = this.buildQuery_({ id: id }, config);
                        return [4 /*yield*/, refRepo.findOne(query)];
                    case 1:
                        refund = _a.sent();
                        if (!refund) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "A refund with ".concat(id, " was not found"));
                        }
                        return [2 /*return*/, refund];
                }
            });
        });
    };
    return PaymentProviderService;
}(medusa_interfaces_1.BaseService));
exports.default = PaymentProviderService;
//# sourceMappingURL=payment-provider.js.map