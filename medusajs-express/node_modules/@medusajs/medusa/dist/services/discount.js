"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
var iso8601_duration_1 = require("iso8601-duration");
var typeorm_1 = require("typeorm");
/**
 * Provides layer to manipulate discounts.
 * @implements {BaseService}
 */
var DiscountService = /** @class */ (function (_super) {
    __extends(DiscountService, _super);
    function DiscountService(_a) {
        var manager = _a.manager, discountRepository = _a.discountRepository, discountRuleRepository = _a.discountRuleRepository, giftCardRepository = _a.giftCardRepository, totalsService = _a.totalsService, productService = _a.productService, regionService = _a.regionService, eventBusService = _a.eventBusService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {DiscountRepository} */
        _this.discountRepository_ = discountRepository;
        /** @private @const {DiscountRuleRepository} */
        _this.discountRuleRepository_ = discountRuleRepository;
        /** @private @const {GiftCardRepository} */
        _this.giftCardRepository_ = giftCardRepository;
        /** @private @const {TotalsService} */
        _this.totalsService_ = totalsService;
        /** @private @const {ProductService} */
        _this.productService_ = productService;
        /** @private @const {RegionService} */
        _this.regionService_ = regionService;
        /** @private @const {EventBus} */
        _this.eventBus_ = eventBusService;
        return _this;
    }
    DiscountService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new DiscountService({
            manager: transactionManager,
            discountRepository: this.discountRepository_,
            discountRuleRepository: this.discountRuleRepository_,
            giftCardRepository: this.giftCardRepository_,
            totalsService: this.totalsService_,
            productService: this.productService_,
            regionService: this.regionService_,
            eventBusService: this.eventBus_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Creates a discount rule with provided data given that the data is validated.
     * @param {DiscountRule} discountRule - the discount rule to create
     * @return {Promise} the result of the create operation
     */
    DiscountService.prototype.validateDiscountRule_ = function (discountRule) {
        var schema = medusa_core_utils_1.Validator.object().keys({
            id: medusa_core_utils_1.Validator.string().optional(),
            description: medusa_core_utils_1.Validator.string().optional(),
            type: medusa_core_utils_1.Validator.string().required(),
            value: medusa_core_utils_1.Validator.number().min(0).required(),
            allocation: medusa_core_utils_1.Validator.string().required(),
            valid_for: medusa_core_utils_1.Validator.array().optional(),
            created_at: medusa_core_utils_1.Validator.date().optional(),
            updated_at: medusa_core_utils_1.Validator.date().allow(null).optional(),
            deleted_at: medusa_core_utils_1.Validator.date().allow(null).optional(),
            metadata: medusa_core_utils_1.Validator.object().allow(null).optional(),
        });
        var _a = schema.validate(discountRule), value = _a.value, error = _a.error;
        if (error) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, error.details[0].message);
        }
        if (value.type === "percentage" && value.value > 100) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Discount value above 100 is not allowed when type is percentage");
        }
        return value;
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object containing query settings
     * @return {Promise} the result of the find operation
     */
    DiscountService.prototype.list = function (selector, config) {
        if (selector === void 0) { selector = {}; }
        if (config === void 0) { config = { relations: [], skip: 0, take: 10 }; }
        return __awaiter(this, void 0, void 0, function () {
            var discountRepo, query;
            return __generator(this, function (_a) {
                discountRepo = this.manager_.getCustomRepository(this.discountRepository_);
                query = this.buildQuery_(selector, config);
                return [2 /*return*/, discountRepo.find(query)];
            });
        });
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object containing query settings
     * @return {Promise} the result of the find operation
     */
    DiscountService.prototype.listAndCount = function (selector, config) {
        if (selector === void 0) { selector = {}; }
        if (config === void 0) { config = { skip: 0, take: 50, order: { created_at: "DESC" } }; }
        return __awaiter(this, void 0, void 0, function () {
            var discountRepo, q, query, where_1, _a, discounts, count;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        discountRepo = this.manager_.getCustomRepository(this.discountRepository_);
                        if ("q" in selector) {
                            q = selector.q;
                            delete selector.q;
                        }
                        query = this.buildQuery_(selector, config);
                        if (q) {
                            where_1 = query.where;
                            delete where_1.code;
                            query.where = function (qb) {
                                qb.where(where_1);
                                qb.andWhere(new typeorm_1.Brackets(function (qb) {
                                    qb.where({ code: (0, typeorm_1.ILike)("%".concat(q, "%")) });
                                }));
                            };
                        }
                        return [4 /*yield*/, discountRepo.findAndCount(query)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), discounts = _a[0], count = _a[1];
                        return [2 /*return*/, [discounts, count]];
                }
            });
        });
    };
    /**
     * Creates a discount with provided data given that the data is validated.
     * Normalizes discount code to uppercase.
     * @param {Discount} discount - the discount data to create
     * @return {Promise} the result of the create operation
     */
    DiscountService.prototype.create = function (discount) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, ruleRepo, validatedRule, _a, discountRule, createdDiscountRule, created, result;
                        var _this = this;
                        var _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    ruleRepo = manager.getCustomRepository(this.discountRuleRepository_);
                                    if ((_b = discount.rule) === null || _b === void 0 ? void 0 : _b.valid_for) {
                                        discount.rule.valid_for = discount.rule.valid_for.map(function (id) { return ({ id: id }); });
                                    }
                                    validatedRule = this.validateDiscountRule_(discount.rule);
                                    if (((_c = discount.regions) === null || _c === void 0 ? void 0 : _c.length) > 1 && discount.rule.type === "fixed") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Fixed discounts can have one region");
                                    }
                                    if (!discount.regions) return [3 /*break*/, 2];
                                    _a = discount;
                                    return [4 /*yield*/, Promise.all(discount.regions.map(function (regionId) {
                                            return _this.regionService_.withTransaction(manager).retrieve(regionId);
                                        }))];
                                case 1:
                                    _a.regions = _d.sent();
                                    _d.label = 2;
                                case 2: return [4 /*yield*/, ruleRepo.create(validatedRule)];
                                case 3:
                                    discountRule = _d.sent();
                                    return [4 /*yield*/, ruleRepo.save(discountRule)];
                                case 4:
                                    createdDiscountRule = _d.sent();
                                    discount.code = discount.code.toUpperCase();
                                    discount.rule = createdDiscountRule;
                                    return [4 /*yield*/, discountRepo.create(discount)];
                                case 5:
                                    created = _d.sent();
                                    return [4 /*yield*/, discountRepo.save(created)];
                                case 6:
                                    result = _d.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Gets a discount by id.
     * @param {string} discountId - id of discount to retrieve
     * @param {Object} config - the config object containing query settings
     * @return {Promise<Discount>} the discount
     */
    DiscountService.prototype.retrieve = function (discountId, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var discountRepo, validatedId, query, discount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        discountRepo = this.manager_.getCustomRepository(this.discountRepository_);
                        validatedId = this.validateId_(discountId);
                        query = this.buildQuery_({ id: validatedId }, config);
                        return [4 /*yield*/, discountRepo.findOne(query)];
                    case 1:
                        discount = _a.sent();
                        if (!discount) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Discount with ".concat(discountId, " was not found"));
                        }
                        return [2 /*return*/, discount];
                }
            });
        });
    };
    /**
     * Gets a discount by discount code.
     * @param {string} discountCode - discount code of discount to retrieve
     * @param {array} relations - list of relations
     * @return {Promise<Discount>} the discount document
     */
    DiscountService.prototype.retrieveByCode = function (discountCode, relations) {
        if (relations === void 0) { relations = []; }
        return __awaiter(this, void 0, void 0, function () {
            var discountRepo, discount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        discountRepo = this.manager_.getCustomRepository(this.discountRepository_);
                        return [4 /*yield*/, discountRepo.findOne({
                                where: { code: discountCode.toUpperCase(), is_dynamic: false },
                                relations: relations,
                            })];
                    case 1:
                        discount = _a.sent();
                        if (!!discount) return [3 /*break*/, 3];
                        return [4 /*yield*/, discountRepo.findOne({
                                where: { code: discountCode.toUpperCase(), is_dynamic: true },
                                relations: relations,
                            })];
                    case 2:
                        discount = _a.sent();
                        if (!discount) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Discount with code ".concat(discountCode, " was not found"));
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, discount];
                }
            });
        });
    };
    /**
     * Updates a discount.
     * @param {string} discountId - discount id of discount to update
     * @param {Discount} update - the data to update the discount with
     * @return {Promise} the result of the update operation
     */
    DiscountService.prototype.update = function (discountId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount, rule, metadata, regions, rest, _a, _b, _c, _d, key, updated;
                        var e_1, _e;
                        var _this = this;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId, {
                                            relations: ["rule"],
                                        })];
                                case 1:
                                    discount = _f.sent();
                                    rule = update.rule, metadata = update.metadata, regions = update.regions, rest = __rest(update, ["rule", "metadata", "regions"]);
                                    if (rest.ends_at) {
                                        if (discount.starts_at >= new Date(update.ends_at)) {
                                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "\"ends_at\" must be greater than \"starts_at\"");
                                        }
                                    }
                                    if ((regions === null || regions === void 0 ? void 0 : regions.length) > 1 && discount.rule.type === "fixed") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Fixed discounts can have one region");
                                    }
                                    if (!regions) return [3 /*break*/, 3];
                                    _a = discount;
                                    return [4 /*yield*/, Promise.all(regions.map(function (regionId) { return _this.regionService_.retrieve(regionId); }))];
                                case 2:
                                    _a.regions = _f.sent();
                                    _f.label = 3;
                                case 3:
                                    if (!metadata) return [3 /*break*/, 5];
                                    _b = discount;
                                    return [4 /*yield*/, this.setMetadata_(discount.id, metadata)];
                                case 4:
                                    _b.metadata = _f.sent();
                                    _f.label = 5;
                                case 5:
                                    if (rule) {
                                        discount.rule = this.validateDiscountRule_(rule);
                                        if (rule.valid_for) {
                                            discount.rule.valid_for = discount.rule.valid_for.map(function (id) { return ({
                                                id: id,
                                            }); });
                                        }
                                    }
                                    try {
                                        for (_c = __values(Object.keys(rest).filter(function (k) { return rest[k] !== undefined; })), _d = _c.next(); !_d.done; _d = _c.next()) {
                                            key = _d.value;
                                            discount[key] = rest[key];
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                    discount.code = discount.code.toUpperCase();
                                    return [4 /*yield*/, discountRepo.save(discount)];
                                case 6:
                                    updated = _f.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Creates a dynamic code for a discount id.
     * @param {string} discountId - the id of the discount to create a code for
     * @param {Object} data - the object containing a code to identify the discount by
     * @return {Promise} the newly created dynamic code
     */
    DiscountService.prototype.createDynamicCode = function (discountId, data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount, toCreate, lastValidDate, created, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId)];
                                case 1:
                                    discount = _a.sent();
                                    if (!discount.is_dynamic) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Discount must be set to dynamic");
                                    }
                                    if (!data.code) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Discount must have a code");
                                    }
                                    toCreate = __assign(__assign({}, data), { rule_id: discount.rule_id, is_dynamic: true, is_disabled: false, code: data.code.toUpperCase(), parent_discount_id: discount.id, usage_limit: discount.usage_limit });
                                    if (discount.valid_duration) {
                                        lastValidDate = new Date();
                                        lastValidDate.setSeconds(lastValidDate.getSeconds() + (0, iso8601_duration_1.toSeconds)((0, iso8601_duration_1.parse)(discount.valid_duration)));
                                        toCreate.ends_at = lastValidDate;
                                    }
                                    return [4 /*yield*/, discountRepo.create(toCreate)];
                                case 2:
                                    created = _a.sent();
                                    return [4 /*yield*/, discountRepo.save(created)];
                                case 3:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Deletes a dynamic code for a discount id.
     * @param {string} discountId - the id of the discount to create a code for
     * @param {string} code - the code to identify the discount by
     * @return {Promise} the newly created dynamic code
     */
    DiscountService.prototype.deleteDynamicCode = function (discountId, code) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, discountRepo.findOne({
                                            where: { parent_discount_id: discountId, code: code },
                                        })];
                                case 1:
                                    discount = _a.sent();
                                    if (!discount) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, discountRepo.softRemove(discount)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Adds a valid product to the discount rule valid_for array.
     * @param {string} discountId - id of discount
     * @param {string} productId - id of product to add
     * @return {Promise} the result of the update operation
     */
    DiscountService.prototype.addValidProduct = function (discountId, productId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRuleRepo, discount, rule, exists, product, updated;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRuleRepo = manager.getCustomRepository(this.discountRuleRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId, {
                                            relations: ["rule", "rule.valid_for"],
                                        })];
                                case 1:
                                    discount = _a.sent();
                                    rule = discount.rule;
                                    exists = rule.valid_for.find(function (p) { return p.id === productId; });
                                    // If product is already present, we return early
                                    if (exists) {
                                        return [2 /*return*/, rule];
                                    }
                                    return [4 /*yield*/, this.productService_.retrieve(productId)];
                                case 2:
                                    product = _a.sent();
                                    rule.valid_for = __spreadArray(__spreadArray([], __read(rule.valid_for), false), [product], false);
                                    return [4 /*yield*/, discountRuleRepo.save(rule)];
                                case 3:
                                    updated = _a.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Removes a product from the discount rule valid_for array
     * @param {string} discountId - id of discount
     * @param {string} productId - id of product to add
     * @return {Promise} the result of the update operation
     */
    DiscountService.prototype.removeValidProduct = function (discountId, productId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRuleRepo, discount, rule, exists, updated;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRuleRepo = manager.getCustomRepository(this.discountRuleRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId, {
                                            relations: ["rule", "rule.valid_for"],
                                        })];
                                case 1:
                                    discount = _a.sent();
                                    rule = discount.rule;
                                    exists = rule.valid_for.find(function (p) { return p.id === productId; });
                                    // If product is not present, we return early
                                    if (!exists) {
                                        return [2 /*return*/, rule];
                                    }
                                    rule.valid_for = rule.valid_for.filter(function (p) { return p.id !== productId; });
                                    return [4 /*yield*/, discountRuleRepo.save(rule)];
                                case 2:
                                    updated = _a.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Adds a region to the discount regions array.
     * @param {string} discountId - id of discount
     * @param {string} regionId - id of region to add
     * @return {Promise} the result of the update operation
     */
    DiscountService.prototype.addRegion = function (discountId, regionId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount, exists, region, updated;
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId, {
                                            relations: ["regions", "rule"],
                                        })];
                                case 1:
                                    discount = _b.sent();
                                    exists = discount.regions.find(function (r) { return r.id === regionId; });
                                    // If region is already present, we return early
                                    if (exists) {
                                        return [2 /*return*/, discount];
                                    }
                                    if (((_a = discount.regions) === null || _a === void 0 ? void 0 : _a.length) === 1 && discount.rule.type === "fixed") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Fixed discounts can have one region");
                                    }
                                    return [4 /*yield*/, this.regionService_.retrieve(regionId)];
                                case 2:
                                    region = _b.sent();
                                    discount.regions = __spreadArray(__spreadArray([], __read(discount.regions), false), [region], false);
                                    return [4 /*yield*/, discountRepo.save(discount)];
                                case 3:
                                    updated = _b.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Removes a region from the discount regions array.
     * @param {string} discountId - id of discount
     * @param {string} regionId - id of region to remove
     * @return {Promise} the result of the update operation
     */
    DiscountService.prototype.removeRegion = function (discountId, regionId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount, exists, updated;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, this.retrieve(discountId, {
                                            relations: ["regions"],
                                        })];
                                case 1:
                                    discount = _a.sent();
                                    exists = discount.regions.find(function (r) { return r.id === regionId; });
                                    // If region is not present, we return early
                                    if (!exists) {
                                        return [2 /*return*/, discount];
                                    }
                                    discount.regions = discount.regions.filter(function (r) { return r.id !== regionId; });
                                    return [4 /*yield*/, discountRepo.save(discount)];
                                case 2:
                                    updated = _a.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Deletes a discount idempotently
     * @param {string} discountId - id of discount to delete
     * @return {Promise} the result of the delete operation
     */
    DiscountService.prototype.delete = function (discountId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var discountRepo, discount;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    discountRepo = manager.getCustomRepository(this.discountRepository_);
                                    return [4 /*yield*/, discountRepo.findOne({ where: { id: discountId } })];
                                case 1:
                                    discount = _a.sent();
                                    if (!discount) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, discountRepo.softRemove(discount)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Decorates a discount.
     * @param {string} discountId -  id of discount to decorate
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {Discount} return the decorated discount.
     */
    DiscountService.prototype.decorate = function (discountId, fields, expandFields) {
        if (fields === void 0) { fields = []; }
        if (expandFields === void 0) { expandFields = []; }
        return __awaiter(this, void 0, void 0, function () {
            var requiredFields, discount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requiredFields = ["id", "code", "is_dynamic", "metadata"];
                        fields = fields.concat(requiredFields);
                        return [4 /*yield*/, this.retrieve(discountId, {
                                select: fields,
                                relations: expandFields,
                            })
                            // const final = await this.runDecorators_(decorated)
                        ];
                    case 1:
                        discount = _a.sent();
                        // const final = await this.runDecorators_(decorated)
                        return [2 /*return*/, discount];
                }
            });
        });
    };
    return DiscountService;
}(medusa_interfaces_1.BaseService));
exports.default = DiscountService;
//# sourceMappingURL=discount.js.map