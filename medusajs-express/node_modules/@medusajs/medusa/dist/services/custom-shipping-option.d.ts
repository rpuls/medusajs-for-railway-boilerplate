export default CustomShippingOptionService;
declare const CustomShippingOptionService_base: any;
declare class CustomShippingOptionService extends CustomShippingOptionService_base {
    [x: string]: any;
    constructor({ manager, customShippingOptionRepository }: {
        manager: any;
        customShippingOptionRepository: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {CustomShippingOptionRepository} */
    private customShippingOptionRepository_;
    /**
     * Sets the service's manager to a given transaction manager
     * @param {EntityManager} manager - the manager to use
     * @return {CustomShippingOptionService} a cloned CustomShippingOption service
     */
    withTransaction(manager: EntityManager): CustomShippingOptionService;
    /**
     * Retrieves a specific shipping option.
     * @param {string} id - the id of the custom shipping option to retrieve.
     * @param {*} config - any options needed to query for the result.
     * @return {Promise<CustomShippingOption>} which resolves to the requested custom shipping option.
     */
    retrieve(id: string, config?: any): Promise<CustomShippingOption>;
    /** Fetches all custom shipping options related to the given selector
     * @param {Object} selector - the query object for find
     * @param {Object} config - the configuration used to find the objects. contains relations, skip, and take.
     * @return {Promise<CustomShippingOption[]>} custom shipping options matching the query
     */
    list(selector: any, config?: any): Promise<CustomShippingOption[]>;
    /**
     * Creates a custom shipping option associated with a given author
     * @param {object} data - the custom shipping option to create
     * @param {*} config - any configurations if needed, including meta data
     * @return {Promise<CustomShippingOption>} resolves to the creation result
     */
    create(data: object, config?: any): Promise<CustomShippingOption>;
}
