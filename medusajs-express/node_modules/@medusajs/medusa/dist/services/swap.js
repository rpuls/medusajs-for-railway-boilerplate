"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
/**
 * Handles swaps
 * @extends BaseService
 */
var SwapService = /** @class */ (function (_super) {
    __extends(SwapService, _super);
    function SwapService(_a) {
        var manager = _a.manager, swapRepository = _a.swapRepository, eventBusService = _a.eventBusService, cartService = _a.cartService, totalsService = _a.totalsService, returnService = _a.returnService, lineItemService = _a.lineItemService, paymentProviderService = _a.paymentProviderService, shippingOptionService = _a.shippingOptionService, fulfillmentService = _a.fulfillmentService, orderService = _a.orderService, inventoryService = _a.inventoryService, customShippingOptionService = _a.customShippingOptionService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {SwapModel} */
        _this.swapRepository_ = swapRepository;
        /** @private @const {TotalsService} */
        _this.totalsService_ = totalsService;
        /** @private @const {LineItemService} */
        _this.lineItemService_ = lineItemService;
        /** @private @const {ReturnService} */
        _this.returnService_ = returnService;
        /** @private @const {PaymentProviderService} */
        _this.paymentProviderService_ = paymentProviderService;
        /** @private @const {CartService} */
        _this.cartService_ = cartService;
        /** @private @const {FulfillmentService} */
        _this.fulfillmentService_ = fulfillmentService;
        /** @private @const {OrderService} */
        _this.orderService_ = orderService;
        /** @private @const {ShippingOptionService} */
        _this.shippingOptionService_ = shippingOptionService;
        /** @private @const {InventoryService} */
        _this.inventoryService_ = inventoryService;
        /** @private @const {EventBusService} */
        _this.eventBus_ = eventBusService;
        /** @private @const {CustomShippingOptionService} */
        _this.customShippingOptionService_ = customShippingOptionService;
        return _this;
    }
    SwapService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new SwapService({
            manager: transactionManager,
            swapRepository: this.swapRepository_,
            eventBusService: this.eventBus_,
            cartService: this.cartService_,
            totalsService: this.totalsService_,
            returnService: this.returnService_,
            lineItemService: this.lineItemService_,
            paymentProviderService: this.paymentProviderService_,
            shippingOptionService: this.shippingOptionService_,
            orderService: this.orderService_,
            inventoryService: this.inventoryService_,
            fulfillmentService: this.fulfillmentService_,
            customShippingOptionService: this.customShippingOptionService_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    SwapService.prototype.transformQueryForTotals_ = function (config) {
        var select = config.select, relations = config.relations;
        if (!select) {
            return __assign(__assign({}, config), { totalsToSelect: [] });
        }
        var totalFields = [
            "cart.subtotal",
            "cart.tax_total",
            "cart.shipping_total",
            "cart.discount_total",
            "cart.gift_card_total",
            "cart.total",
        ];
        var totalsToSelect = select.filter(function (v) { return totalFields.includes(v); });
        if (totalsToSelect.length > 0) {
            var relationSet = new Set(relations);
            relationSet.add("cart");
            relationSet.add("cart.items");
            relationSet.add("cart.gift_cards");
            relationSet.add("cart.discounts");
            relationSet.add("cart.discounts.rule");
            relationSet.add("cart.discounts.rule.valid_for");
            relationSet.add("cart.shipping_methods");
            relationSet.add("cart.region");
            relations = __spreadArray([], __read(relationSet), false);
            select = select.filter(function (v) { return !totalFields.includes(v); });
        }
        return __assign(__assign({}, config), { relations: relations, select: select, totalsToSelect: totalsToSelect });
    };
    SwapService.prototype.decorateTotals_ = function (cart, totalsFields) {
        if (totalsFields === void 0) { totalsFields = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!totalsFields.includes("cart.shipping_total")) return [3 /*break*/, 2];
                        _a = cart;
                        return [4 /*yield*/, this.totalsService_.getShippingTotal(cart)];
                    case 1:
                        _a.shipping_total = _g.sent();
                        _g.label = 2;
                    case 2:
                        if (!totalsFields.includes("cart.discount_total")) return [3 /*break*/, 4];
                        _b = cart;
                        return [4 /*yield*/, this.totalsService_.getDiscountTotal(cart)];
                    case 3:
                        _b.discount_total = _g.sent();
                        _g.label = 4;
                    case 4:
                        if (!totalsFields.includes("cart.tax_total")) return [3 /*break*/, 6];
                        _c = cart;
                        return [4 /*yield*/, this.totalsService_.getTaxTotal(cart)];
                    case 5:
                        _c.tax_total = _g.sent();
                        _g.label = 6;
                    case 6:
                        if (!totalsFields.includes("cart.gift_card_total")) return [3 /*break*/, 8];
                        _d = cart;
                        return [4 /*yield*/, this.totalsService_.getGiftCardTotal(cart)];
                    case 7:
                        _d.gift_card_total = _g.sent();
                        _g.label = 8;
                    case 8:
                        if (!totalsFields.includes("cart.subtotal")) return [3 /*break*/, 10];
                        _e = cart;
                        return [4 /*yield*/, this.totalsService_.getSubtotal(cart)];
                    case 9:
                        _e.subtotal = _g.sent();
                        _g.label = 10;
                    case 10:
                        if (!totalsFields.includes("cart.total")) return [3 /*break*/, 12];
                        _f = cart;
                        return [4 /*yield*/, this.totalsService_.getTotal(cart)];
                    case 11:
                        _f.total = _g.sent();
                        _g.label = 12;
                    case 12: return [2 /*return*/, cart];
                }
            });
        });
    };
    /**
     * Retrieves a swap with the given id.
     * @param {string} id - the id of the swap to retrieve
     * @param {Object} config - the configuration to retrieve the swap
     * @return {Promise<Swap>} the swap
     */
    SwapService.prototype.retrieve = function (id, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var swapRepo, validatedId, _a, totalsToSelect, newConfig, query, rels, swap, cart;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        swapRepo = this.manager_.getCustomRepository(this.swapRepository_);
                        validatedId = this.validateId_(id);
                        _a = this.transformQueryForTotals_(config), totalsToSelect = _a.totalsToSelect, newConfig = __rest(_a, ["totalsToSelect"]);
                        query = this.buildQuery_({ id: validatedId }, newConfig);
                        rels = query.relations;
                        delete query.relations;
                        return [4 /*yield*/, swapRepo.findOneWithRelations(rels, query)];
                    case 1:
                        swap = _b.sent();
                        if (!swap) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Swap was not found");
                        }
                        if (!(rels && rels.includes("cart"))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.decorateTotals_(swap.cart, totalsToSelect)];
                    case 2:
                        cart = _b.sent();
                        swap.cart = cart;
                        _b.label = 3;
                    case 3: return [2 /*return*/, swap];
                }
            });
        });
    };
    /**
     * Retrieves a swap based on its associated cart id
     * @param {string} cartId - the cart id that the swap's cart has
     * @param {string[]} relations - the relations to retrieve swap
     * @return {Promise<Swap>} the swap
     */
    SwapService.prototype.retrieveByCartId = function (cartId, relations) {
        if (relations === void 0) { relations = []; }
        return __awaiter(this, void 0, void 0, function () {
            var swapRepo, swap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        swapRepo = this.manager_.getCustomRepository(this.swapRepository_);
                        return [4 /*yield*/, swapRepo.findOne({
                                where: {
                                    cart_id: cartId,
                                },
                                relations: relations,
                            })];
                    case 1:
                        swap = _a.sent();
                        if (!swap) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Swap was not found");
                        }
                        return [2 /*return*/, swap];
                }
            });
        });
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the configuration used to find the objects. contains relations, skip, and take.
     * @return {Promise} the result of the find operation
     */
    SwapService.prototype.list = function (selector, config) {
        if (config === void 0) { config = { skip: 0, take: 50, order: { created_at: "DESC" } }; }
        var swapRepo = this.manager_.getCustomRepository(this.swapRepository_);
        var query = this.buildQuery_(selector, config);
        var rels = query.relations;
        delete query.relations;
        return swapRepo.findWithRelations(rels, query);
    };
    /**
     * @typedef OrderLike
     * @property {Array<LineItem>} items - the items on the order
     */
    /**
     * @typedef ReturnItem
     * @property {string} item_id - the id of the item in the order to return from.
     * @property {number} quantity - the amount of the item to return.
     */
    /**
     * Goes through a list of return items to ensure that they exist on the
     * original order. If the item exists it is verified that the quantity to
     * return is not higher than the original quantity ordered.
     * @param {OrderLike} order - the order to return from
     * @param {Array<ReturnItem>} returnItems - the items to return
     * @return {Array<ReturnItems>} the validated returnItems
     */
    SwapService.prototype.validateReturnItems_ = function (order, returnItems) {
        return returnItems.map(function (_a) {
            var item_id = _a.item_id, quantity = _a.quantity;
            var item = order.items.find(function (i) { return i.id === item_id; });
            // The item must exist in the order
            if (!item) {
                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Item does not exist on order");
            }
            // Item's cannot be returned multiple times
            if (item.quantity < item.returned_quantity + quantity) {
                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Cannot return more items than have been ordered");
            }
            return { item_id: item_id, quantity: quantity };
        });
    };
    /**
     * @typedef PreliminaryLineItem
     * @property {string} variant_id - the id of the variant to create an item from
     * @property {number} quantity - the amount of the variant to add to the line item
     */
    /**
     * Creates a swap from an order, with given return items, additional items
     * and an optional return shipping method.
     * @param {Order} order - the order to base the swap off.
     * @param {Array<ReturnItem>} returnItems - the items to return in the swap.
     * @param {Array<PreliminaryLineItem> | undefined} additionalItems - the items to send to
     *  the customer.
     * @param {ReturnShipping?} returnShipping - an optional shipping method for
     *  returning the returnItems.
     * @param {Object} custom - contains relevant custom information. This object may
     *  include no_notification which will disable sending notification when creating
     *  swap. If set, it overrules the attribute inherited from the order.
     * @return {Promise<Swap>} the newly created swap.
     */
    SwapService.prototype.create = function (order, returnItems, additionalItems, returnShipping, custom) {
        if (custom === void 0) { custom = {
            no_notification: undefined,
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var no_notification, rest;
            var _this = this;
            return __generator(this, function (_a) {
                no_notification = custom.no_notification, rest = __rest(custom, ["no_notification"]);
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var returnItems_1, returnItems_1_1, item, line, e_1_1, newItems, evaluatedNoNotification, swapRepo, created, result;
                        var e_1, _a;
                        var _this = this;
                        var _b, _c, _d;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0:
                                    if (order.fulfillment_status === "not_fulfilled" ||
                                        order.payment_status !== "captured") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Order cannot be swapped");
                                    }
                                    _e.label = 1;
                                case 1:
                                    _e.trys.push([1, 6, 7, 8]);
                                    returnItems_1 = __values(returnItems), returnItems_1_1 = returnItems_1.next();
                                    _e.label = 2;
                                case 2:
                                    if (!!returnItems_1_1.done) return [3 /*break*/, 5];
                                    item = returnItems_1_1.value;
                                    return [4 /*yield*/, this.lineItemService_.retrieve(item.item_id, {
                                            relations: ["order", "swap", "claim_order"],
                                        })];
                                case 3:
                                    line = _e.sent();
                                    if (((_b = line.order) === null || _b === void 0 ? void 0 : _b.canceled_at) ||
                                        ((_c = line.swap) === null || _c === void 0 ? void 0 : _c.canceled_at) ||
                                        ((_d = line.claim_order) === null || _d === void 0 ? void 0 : _d.canceled_at)) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Cannot create a swap on a canceled item.");
                                    }
                                    _e.label = 4;
                                case 4:
                                    returnItems_1_1 = returnItems_1.next();
                                    return [3 /*break*/, 2];
                                case 5: return [3 /*break*/, 8];
                                case 6:
                                    e_1_1 = _e.sent();
                                    e_1 = { error: e_1_1 };
                                    return [3 /*break*/, 8];
                                case 7:
                                    try {
                                        if (returnItems_1_1 && !returnItems_1_1.done && (_a = returnItems_1.return)) _a.call(returnItems_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                    return [7 /*endfinally*/];
                                case 8: return [4 /*yield*/, Promise.all(additionalItems.map(function (_a) {
                                        var variant_id = _a.variant_id, quantity = _a.quantity;
                                        return _this.lineItemService_.generate(variant_id, order.region_id, quantity);
                                    }))];
                                case 9:
                                    newItems = _e.sent();
                                    evaluatedNoNotification = no_notification !== undefined ? no_notification : order.no_notification;
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    created = swapRepo.create(__assign(__assign({}, rest), { fulfillment_status: "not_fulfilled", payment_status: "not_paid", order_id: order.id, additional_items: newItems, no_notification: evaluatedNoNotification }));
                                    return [4 /*yield*/, swapRepo.save(created)];
                                case 10:
                                    result = _e.sent();
                                    return [4 /*yield*/, this.returnService_.withTransaction(manager).create({
                                            swap_id: result.id,
                                            order_id: order.id,
                                            items: returnItems,
                                            shipping_method: returnShipping,
                                            no_notification: evaluatedNoNotification,
                                        })];
                                case 11:
                                    _e.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.CREATED, {
                                            id: result.id,
                                            no_notification: evaluatedNoNotification,
                                        })];
                                case 12:
                                    _e.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    SwapService.prototype.processDifference = function (swapId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, swapRepo, err_1, result_1, result_2, result_3, err_2, result_4, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: ["payment", "order", "order.payments"],
                                    })];
                                case 1:
                                    swap = _a.sent();
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be processed");
                                    }
                                    if (!swap.confirmed_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Cannot process a swap that hasn't been confirmed by the customer");
                                    }
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    if (!(swap.difference_due < 0)) return [3 /*break*/, 10];
                                    if (swap.payment_status === "difference_refunded") {
                                        return [2 /*return*/, swap];
                                    }
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 4, , 7]);
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .refundPayment(swap.order.payments, -1 * swap.difference_due, "swap")];
                                case 3:
                                    _a.sent();
                                    return [3 /*break*/, 7];
                                case 4:
                                    err_1 = _a.sent();
                                    swap.payment_status = "requires_action";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 5:
                                    result_1 = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.PROCESS_REFUND_FAILED, {
                                            id: result_1.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 6:
                                    _a.sent();
                                    return [2 /*return*/, result_1];
                                case 7:
                                    swap.payment_status = "difference_refunded";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 8:
                                    result_2 = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.REFUND_PROCESSED, {
                                            id: result_2.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 9:
                                    _a.sent();
                                    return [2 /*return*/, result_2];
                                case 10:
                                    if (!(swap.difference_due === 0)) return [3 /*break*/, 13];
                                    if (swap.payment_status === "difference_refunded") {
                                        return [2 /*return*/, swap];
                                    }
                                    swap.payment_status = "difference_refunded";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 11:
                                    result_3 = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.REFUND_PROCESSED, {
                                            id: result_3.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 12:
                                    _a.sent();
                                    return [2 /*return*/, result_3];
                                case 13:
                                    _a.trys.push([13, 15, , 18]);
                                    if (swap.payment_status === "captured") {
                                        return [2 /*return*/, swap];
                                    }
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .capturePayment(swap.payment)];
                                case 14:
                                    _a.sent();
                                    return [3 /*break*/, 18];
                                case 15:
                                    err_2 = _a.sent();
                                    swap.payment_status = "requires_action";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 16:
                                    result_4 = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.PAYMENT_CAPTURE_FAILED, {
                                            id: swap.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 17:
                                    _a.sent();
                                    return [2 /*return*/, result_4];
                                case 18:
                                    swap.payment_status = "captured";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 19:
                                    result = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.PAYMENT_CAPTURED, {
                                            id: result.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 20:
                                    _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    SwapService.prototype.update = function (swapId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, swapRepo, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId)];
                                case 1:
                                    swap = _a.sent();
                                    if ("metadata" in update) {
                                        swap.metadata = this.setMetadata_(swap, update.metadata);
                                    }
                                    if ("no_notification" in update) {
                                        swap.no_notification = update.no_notification;
                                    }
                                    if (!("shipping_address" in update)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.updateShippingAddress_(swap, update.shipping_address)];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 4:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Creates a cart from the given swap and order. The cart can be used to pay
     * for differences associated with the swap. The swap represented by the
     * swapId must belong to the order. Fails if there is already a cart on the
     * swap.
     * @param {string} swapId - the id of the swap to create the cart from
     * @param {object[]} customShippingOptions - the shipping options
     * @param {Order} order - the order to create the cart from
     * @return {Promise<Swap>} the swap with its cart_id prop set to the id of
     *   the new cart.
     */
    SwapService.prototype.createCart = function (swapId, customShippingOptions) {
        if (customShippingOptions === void 0) { customShippingOptions = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, order, discounts, cart, customShippingOptions_1, customShippingOptions_1_1, customShippingOption, e_2_1, _a, _b, item, e_3_1, _loop_1, this_1, _c, _d, r, e_4_1, swapRepo, result;
                        var e_2, _e, e_3, _f, e_4, _g;
                        var _h;
                        return __generator(this, function (_j) {
                            switch (_j.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: [
                                            "order",
                                            "order.items",
                                            "order.swaps",
                                            "order.swaps.additional_items",
                                            "order.discounts",
                                            "order.discounts.rule",
                                            "order.claims",
                                            "order.claims.additional_items",
                                            "additional_items",
                                            "return_order",
                                            "return_order.items",
                                            "return_order.shipping_method",
                                        ],
                                    })];
                                case 1:
                                    swap = _j.sent();
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be used to create a cart");
                                    }
                                    if (swap.cart_id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.DUPLICATE_ERROR, "A cart has already been created for the swap");
                                    }
                                    order = swap.order;
                                    discounts = ((_h = order === null || order === void 0 ? void 0 : order.discounts) === null || _h === void 0 ? void 0 : _h.filter(function (_a) {
                                        var rule = _a.rule;
                                        return rule.type !== "free_shipping";
                                    })) ||
                                        undefined;
                                    return [4 /*yield*/, this.cartService_.withTransaction(manager).create({
                                            discounts: discounts,
                                            email: order.email,
                                            billing_address_id: order.billing_address_id,
                                            shipping_address_id: order.shipping_address_id,
                                            region_id: order.region_id,
                                            customer_id: order.customer_id,
                                            type: "swap",
                                            metadata: {
                                                swap_id: swap.id,
                                                parent_order_id: order.id,
                                            },
                                        })];
                                case 2:
                                    cart = _j.sent();
                                    _j.label = 3;
                                case 3:
                                    _j.trys.push([3, 8, 9, 10]);
                                    customShippingOptions_1 = __values(customShippingOptions), customShippingOptions_1_1 = customShippingOptions_1.next();
                                    _j.label = 4;
                                case 4:
                                    if (!!customShippingOptions_1_1.done) return [3 /*break*/, 7];
                                    customShippingOption = customShippingOptions_1_1.value;
                                    return [4 /*yield*/, this.customShippingOptionService_
                                            .withTransaction(manager)
                                            .create({
                                            cart_id: cart.id,
                                            shipping_option_id: customShippingOption.option_id,
                                            price: customShippingOption.price,
                                        })];
                                case 5:
                                    _j.sent();
                                    _j.label = 6;
                                case 6:
                                    customShippingOptions_1_1 = customShippingOptions_1.next();
                                    return [3 /*break*/, 4];
                                case 7: return [3 /*break*/, 10];
                                case 8:
                                    e_2_1 = _j.sent();
                                    e_2 = { error: e_2_1 };
                                    return [3 /*break*/, 10];
                                case 9:
                                    try {
                                        if (customShippingOptions_1_1 && !customShippingOptions_1_1.done && (_e = customShippingOptions_1.return)) _e.call(customShippingOptions_1);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                    return [7 /*endfinally*/];
                                case 10:
                                    _j.trys.push([10, 15, 16, 17]);
                                    _a = __values(swap.additional_items), _b = _a.next();
                                    _j.label = 11;
                                case 11:
                                    if (!!_b.done) return [3 /*break*/, 14];
                                    item = _b.value;
                                    return [4 /*yield*/, this.lineItemService_.withTransaction(manager).update(item.id, {
                                            cart_id: cart.id,
                                        })];
                                case 12:
                                    _j.sent();
                                    _j.label = 13;
                                case 13:
                                    _b = _a.next();
                                    return [3 /*break*/, 11];
                                case 14: return [3 /*break*/, 17];
                                case 15:
                                    e_3_1 = _j.sent();
                                    e_3 = { error: e_3_1 };
                                    return [3 /*break*/, 17];
                                case 16:
                                    try {
                                        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                    return [7 /*endfinally*/];
                                case 17:
                                    if (!(swap.return_order && swap.return_order.shipping_method)) return [3 /*break*/, 19];
                                    return [4 /*yield*/, this.lineItemService_.withTransaction(manager).create({
                                            cart_id: cart.id,
                                            title: "Return shipping",
                                            quantity: 1,
                                            has_shipping: true,
                                            allow_discounts: false,
                                            unit_price: swap.return_order.shipping_method.price,
                                            metadata: {
                                                is_return_line: true,
                                            },
                                        })];
                                case 18:
                                    _j.sent();
                                    _j.label = 19;
                                case 19:
                                    _loop_1 = function (r) {
                                        var allItems, _k, _l, s, _m, _o, c, lineItem, toCreate;
                                        var e_5, _p, e_6, _q;
                                        return __generator(this, function (_r) {
                                            switch (_r.label) {
                                                case 0:
                                                    allItems = __spreadArray([], __read(order.items), false);
                                                    if (order.swaps && order.swaps.length) {
                                                        try {
                                                            for (_k = (e_5 = void 0, __values(order.swaps)), _l = _k.next(); !_l.done; _l = _k.next()) {
                                                                s = _l.value;
                                                                allItems = __spreadArray(__spreadArray([], __read(allItems), false), __read(s.additional_items), false);
                                                            }
                                                        }
                                                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                                        finally {
                                                            try {
                                                                if (_l && !_l.done && (_p = _k.return)) _p.call(_k);
                                                            }
                                                            finally { if (e_5) throw e_5.error; }
                                                        }
                                                    }
                                                    if (order.claims && order.claims.length) {
                                                        try {
                                                            for (_m = (e_6 = void 0, __values(order.claims)), _o = _m.next(); !_o.done; _o = _m.next()) {
                                                                c = _o.value;
                                                                allItems = __spreadArray(__spreadArray([], __read(allItems), false), __read(c.additional_items), false);
                                                            }
                                                        }
                                                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                                        finally {
                                                            try {
                                                                if (_o && !_o.done && (_q = _m.return)) _q.call(_m);
                                                            }
                                                            finally { if (e_6) throw e_6.error; }
                                                        }
                                                    }
                                                    lineItem = allItems.find(function (i) { return i.id === r.item_id; });
                                                    toCreate = {
                                                        cart_id: cart.id,
                                                        thumbnail: lineItem.thumbnail,
                                                        title: lineItem.title,
                                                        variant_id: lineItem.variant_id,
                                                        unit_price: -1 * lineItem.unit_price,
                                                        quantity: r.quantity,
                                                        allow_discounts: lineItem.allow_discounts,
                                                        metadata: __assign(__assign({}, lineItem.metadata), { is_return_line: true }),
                                                    };
                                                    return [4 /*yield*/, this_1.lineItemService_.withTransaction(manager).create(toCreate)];
                                                case 1:
                                                    _r.sent();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_1 = this;
                                    _j.label = 20;
                                case 20:
                                    _j.trys.push([20, 25, 26, 27]);
                                    _c = __values(swap.return_order.items), _d = _c.next();
                                    _j.label = 21;
                                case 21:
                                    if (!!_d.done) return [3 /*break*/, 24];
                                    r = _d.value;
                                    return [5 /*yield**/, _loop_1(r)];
                                case 22:
                                    _j.sent();
                                    _j.label = 23;
                                case 23:
                                    _d = _c.next();
                                    return [3 /*break*/, 21];
                                case 24: return [3 /*break*/, 27];
                                case 25:
                                    e_4_1 = _j.sent();
                                    e_4 = { error: e_4_1 };
                                    return [3 /*break*/, 27];
                                case 26:
                                    try {
                                        if (_d && !_d.done && (_g = _c.return)) _g.call(_c);
                                    }
                                    finally { if (e_4) throw e_4.error; }
                                    return [7 /*endfinally*/];
                                case 27:
                                    swap.cart_id = cart.id;
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 28:
                                    result = _j.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     *@param {string} swapId - The id of the swap
     */
    SwapService.prototype.registerCartCompletion = function (swapId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, cart, payment, items, items_1, items_1_1, item, err_3, e_7_1, total, paymentStatus, items_2, items_2_1, item, e_8_1, now, swapRepo, result, _a, _b, method, e_9_1;
                        var e_7, _c, e_8, _d, e_9, _e;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: [
                                            "cart",
                                            "cart.region",
                                            "cart.shipping_methods",
                                            "cart.shipping_address",
                                            "cart.items",
                                            "cart.discounts",
                                            "cart.discounts.rule",
                                            "cart.payment",
                                            "cart.gift_cards",
                                        ],
                                    })
                                    // If we already registered the cart completion we just return
                                ];
                                case 1:
                                    swap = _f.sent();
                                    // If we already registered the cart completion we just return
                                    if (swap.confirmed_at) {
                                        return [2 /*return*/, swap];
                                    }
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Cart related to canceled swap cannot be completed");
                                    }
                                    cart = swap.cart;
                                    payment = cart.payment;
                                    items = swap.cart.items;
                                    if (!!swap.allow_backorder) return [3 /*break*/, 14];
                                    _f.label = 2;
                                case 2:
                                    _f.trys.push([2, 12, 13, 14]);
                                    items_1 = __values(items), items_1_1 = items_1.next();
                                    _f.label = 3;
                                case 3:
                                    if (!!items_1_1.done) return [3 /*break*/, 11];
                                    item = items_1_1.value;
                                    _f.label = 4;
                                case 4:
                                    _f.trys.push([4, 6, , 10]);
                                    return [4 /*yield*/, this.inventoryService_
                                            .withTransaction(manager)
                                            .confirmInventory(item.variant_id, item.quantity)];
                                case 5:
                                    _f.sent();
                                    return [3 /*break*/, 10];
                                case 6:
                                    err_3 = _f.sent();
                                    if (!payment) return [3 /*break*/, 8];
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .cancelPayment(payment)];
                                case 7:
                                    _f.sent();
                                    _f.label = 8;
                                case 8: return [4 /*yield*/, this.cartService_
                                        .withTransaction(manager)
                                        .update(cart.id, { payment_authorized_at: null })];
                                case 9:
                                    _f.sent();
                                    throw err_3;
                                case 10:
                                    items_1_1 = items_1.next();
                                    return [3 /*break*/, 3];
                                case 11: return [3 /*break*/, 14];
                                case 12:
                                    e_7_1 = _f.sent();
                                    e_7 = { error: e_7_1 };
                                    return [3 /*break*/, 14];
                                case 13:
                                    try {
                                        if (items_1_1 && !items_1_1.done && (_c = items_1.return)) _c.call(items_1);
                                    }
                                    finally { if (e_7) throw e_7.error; }
                                    return [7 /*endfinally*/];
                                case 14: return [4 /*yield*/, this.totalsService_.getTotal(cart)];
                                case 15:
                                    total = _f.sent();
                                    if (!(total > 0)) return [3 /*break*/, 25];
                                    if (!payment) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Cart does not contain a payment");
                                    }
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .getStatus(payment)
                                        // If payment status is not authorized, we throw
                                    ];
                                case 16:
                                    paymentStatus = _f.sent();
                                    // If payment status is not authorized, we throw
                                    if (paymentStatus !== "authorized" && paymentStatus !== "succeeded") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Payment method is not authorized");
                                    }
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .updatePayment(payment.id, {
                                            swap_id: swapId,
                                            order_id: swap.order_id,
                                        })];
                                case 17:
                                    _f.sent();
                                    _f.label = 18;
                                case 18:
                                    _f.trys.push([18, 23, 24, 25]);
                                    items_2 = __values(items), items_2_1 = items_2.next();
                                    _f.label = 19;
                                case 19:
                                    if (!!items_2_1.done) return [3 /*break*/, 22];
                                    item = items_2_1.value;
                                    return [4 /*yield*/, this.inventoryService_
                                            .withTransaction(manager)
                                            .adjustInventory(item.variant_id, -item.quantity)];
                                case 20:
                                    _f.sent();
                                    _f.label = 21;
                                case 21:
                                    items_2_1 = items_2.next();
                                    return [3 /*break*/, 19];
                                case 22: return [3 /*break*/, 25];
                                case 23:
                                    e_8_1 = _f.sent();
                                    e_8 = { error: e_8_1 };
                                    return [3 /*break*/, 25];
                                case 24:
                                    try {
                                        if (items_2_1 && !items_2_1.done && (_d = items_2.return)) _d.call(items_2);
                                    }
                                    finally { if (e_8) throw e_8.error; }
                                    return [7 /*endfinally*/];
                                case 25:
                                    now = new Date();
                                    swap.difference_due = total;
                                    swap.shipping_address_id = cart.shipping_address_id;
                                    swap.shipping_methods = cart.shipping_methods;
                                    swap.confirmed_at = now.toISOString();
                                    swap.payment_status = total === 0 ? "confirmed" : "awaiting";
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 26:
                                    result = _f.sent();
                                    _f.label = 27;
                                case 27:
                                    _f.trys.push([27, 32, 33, 34]);
                                    _a = __values(cart.shipping_methods), _b = _a.next();
                                    _f.label = 28;
                                case 28:
                                    if (!!_b.done) return [3 /*break*/, 31];
                                    method = _b.value;
                                    return [4 /*yield*/, this.shippingOptionService_
                                            .withTransaction(manager)
                                            .updateShippingMethod(method.id, {
                                            swap_id: result.id,
                                        })];
                                case 29:
                                    _f.sent();
                                    _f.label = 30;
                                case 30:
                                    _b = _a.next();
                                    return [3 /*break*/, 28];
                                case 31: return [3 /*break*/, 34];
                                case 32:
                                    e_9_1 = _f.sent();
                                    e_9 = { error: e_9_1 };
                                    return [3 /*break*/, 34];
                                case 33:
                                    try {
                                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                                    }
                                    finally { if (e_9) throw e_9.error; }
                                    return [7 /*endfinally*/];
                                case 34:
                                    this.eventBus_
                                        .withTransaction(manager)
                                        .emit(SwapService.Events.PAYMENT_COMPLETED, {
                                        id: swap.id,
                                        no_notification: swap.no_notification,
                                    });
                                    return [4 /*yield*/, this.cartService_
                                            .withTransaction(manager)
                                            .update(cart.id, { completed_at: new Date() })];
                                case 35:
                                    _f.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Registers the return associated with a swap as received. If the return
     * is received with mismatching return items the swap's status will be updated
     * to requires_action.
     * @param {string} swapId - the id of the swap to receive.
     * @param {Array<ReturnItem>} returnItems - the return items that have been returned
     * @return {Promise<Swap>} the resulting swap, with an updated return and
     *   status.
     */
    SwapService.prototype.receiveReturn = function (swapId, returnItems) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, returnId, updatedRet, swapRepo, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, { relations: ["return_order"] })];
                                case 1:
                                    swap = _a.sent();
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be registered as received");
                                    }
                                    returnId = swap.return_order && swap.return_order.id;
                                    if (!returnId) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Swap has no return request");
                                    }
                                    return [4 /*yield*/, this.returnService_
                                            .withTransaction(manager)
                                            .receiveReturn(returnId, returnItems, undefined, false)];
                                case 2:
                                    updatedRet = _a.sent();
                                    if (!(updatedRet.status === "requires_action")) return [3 /*break*/, 4];
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    swap.fulfillment_status = "requires_action";
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 3:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                                case 4: return [2 /*return*/, this.retrieve(swapId)];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Cancels a given swap if possible. A swap can only be canceled if all
     * related returns, fulfillments, and payments have been canceled. If a swap
     * is associated with a refund, it cannot be canceled.
     * @param {string} swapId - the id of the swap to cancel.
     * @return {Promise<Swap>} the canceled swap.
     */
    SwapService.prototype.cancel = function (swapId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, _a, _b, f, swapRepo, result;
                        var e_10, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: ["payment", "fulfillments", "return_order"],
                                    })];
                                case 1:
                                    swap = _d.sent();
                                    if (swap.payment_status === "difference_refunded" ||
                                        swap.payment_status === "partially_refunded" ||
                                        swap.payment_status === "refunded") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Swap with a refund cannot be canceled");
                                    }
                                    if (swap.fulfillments) {
                                        try {
                                            for (_a = __values(swap.fulfillments), _b = _a.next(); !_b.done; _b = _a.next()) {
                                                f = _b.value;
                                                if (!f.canceled_at) {
                                                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "All fulfillments must be canceled before the swap can be canceled");
                                                }
                                            }
                                        }
                                        catch (e_10_1) { e_10 = { error: e_10_1 }; }
                                        finally {
                                            try {
                                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                            }
                                            finally { if (e_10) throw e_10.error; }
                                        }
                                    }
                                    if (swap.return_order && swap.return_order.status !== "canceled") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Return must be canceled before the swap can be canceled");
                                    }
                                    swap.payment_status = "canceled";
                                    swap.fulfillment_status = "canceled";
                                    swap.canceled_at = new Date();
                                    if (!swap.payment) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.paymentProviderService_
                                            .withTransaction(manager)
                                            .cancelPayment(swap.payment)];
                                case 2:
                                    _d.sent();
                                    _d.label = 3;
                                case 3:
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 4:
                                    result = _d.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Fulfills the addtional items associated with the swap. Will call the
     * fulfillment providers associated with the shipping methods.
     * @param {string} swapId - the id of the swap to fulfill,
     * @param {object} config - optional configurations, includes optional metadata to attach to the shipment, and a no_notification flag.
     * @return {Promise<Swap>} the updated swap with new status and fulfillments.
     */
    SwapService.prototype.createFulfillment = function (swapId, config) {
        if (config === void 0) { config = {
            metadata: {},
            no_notification: undefined,
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var metadata, no_notification;
            var _this = this;
            return __generator(this, function (_a) {
                metadata = config.metadata, no_notification = config.no_notification;
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, order, evaluatedNoNotification, _a, successfullyFulfilled, _b, _c, f, _loop_2, this_2, _d, _e, item, e_11_1, swapRepo, result;
                        var e_12, _f, e_11, _g;
                        var _h;
                        return __generator(this, function (_j) {
                            switch (_j.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: [
                                            "payment",
                                            "shipping_address",
                                            "additional_items",
                                            "shipping_methods",
                                            "order",
                                            "order.billing_address",
                                            "order.discounts",
                                            "order.discounts.rule",
                                            "order.payments",
                                        ],
                                    })];
                                case 1:
                                    swap = _j.sent();
                                    order = swap.order;
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be fulfilled");
                                    }
                                    if (swap.fulfillment_status !== "not_fulfilled" &&
                                        swap.fulfillment_status !== "canceled") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "The swap was already fulfilled");
                                    }
                                    if (!((_h = swap.shipping_methods) === null || _h === void 0 ? void 0 : _h.length)) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Cannot fulfill an swap that doesn't have shipping methods");
                                    }
                                    evaluatedNoNotification = no_notification !== undefined ? no_notification : swap.no_notification;
                                    _a = swap;
                                    return [4 /*yield*/, this.fulfillmentService_
                                            .withTransaction(manager)
                                            .createFulfillment(__assign(__assign({}, swap), { payments: swap.payment ? [swap.payment] : order.payments, email: order.email, discounts: order.discounts, currency_code: order.currency_code, tax_rate: order.tax_rate, region_id: order.region_id, display_id: order.display_id, billing_address: order.billing_address, items: swap.additional_items, shipping_methods: swap.shipping_methods, is_swap: true, no_notification: evaluatedNoNotification }), swap.additional_items.map(function (i) { return ({
                                            item_id: i.id,
                                            quantity: i.quantity,
                                        }); }), { swap_id: swapId, metadata: metadata })];
                                case 2:
                                    _a.fulfillments = _j.sent();
                                    successfullyFulfilled = [];
                                    try {
                                        for (_b = __values(swap.fulfillments), _c = _b.next(); !_c.done; _c = _b.next()) {
                                            f = _c.value;
                                            successfullyFulfilled = successfullyFulfilled.concat(f.items);
                                        }
                                    }
                                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                                    finally {
                                        try {
                                            if (_c && !_c.done && (_f = _b.return)) _f.call(_b);
                                        }
                                        finally { if (e_12) throw e_12.error; }
                                    }
                                    swap.fulfillment_status = "fulfilled";
                                    _loop_2 = function (item) {
                                        var fulfillmentItem, fulfilledQuantity;
                                        return __generator(this, function (_k) {
                                            switch (_k.label) {
                                                case 0:
                                                    fulfillmentItem = successfullyFulfilled.find(function (f) { return item.id === f.item_id; });
                                                    if (!fulfillmentItem) return [3 /*break*/, 2];
                                                    fulfilledQuantity = (item.fulfilled_quantity || 0) + fulfillmentItem.quantity;
                                                    // Update the fulfilled quantity
                                                    return [4 /*yield*/, this_2.lineItemService_.withTransaction(manager).update(item.id, {
                                                            fulfilled_quantity: fulfilledQuantity,
                                                        })];
                                                case 1:
                                                    // Update the fulfilled quantity
                                                    _k.sent();
                                                    if (item.quantity !== fulfilledQuantity) {
                                                        swap.fulfillment_status = "requires_action";
                                                    }
                                                    return [3 /*break*/, 3];
                                                case 2:
                                                    if (item.quantity !== item.fulfilled_quantity) {
                                                        swap.fulfillment_status = "requires_action";
                                                    }
                                                    _k.label = 3;
                                                case 3: return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_2 = this;
                                    _j.label = 3;
                                case 3:
                                    _j.trys.push([3, 8, 9, 10]);
                                    _d = __values(swap.additional_items), _e = _d.next();
                                    _j.label = 4;
                                case 4:
                                    if (!!_e.done) return [3 /*break*/, 7];
                                    item = _e.value;
                                    return [5 /*yield**/, _loop_2(item)];
                                case 5:
                                    _j.sent();
                                    _j.label = 6;
                                case 6:
                                    _e = _d.next();
                                    return [3 /*break*/, 4];
                                case 7: return [3 /*break*/, 10];
                                case 8:
                                    e_11_1 = _j.sent();
                                    e_11 = { error: e_11_1 };
                                    return [3 /*break*/, 10];
                                case 9:
                                    try {
                                        if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
                                    }
                                    finally { if (e_11) throw e_11.error; }
                                    return [7 /*endfinally*/];
                                case 10:
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 11:
                                    result = _j.sent();
                                    return [4 /*yield*/, this.eventBus_.withTransaction(manager).emit(SwapService.Events.FULFILLMENT_CREATED, {
                                            id: swapId,
                                            fulfillment_id: result.id,
                                            no_notification: evaluatedNoNotification,
                                        })];
                                case 12:
                                    _j.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Cancels a fulfillment (if related to a swap)
     * @param {string} fulfillmentId - the ID of the fulfillment to cancel
     * @return {Swap} updated swap
     */
    SwapService.prototype.cancelFulfillment = function (fulfillmentId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var canceled, swap, swapRepo, updated;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.fulfillmentService_
                                        .withTransaction(manager)
                                        .cancelFulfillment(fulfillmentId)];
                                case 1:
                                    canceled = _a.sent();
                                    if (!canceled.swap_id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Fufillment not related to a swap");
                                    }
                                    return [4 /*yield*/, this.retrieve(canceled.swap_id)];
                                case 2:
                                    swap = _a.sent();
                                    swap.fulfillment_status = "canceled";
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 3:
                                    updated = _a.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Marks a fulfillment as shipped and attaches tracking numbers.
     * @param {string} swapId - the id of the swap that has been shipped.
     * @param {string} fulfillmentId - the id of the specific fulfillment that
     *   has been shipped
     * @param {TrackingLink[] | undefined} trackingLinks - the tracking numbers associated
     *   with the shipment
     * @param {object} config - optional configurations, includes optional metadata to attach to the shipment, and a noNotification flag.
     * @return {Promise<Swap>} the updated swap with new fulfillments and status.
     */
    SwapService.prototype.createShipment = function (swapId, fulfillmentId, trackingLinks, config) {
        if (config === void 0) { config = {
            metadata: {},
            no_notification: undefined,
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var metadata, no_notification;
            var _this = this;
            return __generator(this, function (_a) {
                metadata = config.metadata, no_notification = config.no_notification;
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, evaluatedNoNotification, shipment, _loop_3, this_3, _a, _b, i, e_13_1, swapRepo, result;
                        var e_13, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0: return [4 /*yield*/, this.retrieve(swapId, {
                                        relations: ["additional_items"],
                                    })];
                                case 1:
                                    swap = _d.sent();
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be fulfilled as shipped");
                                    }
                                    evaluatedNoNotification = no_notification !== undefined ? no_notification : swap.no_notification;
                                    return [4 /*yield*/, this.fulfillmentService_
                                            .withTransaction(manager)
                                            .createShipment(fulfillmentId, trackingLinks, {
                                            metadata: metadata,
                                            no_notification: evaluatedNoNotification,
                                        })];
                                case 2:
                                    shipment = _d.sent();
                                    swap.fulfillment_status = "shipped";
                                    _loop_3 = function (i) {
                                        var shipped, shippedQty;
                                        return __generator(this, function (_e) {
                                            switch (_e.label) {
                                                case 0:
                                                    shipped = shipment.items.find(function (si) { return si.item_id === i.id; });
                                                    if (!shipped) return [3 /*break*/, 2];
                                                    shippedQty = (i.shipped_quantity || 0) + shipped.quantity;
                                                    return [4 /*yield*/, this_3.lineItemService_.withTransaction(manager).update(i.id, {
                                                            shipped_quantity: shippedQty,
                                                        })];
                                                case 1:
                                                    _e.sent();
                                                    if (shippedQty !== i.quantity) {
                                                        swap.fulfillment_status = "partially_shipped";
                                                    }
                                                    return [3 /*break*/, 3];
                                                case 2:
                                                    if (i.shipped_quantity !== i.quantity) {
                                                        swap.fulfillment_status = "partially_shipped";
                                                    }
                                                    _e.label = 3;
                                                case 3: return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_3 = this;
                                    _d.label = 3;
                                case 3:
                                    _d.trys.push([3, 8, 9, 10]);
                                    _a = __values(swap.additional_items), _b = _a.next();
                                    _d.label = 4;
                                case 4:
                                    if (!!_b.done) return [3 /*break*/, 7];
                                    i = _b.value;
                                    return [5 /*yield**/, _loop_3(i)];
                                case 5:
                                    _d.sent();
                                    _d.label = 6;
                                case 6:
                                    _b = _a.next();
                                    return [3 /*break*/, 4];
                                case 7: return [3 /*break*/, 10];
                                case 8:
                                    e_13_1 = _d.sent();
                                    e_13 = { error: e_13_1 };
                                    return [3 /*break*/, 10];
                                case 9:
                                    try {
                                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                    }
                                    finally { if (e_13) throw e_13.error; }
                                    return [7 /*endfinally*/];
                                case 10:
                                    swapRepo = manager.getCustomRepository(this.swapRepository_);
                                    return [4 /*yield*/, swapRepo.save(swap)];
                                case 11:
                                    result = _d.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.SHIPMENT_CREATED, {
                                            id: swapId,
                                            fulfillment_id: shipment.id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 12:
                                    _d.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Dedicated method to delete metadata for a swap.
     * @param {string} swapId - the order to delete metadata from.
     * @param {string} key - key for metadata field
     * @return {Promise} resolves to the updated result.
     */
    SwapService.prototype.deleteMetadata = function (swapId, key) {
        return __awaiter(this, void 0, void 0, function () {
            var validatedId, keyPath;
            var _a;
            return __generator(this, function (_b) {
                validatedId = this.validateId_(swapId);
                if (typeof key !== "string") {
                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Key type is invalid. Metadata keys must be strings");
                }
                keyPath = "metadata.".concat(key);
                return [2 /*return*/, this.swapModel_
                        .updateOne({ _id: validatedId }, { $unset: (_a = {}, _a[keyPath] = "", _a) })
                        .catch(function (err) {
                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.DB_ERROR, err.message);
                    })];
            });
        });
    };
    /**
     * Registers the swap return items as received so that they cannot be used
     * as a part of other swaps/returns.
     * @param {string} id - the id of the order with the swap.
     * @param {string} swapId - the id of the swap that has been received.
     * @return {Promise<Order>} the resulting order
     */
    SwapService.prototype.registerReceived = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var swap, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(id, {
                                        relations: ["return_order", "return_order.items"],
                                    })];
                                case 1:
                                    swap = _a.sent();
                                    if (swap.canceled_at) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Canceled swap cannot be registered as received");
                                    }
                                    if (swap.return_order.status !== "received") {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Swap is not received");
                                    }
                                    return [4 /*yield*/, this.retrieve(id)];
                                case 2:
                                    result = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(SwapService.Events.RECEIVED, {
                                            id: id,
                                            order_id: result.order_id,
                                            no_notification: swap.no_notification,
                                        })];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    SwapService.Events = {
        CREATED: "swap.created",
        RECEIVED: "swap.received",
        SHIPMENT_CREATED: "swap.shipment_created",
        PAYMENT_COMPLETED: "swap.payment_completed",
        PAYMENT_CAPTURED: "swap.payment_captured",
        PAYMENT_CAPTURE_FAILED: "swap.payment_capture_failed",
        PROCESS_REFUND_FAILED: "swap.process_refund_failed",
        REFUND_PROCESSED: "swap.refund_processed",
        FULFILLMENT_CREATED: "swap.fulfillment_created",
    };
    return SwapService;
}(medusa_interfaces_1.BaseService));
exports.default = SwapService;
//# sourceMappingURL=swap.js.map