"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var medusa_interfaces_1 = require("medusa-interfaces");
var typeorm_1 = require("typeorm");
/**
 * Provides layer to manipulate product variants.
 * @extends BaseService
 */
var ProductVariantService = /** @class */ (function (_super) {
    __extends(ProductVariantService, _super);
    function ProductVariantService(_a) {
        var manager = _a.manager, productVariantRepository = _a.productVariantRepository, productRepository = _a.productRepository, eventBusService = _a.eventBusService, regionService = _a.regionService, moneyAmountRepository = _a.moneyAmountRepository, productOptionValueRepository = _a.productOptionValueRepository;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {ProductVariantModel} */
        _this.productVariantRepository_ = productVariantRepository;
        /** @private @const {ProductModel} */
        _this.productRepository_ = productRepository;
        /** @private @const {EventBus} */
        _this.eventBus_ = eventBusService;
        /** @private @const {RegionService} */
        _this.regionService_ = regionService;
        _this.moneyAmountRepository_ = moneyAmountRepository;
        _this.productOptionValueRepository_ = productOptionValueRepository;
        return _this;
    }
    ProductVariantService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new ProductVariantService({
            manager: transactionManager,
            productVariantRepository: this.productVariantRepository_,
            productRepository: this.productRepository_,
            eventBusService: this.eventBus_,
            regionService: this.regionService_,
            moneyAmountRepository: this.moneyAmountRepository_,
            productOptionValueRepository: this.productOptionValueRepository_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Gets a product variant by id.
     * @param {string} variantId - the id of the product to get.
     * @param {FindConfig<ProductVariant>} config - query config object for variant retrieval.
     * @return {Promise<Product>} the product document.
     */
    ProductVariantService.prototype.retrieve = function (variantId, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var variantRepo, validatedId, query, variant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        variantRepo = this.manager_.getCustomRepository(this.productVariantRepository_);
                        validatedId = this.validateId_(variantId);
                        query = this.buildQuery_({ id: validatedId }, config);
                        return [4 /*yield*/, variantRepo.findOne(query)];
                    case 1:
                        variant = _a.sent();
                        if (!variant) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Variant with id: ".concat(variantId, " was not found"));
                        }
                        return [2 /*return*/, variant];
                }
            });
        });
    };
    /**
     * Gets a product variant by id.
     * @param {string} sku - The unique stock keeping unit used to identify the product variant.
     * @param {FindConfig<ProductVariant>} config - query config object for variant retrieval.
     * @return {Promise<Product>} the product document.
     */
    ProductVariantService.prototype.retrieveBySKU = function (sku, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var variantRepo, query, variant;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        variantRepo = this.manager_.getCustomRepository(this.productVariantRepository_);
                        query = this.buildQuery_({ sku: sku }, config);
                        return [4 /*yield*/, variantRepo.findOne(query)];
                    case 1:
                        variant = _a.sent();
                        if (!variant) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Variant with sku: ".concat(sku, " was not found"));
                        }
                        return [2 /*return*/, variant];
                }
            });
        });
    };
    /**
     * Creates an unpublished product variant. Will validate against parent product
     * to ensure that the variant can in fact be created.
     * @param {string} productOrProductId - the product the variant will be added to
     * @param {object} variant - the variant to create
     * @return {Promise} resolves to the creation result.
     */
    ProductVariantService.prototype.create = function (productOrProductId, variant) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var productRepo, variantRepo, prices, rest, product, variantExists, toCreate, productVariant, result, prices_1, prices_1_1, price, e_1_1;
                        var e_1, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    productRepo = manager.getCustomRepository(this.productRepository_);
                                    variantRepo = manager.getCustomRepository(this.productVariantRepository_);
                                    prices = variant.prices, rest = __rest(variant, ["prices"]);
                                    product = productOrProductId;
                                    if (!(typeof product === "string")) return [3 /*break*/, 2];
                                    return [4 /*yield*/, productRepo.findOne({
                                            where: { id: productOrProductId },
                                            relations: ["variants", "variants.options", "options"],
                                        })];
                                case 1:
                                    product = (_b.sent());
                                    return [3 /*break*/, 3];
                                case 2:
                                    if (!product.id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Product id missing");
                                    }
                                    _b.label = 3;
                                case 3:
                                    if (product.options.length !== variant.options.length) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Product options length does not match variant options length. Product has ".concat(product.options.length, " and variant has ").concat(variant.options.length, "."));
                                    }
                                    product.options.forEach(function (option) {
                                        if (!variant.options.find(function (vo) { return option.id === vo.option_id; })) {
                                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Variant options do not contain value for ".concat(option.title));
                                        }
                                    });
                                    variantExists = product.variants.find(function (v) {
                                        return v.options.every(function (option) {
                                            var variantOption = variant.options.find(function (o) { return option.option_id === o.option_id; });
                                            return option.value === (variantOption === null || variantOption === void 0 ? void 0 : variantOption.value);
                                        });
                                    });
                                    if (variantExists) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.DUPLICATE_ERROR, "Variant with title ".concat(variantExists.title, " with provided options already exists"));
                                    }
                                    if (!rest.variant_rank) {
                                        rest.variant_rank = product.variants.length;
                                    }
                                    toCreate = __assign(__assign({}, rest), { product_id: product.id });
                                    productVariant = variantRepo.create(toCreate);
                                    return [4 /*yield*/, variantRepo.save(productVariant)];
                                case 4:
                                    result = _b.sent();
                                    if (!prices) return [3 /*break*/, 14];
                                    _b.label = 5;
                                case 5:
                                    _b.trys.push([5, 12, 13, 14]);
                                    prices_1 = __values(prices), prices_1_1 = prices_1.next();
                                    _b.label = 6;
                                case 6:
                                    if (!!prices_1_1.done) return [3 /*break*/, 11];
                                    price = prices_1_1.value;
                                    if (!price.region_id) return [3 /*break*/, 8];
                                    return [4 /*yield*/, this.setRegionPrice(result.id, {
                                            amount: price.amount,
                                            region_id: price.region_id,
                                            sale_amount: price.sale_amount,
                                        })];
                                case 7:
                                    _b.sent();
                                    return [3 /*break*/, 10];
                                case 8: return [4 /*yield*/, this.setCurrencyPrice(result.id, price)];
                                case 9:
                                    _b.sent();
                                    _b.label = 10;
                                case 10:
                                    prices_1_1 = prices_1.next();
                                    return [3 /*break*/, 6];
                                case 11: return [3 /*break*/, 14];
                                case 12:
                                    e_1_1 = _b.sent();
                                    e_1 = { error: e_1_1 };
                                    return [3 /*break*/, 14];
                                case 13:
                                    try {
                                        if (prices_1_1 && !prices_1_1.done && (_a = prices_1.return)) _a.call(prices_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                    return [7 /*endfinally*/];
                                case 14: return [4 /*yield*/, this.eventBus_
                                        .withTransaction(manager)
                                        .emit(ProductVariantService.Events.CREATED, {
                                        id: result.id,
                                        product_id: result.product_id,
                                    })];
                                case 15:
                                    _b.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Updates a variant.
     * Price updates should use dedicated methods.
     * The function will throw, if price updates are attempted.
     * @param {string | ProductVariant} variantOrVariantId - variant or id of a variant.
     * @param {object} update - an object with the update values.
     * @return {Promise} resolves to the update result.
     */
    ProductVariantService.prototype.update = function (variantOrVariantId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var variantRepo, variant, prices, options, metadata, inventory_quantity, rest, prices_2, prices_2_1, price, e_2_1, options_1, options_1_1, option, e_3_1, _a, _b, _c, key, value, result;
                        var e_2, _d, e_3, _e, e_4, _f;
                        return __generator(this, function (_g) {
                            switch (_g.label) {
                                case 0:
                                    variantRepo = manager.getCustomRepository(this.productVariantRepository_);
                                    variant = variantOrVariantId;
                                    if (!(typeof variant === "string")) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.retrieve(variantOrVariantId)];
                                case 1:
                                    variant = _g.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    if (!variant.id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Variant id missing");
                                    }
                                    _g.label = 3;
                                case 3:
                                    prices = update.prices, options = update.options, metadata = update.metadata, inventory_quantity = update.inventory_quantity, rest = __rest(update, ["prices", "options", "metadata", "inventory_quantity"]);
                                    if (!prices) return [3 /*break*/, 13];
                                    _g.label = 4;
                                case 4:
                                    _g.trys.push([4, 11, 12, 13]);
                                    prices_2 = __values(prices), prices_2_1 = prices_2.next();
                                    _g.label = 5;
                                case 5:
                                    if (!!prices_2_1.done) return [3 /*break*/, 10];
                                    price = prices_2_1.value;
                                    if (!price.region_id) return [3 /*break*/, 7];
                                    return [4 /*yield*/, this.setRegionPrice(variant.id, {
                                            region_id: price.region_id,
                                            amount: price.amount,
                                            sale_amount: price.sale_amount || undefined,
                                        })];
                                case 6:
                                    _g.sent();
                                    return [3 /*break*/, 9];
                                case 7: return [4 /*yield*/, this.setCurrencyPrice(variant.id, price)];
                                case 8:
                                    _g.sent();
                                    _g.label = 9;
                                case 9:
                                    prices_2_1 = prices_2.next();
                                    return [3 /*break*/, 5];
                                case 10: return [3 /*break*/, 13];
                                case 11:
                                    e_2_1 = _g.sent();
                                    e_2 = { error: e_2_1 };
                                    return [3 /*break*/, 13];
                                case 12:
                                    try {
                                        if (prices_2_1 && !prices_2_1.done && (_d = prices_2.return)) _d.call(prices_2);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                    return [7 /*endfinally*/];
                                case 13:
                                    if (!options) return [3 /*break*/, 21];
                                    _g.label = 14;
                                case 14:
                                    _g.trys.push([14, 19, 20, 21]);
                                    options_1 = __values(options), options_1_1 = options_1.next();
                                    _g.label = 15;
                                case 15:
                                    if (!!options_1_1.done) return [3 /*break*/, 18];
                                    option = options_1_1.value;
                                    return [4 /*yield*/, this.updateOptionValue(variant.id, option.option_id, option.value)];
                                case 16:
                                    _g.sent();
                                    _g.label = 17;
                                case 17:
                                    options_1_1 = options_1.next();
                                    return [3 /*break*/, 15];
                                case 18: return [3 /*break*/, 21];
                                case 19:
                                    e_3_1 = _g.sent();
                                    e_3 = { error: e_3_1 };
                                    return [3 /*break*/, 21];
                                case 20:
                                    try {
                                        if (options_1_1 && !options_1_1.done && (_e = options_1.return)) _e.call(options_1);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                    return [7 /*endfinally*/];
                                case 21:
                                    if (metadata) {
                                        variant.metadata = this.setMetadata_(variant, metadata);
                                    }
                                    if (typeof inventory_quantity === "number") {
                                        variant.inventory_quantity = inventory_quantity;
                                    }
                                    try {
                                        for (_a = __values(Object.entries(rest)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                            _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                                            variant[key] = value;
                                        }
                                    }
                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                    finally {
                                        try {
                                            if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                                        }
                                        finally { if (e_4) throw e_4.error; }
                                    }
                                    return [4 /*yield*/, variantRepo.save(variant)];
                                case 22:
                                    result = _g.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(ProductVariantService.Events.UPDATED, {
                                            id: result.id,
                                            product_id: result.product_id,
                                            fields: Object.keys(update),
                                        })];
                                case 23:
                                    _g.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Sets the default price for the given currency.
     * @param {string} variantId - the id of the variant to set prices for
     * @param {ProductVariantPrice} price - the price for the variant
     * @return {Promise} the result of the update operation
     */
    ProductVariantService.prototype.setCurrencyPrice = function (variantId, price) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var moneyAmountRepo, moneyAmount;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    moneyAmountRepo = manager.getCustomRepository(this.moneyAmountRepository_);
                                    return [4 /*yield*/, moneyAmountRepo.findOne({
                                            where: {
                                                currency_code: (_a = price.currency_code) === null || _a === void 0 ? void 0 : _a.toLowerCase(),
                                                variant_id: variantId,
                                                region_id: (0, typeorm_1.IsNull)(),
                                            },
                                        })];
                                case 1:
                                    moneyAmount = _c.sent();
                                    if (!moneyAmount) {
                                        moneyAmount = moneyAmountRepo.create(__assign(__assign({}, price), { currency_code: (_b = price.currency_code) === null || _b === void 0 ? void 0 : _b.toLowerCase(), variant_id: variantId }));
                                    }
                                    else {
                                        moneyAmount.amount = price.amount;
                                        moneyAmount.sale_amount = price.sale_amount;
                                    }
                                    return [4 /*yield*/, moneyAmountRepo.save(moneyAmount)];
                                case 2: return [2 /*return*/, _c.sent()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Gets the price specific to a region. If no region specific money amount
     * exists the function will try to use a currency price. If no default
     * currency price exists the function will throw an error.
     * @param {string} variantId - the id of the variant to get price from
     * @param {string} regionId - the id of the region to get price for
     * @return {number} the price specific to the region
     */
    ProductVariantService.prototype.getRegionPrice = function (variantId, regionId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var moneyAmountRepo, region, moneyAmount;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    moneyAmountRepo = manager.getCustomRepository(this.moneyAmountRepository_);
                                    return [4 /*yield*/, this.regionService_
                                            .withTransaction(manager)
                                            .retrieve(regionId)
                                        // Find region price based on region id
                                    ];
                                case 1:
                                    region = _a.sent();
                                    return [4 /*yield*/, moneyAmountRepo.findOne({
                                            where: { region_id: regionId, variant_id: variantId },
                                        })
                                        // If no price could be find based on region id, we try to fetch
                                        // based on the region currency code
                                    ];
                                case 2:
                                    moneyAmount = _a.sent();
                                    if (!!moneyAmount) return [3 /*break*/, 4];
                                    return [4 /*yield*/, moneyAmountRepo.findOne({
                                            where: { variant_id: variantId, currency_code: region.currency_code },
                                        })];
                                case 3:
                                    moneyAmount = _a.sent();
                                    _a.label = 4;
                                case 4:
                                    // Still, if no price is found, we throw
                                    if (!moneyAmount) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "A price for region: ".concat(region.name, " could not be found"));
                                    }
                                    // Always return sale price, if present
                                    if (moneyAmount.sale_amount) {
                                        return [2 /*return*/, moneyAmount.sale_amount];
                                    }
                                    return [2 /*return*/, moneyAmount.amount];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Sets the price of a specific region
     * @param {string} variantId - the id of the variant to update
     * @param {string} price - the price for the variant.
     * @return {Promise} the result of the update operation
     */
    ProductVariantService.prototype.setRegionPrice = function (variantId, price) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var moneyAmountRepo, moneyAmount, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    moneyAmountRepo = manager.getCustomRepository(this.moneyAmountRepository_);
                                    return [4 /*yield*/, moneyAmountRepo.findOne({
                                            where: {
                                                variant_id: variantId,
                                                region_id: price.region_id,
                                            },
                                        })];
                                case 1:
                                    moneyAmount = _a.sent();
                                    if (!moneyAmount) {
                                        moneyAmount = moneyAmountRepo.create(__assign(__assign({}, price), { variant_id: variantId }));
                                    }
                                    else {
                                        moneyAmount.amount = price.amount;
                                        moneyAmount.sale_amount = price.sale_amount;
                                    }
                                    return [4 /*yield*/, moneyAmountRepo.save(moneyAmount)];
                                case 2:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Updates variant's option value.
     * Option value must be of type string or number.
     * @param {string} variantId - the variant to decorate.
     * @param {string} optionId - the option from product.
     * @param {string} optionValue - option value to add.
     * @return {Promise} the result of the update operation.
     */
    ProductVariantService.prototype.updateOptionValue = function (variantId, optionId, optionValue) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var productOptionValueRepo, productOptionValue;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    productOptionValueRepo = manager.getCustomRepository(this.productOptionValueRepository_);
                                    return [4 /*yield*/, productOptionValueRepo.findOne({
                                            where: { variant_id: variantId, option_id: optionId },
                                        })];
                                case 1:
                                    productOptionValue = _a.sent();
                                    if (!productOptionValue) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Product option value not found");
                                    }
                                    productOptionValue.value = optionValue;
                                    return [4 /*yield*/, productOptionValueRepo.save(productOptionValue)];
                                case 2: return [2 /*return*/, _a.sent()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Adds option value to a varaint.
     * Fails when product with variant does not exists or
     * if that product does not have an option with the given
     * option id. Fails if given variant is not found.
     * Option value must be of type string or number.
     * @param {string} variantId - the variant to decorate.
     * @param {string} optionId - the option from product.
     * @param {string} optionValue - option value to add.
     * @return {Promise} the result of the update operation.
     */
    ProductVariantService.prototype.addOptionValue = function (variantId, optionId, optionValue) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var productOptionValueRepo, productOptionValue;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    productOptionValueRepo = manager.getCustomRepository(this.productOptionValueRepository_);
                                    productOptionValue = productOptionValueRepo.create({
                                        variant_id: variantId,
                                        option_id: optionId,
                                        value: optionValue,
                                    });
                                    return [4 /*yield*/, productOptionValueRepo.save(productOptionValue)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Deletes option value from given variant.
     * Will never fail due to delete being idempotent.
     * @param {string} variantId - the variant to decorate.
     * @param {string} optionId - the option from product.
     * @return {Promise} empty promise
     */
    ProductVariantService.prototype.deleteOptionValue = function (variantId, optionId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var productOptionValueRepo, productOptionValue;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    productOptionValueRepo = manager.getCustomRepository(this.productOptionValueRepository_);
                                    return [4 /*yield*/, productOptionValueRepo.findOne({
                                            where: {
                                                variant_id: variantId,
                                                option_id: optionId,
                                            },
                                        })];
                                case 1:
                                    productOptionValue = _a.sent();
                                    if (!productOptionValue) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, productOptionValueRepo.softRemove(productOptionValue)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * @param {FilterableProductVariantProps} selector - the query object for find
     * @param {FindConfig<ProductVariant>} config - query config object for variant retrieval
     * @return {Promise} the result of the find operation
     */
    ProductVariantService.prototype.list = function (selector, config) {
        if (config === void 0) { config = { relations: [], skip: 0, take: 20 }; }
        return __awaiter(this, void 0, void 0, function () {
            var productVariantRepo, q, query, where_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        productVariantRepo = this.manager_.getCustomRepository(this.productVariantRepository_);
                        if ("q" in selector) {
                            q = selector.q;
                            delete selector.q;
                        }
                        query = this.buildQuery_(selector, config);
                        if (q) {
                            where_1 = query.where;
                            delete where_1.sku;
                            delete where_1.title;
                            query.join = {
                                alias: "variant",
                                innerJoin: {
                                    product: "variant.product",
                                },
                            };
                            query.where = function (qb) {
                                qb.where(where_1).andWhere([
                                    { sku: (0, typeorm_1.ILike)("%".concat(q, "%")) },
                                    { title: (0, typeorm_1.ILike)("%".concat(q, "%")) },
                                    { product: { title: (0, typeorm_1.ILike)("%".concat(q, "%")) } },
                                ]);
                            };
                        }
                        return [4 /*yield*/, productVariantRepo.find(query)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Deletes variant.
     * Will never fail due to delete being idempotent.
     * @param {string} variantId - the id of the variant to delete. Must be
     *   castable as an ObjectId
     * @return {Promise<void>} empty promise
     */
    ProductVariantService.prototype.delete = function (variantId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var variantRepo, variant;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    variantRepo = manager.getCustomRepository(this.productVariantRepository_);
                                    return [4 /*yield*/, variantRepo.findOne({ where: { id: variantId } })];
                                case 1:
                                    variant = _a.sent();
                                    if (!variant) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, variantRepo.softRemove(variant)];
                                case 2:
                                    _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(ProductVariantService.Events.DELETED, {
                                            id: variant.id,
                                            product_id: variant.product_id,
                                            metadata: variant.metadata,
                                        })];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Dedicated method to set metadata for a variant.
     * @param {string} variant - the variant to set metadata for.
     * @param {Object} metadata - the metadata to set
     * @return {Object} updated metadata object
     */
    ProductVariantService.prototype.setMetadata_ = function (variant, metadata) {
        var e_5, _a;
        var existing = variant.metadata || {};
        var newData = {};
        try {
            for (var _b = __values(Object.entries(metadata)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                if (typeof key !== "string") {
                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Key type is invalid. Metadata keys must be strings");
                }
                newData[key] = value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        var updated = __assign(__assign({}, existing), newData);
        return updated;
    };
    ProductVariantService.Events = {
        UPDATED: "product-variant.updated",
        CREATED: "product-variant.created",
        DELETED: "product-variant.deleted",
    };
    return ProductVariantService;
}(medusa_interfaces_1.BaseService));
exports.default = ProductVariantService;
//# sourceMappingURL=product-variant.js.map