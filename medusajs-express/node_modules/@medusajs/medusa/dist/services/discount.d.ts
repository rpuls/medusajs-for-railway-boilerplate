/// <reference path="../../index.d.ts" />
export default DiscountService;
declare const DiscountService_base: any;
/**
 * Provides layer to manipulate discounts.
 * @implements {BaseService}
 */
declare class DiscountService extends DiscountService_base implements BaseService {
    [x: string]: any;
    constructor({ manager, discountRepository, discountRuleRepository, giftCardRepository, totalsService, productService, regionService, eventBusService, }: {
        manager: any;
        discountRepository: any;
        discountRuleRepository: any;
        giftCardRepository: any;
        totalsService: any;
        productService: any;
        regionService: any;
        eventBusService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {DiscountRepository} */
    private discountRepository_;
    /** @private @const {DiscountRuleRepository} */
    private discountRuleRepository_;
    /** @private @const {GiftCardRepository} */
    private giftCardRepository_;
    /** @private @const {TotalsService} */
    private totalsService_;
    /** @private @const {ProductService} */
    private productService_;
    /** @private @const {RegionService} */
    private regionService_;
    /** @private @const {EventBus} */
    private eventBus_;
    withTransaction(transactionManager: any): DiscountService;
    /**
     * Creates a discount rule with provided data given that the data is validated.
     * @param {DiscountRule} discountRule - the discount rule to create
     * @return {Promise} the result of the create operation
     */
    validateDiscountRule_(discountRule: DiscountRule): Promise<any>;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object containing query settings
     * @return {Promise} the result of the find operation
     */
    list(selector?: any, config?: any): Promise<any>;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object containing query settings
     * @return {Promise} the result of the find operation
     */
    listAndCount(selector?: any, config?: any): Promise<any>;
    /**
     * Creates a discount with provided data given that the data is validated.
     * Normalizes discount code to uppercase.
     * @param {Discount} discount - the discount data to create
     * @return {Promise} the result of the create operation
     */
    create(discount: Discount): Promise<any>;
    /**
     * Gets a discount by id.
     * @param {string} discountId - id of discount to retrieve
     * @param {Object} config - the config object containing query settings
     * @return {Promise<Discount>} the discount
     */
    retrieve(discountId: string, config?: any): Promise<Discount>;
    /**
     * Gets a discount by discount code.
     * @param {string} discountCode - discount code of discount to retrieve
     * @param {array} relations - list of relations
     * @return {Promise<Discount>} the discount document
     */
    retrieveByCode(discountCode: string, relations?: any[]): Promise<Discount>;
    /**
     * Updates a discount.
     * @param {string} discountId - discount id of discount to update
     * @param {Discount} update - the data to update the discount with
     * @return {Promise} the result of the update operation
     */
    update(discountId: string, update: Discount): Promise<any>;
    /**
     * Creates a dynamic code for a discount id.
     * @param {string} discountId - the id of the discount to create a code for
     * @param {Object} data - the object containing a code to identify the discount by
     * @return {Promise} the newly created dynamic code
     */
    createDynamicCode(discountId: string, data: any): Promise<any>;
    /**
     * Deletes a dynamic code for a discount id.
     * @param {string} discountId - the id of the discount to create a code for
     * @param {string} code - the code to identify the discount by
     * @return {Promise} the newly created dynamic code
     */
    deleteDynamicCode(discountId: string, code: string): Promise<any>;
    /**
     * Adds a valid product to the discount rule valid_for array.
     * @param {string} discountId - id of discount
     * @param {string} productId - id of product to add
     * @return {Promise} the result of the update operation
     */
    addValidProduct(discountId: string, productId: string): Promise<any>;
    /**
     * Removes a product from the discount rule valid_for array
     * @param {string} discountId - id of discount
     * @param {string} productId - id of product to add
     * @return {Promise} the result of the update operation
     */
    removeValidProduct(discountId: string, productId: string): Promise<any>;
    /**
     * Adds a region to the discount regions array.
     * @param {string} discountId - id of discount
     * @param {string} regionId - id of region to add
     * @return {Promise} the result of the update operation
     */
    addRegion(discountId: string, regionId: string): Promise<any>;
    /**
     * Removes a region from the discount regions array.
     * @param {string} discountId - id of discount
     * @param {string} regionId - id of region to remove
     * @return {Promise} the result of the update operation
     */
    removeRegion(discountId: string, regionId: string): Promise<any>;
    /**
     * Deletes a discount idempotently
     * @param {string} discountId - id of discount to delete
     * @return {Promise} the result of the delete operation
     */
    delete(discountId: string): Promise<any>;
    /**
     * Decorates a discount.
     * @param {string} discountId -  id of discount to decorate
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {Discount} return the decorated discount.
     */
    decorate(discountId: string, fields?: string[], expandFields?: string[]): Discount;
}
import { BaseService } from "medusa-interfaces";
