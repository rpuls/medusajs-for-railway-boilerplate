"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
/**
 * A service that calculates total and subtotals for orders, carts etc..
 * @implements {BaseService}
 */
var TotalsService = /** @class */ (function (_super) {
    __extends(TotalsService, _super);
    function TotalsService() {
        return _super.call(this) || this;
    }
    /**
     * Calculates subtotal of a given cart or order.
     * @param {object} object - object to calculate total for
     * @return {int} the calculated subtotal
     */
    TotalsService.prototype.getTotal = function (object) {
        var subtotal = this.getSubtotal(object);
        var taxTotal = this.getTaxTotal(object);
        var discountTotal = this.getDiscountTotal(object);
        var giftCardTotal = this.getGiftCardTotal(object);
        var shippingTotal = this.getShippingTotal(object);
        return subtotal + taxTotal + shippingTotal - discountTotal - giftCardTotal;
    };
    TotalsService.prototype.getPaidTotal = function (order) {
        var _a;
        var total = (_a = order.payments) === null || _a === void 0 ? void 0 : _a.reduce(function (acc, next) {
            acc += next.amount;
            return acc;
        }, 0);
        return total;
    };
    TotalsService.prototype.getSwapTotal = function (order) {
        var e_1, _a;
        var swapTotal = 0;
        if (order.swaps && order.swaps.length) {
            try {
                for (var _b = __values(order.swaps), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var s = _c.value;
                    swapTotal = swapTotal + s.difference_due;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return swapTotal;
    };
    /**
     * Calculates subtotal of a given cart or order.
     * @param {(Cart|Order)} object - cart or order to calculate subtotal for
     * @param {Object} opts - options
     * @return {int} the calculated subtotal
     */
    TotalsService.prototype.getSubtotal = function (object, opts) {
        if (opts === void 0) { opts = {}; }
        var subtotal = 0;
        if (!object.items) {
            return subtotal;
        }
        object.items.map(function (item) {
            if (opts.excludeNonDiscounts) {
                if (item.allow_discounts) {
                    subtotal += item.unit_price * item.quantity;
                }
            }
            else {
                subtotal += item.unit_price * item.quantity;
            }
        });
        return this.rounded(subtotal);
    };
    /**
     * Calculates shipping total
     * @param {Cart | Object} object - cart or order to calculate subtotal for
     * @return {int} shipping total
     */
    TotalsService.prototype.getShippingTotal = function (object) {
        var shipping_methods = object.shipping_methods;
        return shipping_methods.reduce(function (acc, next) {
            return acc + next.price;
        }, 0);
    };
    /**
     * Calculates tax total
     * Currently based on the Danish tax system
     * @param {Cart | Object} object - cart or order to calculate subtotal for
     * @return {int} tax total
     */
    TotalsService.prototype.getTaxTotal = function (object) {
        var subtotal = this.getSubtotal(object);
        var shippingTotal = this.getShippingTotal(object);
        var discountTotal = this.getDiscountTotal(object);
        var giftCardTotal = this.getGiftCardTotal(object);
        var tax_rate = typeof object.tax_rate !== "undefined"
            ? object.tax_rate
            : object.region.tax_rate;
        return this.rounded((subtotal - discountTotal - giftCardTotal + shippingTotal) *
            (tax_rate / 100));
    };
    TotalsService.prototype.getRefundedTotal = function (object) {
        if (!object.refunds) {
            return 0;
        }
        var total = object.refunds.reduce(function (acc, next) { return acc + next.amount; }, 0);
        return this.rounded(total);
    };
    TotalsService.prototype.getLineItemRefund = function (object, lineItem) {
        var discounts = object.discounts;
        var tax_rate = typeof object.tax_rate !== "undefined"
            ? object.tax_rate
            : object.region.tax_rate;
        var taxRate = (tax_rate || 0) / 100;
        var discount = discounts.find(function (_a) {
            var rule = _a.rule;
            return rule.type !== "free_shipping";
        });
        if (!discount || !lineItem.allow_discounts) {
            return lineItem.unit_price * lineItem.quantity * (1 + taxRate);
        }
        var lineDiscounts = this.getLineDiscounts(object, discount);
        var discountedLine = lineDiscounts.find(function (line) { return line.item.id === lineItem.id; });
        var discountAmount = (discountedLine.amount / discountedLine.item.quantity) * lineItem.quantity;
        return this.rounded((lineItem.unit_price * lineItem.quantity - discountAmount) * (1 + taxRate));
    };
    /**
     * Calculates refund total of line items.
     * If any of the items to return have been discounted, we need to
     * apply the discount again before refunding them.
     * @param {Order} order - cart or order to calculate subtotal for
     * @param {[LineItem]} lineItems -
     * @return {int} the calculated subtotal
     */
    TotalsService.prototype.getRefundTotal = function (order, lineItems) {
        var e_2, _a, e_3, _b;
        var _this = this;
        var itemIds = order.items.map(function (i) { return i.id; });
        // in case we swap a swap, we need to include swap items
        if (order.swaps && order.swaps.length) {
            try {
                for (var _c = __values(order.swaps), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var s = _d.value;
                    var swapItemIds = s.additional_items.map(function (el) { return el.id; });
                    itemIds = __spreadArray(__spreadArray([], __read(itemIds), false), __read(swapItemIds), false);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (order.claims && order.claims.length) {
            try {
                for (var _e = __values(order.claims), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var c = _f.value;
                    var claimItemIds = c.additional_items.map(function (el) { return el.id; });
                    itemIds = __spreadArray(__spreadArray([], __read(itemIds), false), __read(claimItemIds), false);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        var refunds = lineItems.map(function (i) {
            if (!itemIds.includes(i.id)) {
                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Line item does not exist on order");
            }
            return _this.getLineItemRefund(order, i);
        });
        return this.rounded(refunds.reduce(function (acc, next) { return acc + next; }, 0));
    };
    /**
     * Calculates either fixed or percentage discount of a variant
     * @param {string} lineItem - id of line item
     * @param {string} variant - id of variant in line item
     * @param {int} variantPrice - price of the variant based on region
     * @param {int} value - discount value
     * @param {string} discountType - the type of discount (fixed or percentage)
     * @return {{ string, string, int }} triples of lineitem, variant and
     *    applied discount
     */
    TotalsService.prototype.calculateDiscount_ = function (lineItem, variant, variantPrice, value, discountType) {
        if (!lineItem.allow_discounts) {
            return {
                lineItem: lineItem,
                variant: variant,
                amount: 0,
            };
        }
        if (discountType === "percentage") {
            return {
                lineItem: lineItem,
                variant: variant,
                amount: ((variantPrice * lineItem.quantity) / 100) * value,
            };
        }
        else {
            return {
                lineItem: lineItem,
                variant: variant,
                amount: value >= variantPrice * lineItem.quantity
                    ? variantPrice * lineItem.quantity
                    : value * lineItem.quantity,
            };
        }
    };
    /**
     * If the rule of a discount has allocation="item", then we need
     * to calculate discount on each item in the cart. Furthermore, we need to
     * make sure to only apply the discount on valid variants. And finally we
     * return ether an array of percentages discounts or fixed discounts
     * alongside the variant on which the discount was applied.
     * @param {Discount} discount - the discount to which we do the calculation
     * @param {Cart} cart - the cart to calculate discounts for
     * @return {[{ string, string, int }]} array of triples of lineitem, variant
     *    and applied discount
     */
    TotalsService.prototype.getAllocationItemDiscounts = function (discount, cart) {
        var e_4, _a;
        var _this = this;
        var _b;
        var discounts = [];
        var _loop_1 = function (item) {
            if (((_b = discount.rule.valid_for) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                discount.rule.valid_for.map(function (_a) {
                    var id = _a.id;
                    if (item.variant.product_id === id) {
                        discounts.push(_this.calculateDiscount_(item, item.variant.id, item.unit_price, discount.rule.value, discount.rule.type));
                    }
                });
            }
        };
        try {
            for (var _c = __values(cart.items), _d = _c.next(); !_d.done; _d = _c.next()) {
                var item = _d.value;
                _loop_1(item);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return discounts;
    };
    TotalsService.prototype.getLineDiscounts = function (cart, discount) {
        var e_5, _a, e_6, _b;
        var subtotal = this.getSubtotal(cart, { excludeNonDiscounts: true });
        var merged = __spreadArray([], __read(cart.items), false);
        // merge items from order with items from order swaps
        if (cart.swaps && cart.swaps.length) {
            try {
                for (var _c = __values(cart.swaps), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var s = _d.value;
                    merged = __spreadArray(__spreadArray([], __read(merged), false), __read(s.additional_items), false);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (cart.claims && cart.claims.length) {
            try {
                for (var _e = __values(cart.claims), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var c = _f.value;
                    merged = __spreadArray(__spreadArray([], __read(merged), false), __read(c.additional_items), false);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        var _g = discount.rule, type = _g.type, allocation = _g.allocation, value = _g.value;
        if (allocation === "total") {
            var percentage_1 = 0;
            if (type === "percentage") {
                percentage_1 = value / 100;
            }
            else if (type === "fixed") {
                // If the fixed discount exceeds the subtotal we should
                // calculate a 100% discount
                var nominator = Math.min(value, subtotal);
                percentage_1 = nominator / subtotal;
            }
            return merged.map(function (item) {
                var lineTotal = item.unit_price * item.quantity;
                return {
                    item: item,
                    amount: lineTotal * percentage_1,
                };
            });
        }
        else if (allocation === "item") {
            var allocationDiscounts_1 = this.getAllocationItemDiscounts(discount, cart, type);
            return merged.map(function (item) {
                var discounted = allocationDiscounts_1.find(function (a) { return a.lineItem.id === item.id; });
                return {
                    item: item,
                    amount: discounted ? discounted.amount : 0,
                };
            });
        }
        return merged.map(function (i) { return ({ item: i, amount: 0 }); });
    };
    TotalsService.prototype.getGiftCardTotal = function (cart) {
        var giftCardable = this.getSubtotal(cart) - this.getDiscountTotal(cart);
        if (cart.gift_card_transactions) {
            return cart.gift_card_transactions.reduce(function (acc, next) { return acc + next.amount; }, 0);
        }
        if (!cart.gift_cards || !cart.gift_cards.length) {
            return 0;
        }
        var toReturn = cart.gift_cards.reduce(function (acc, next) { return acc + next.balance; }, 0);
        return Math.min(giftCardable, toReturn);
    };
    /**
     * Calculates the total discount amount for each of the different supported
     * discount types. If discounts aren't present or invalid returns 0.
     * @param {Cart} cart - the cart to calculate discounts for
     * @return {int} the total discounts amount
     */
    TotalsService.prototype.getDiscountTotal = function (cart) {
        var subtotal = this.getSubtotal(cart, { excludeNonDiscounts: true });
        if (!cart.discounts || !cart.discounts.length) {
            return 0;
        }
        // we only support having free shipping and one other discount, so first
        // find the discount, which is not free shipping.
        var discount = cart.discounts.find(function (_a) {
            var rule = _a.rule;
            return rule.type !== "free_shipping";
        });
        if (!discount) {
            return 0;
        }
        var _a = discount.rule, type = _a.type, allocation = _a.allocation, value = _a.value;
        var toReturn = 0;
        if (type === "percentage" && allocation === "total") {
            toReturn = (subtotal / 100) * value;
        }
        else if (type === "percentage" && allocation === "item") {
            var itemPercentageDiscounts = this.getAllocationItemDiscounts(discount, cart, "percentage");
            toReturn = lodash_1.default.sumBy(itemPercentageDiscounts, function (d) { return d.amount; });
        }
        else if (type === "fixed" && allocation === "total") {
            toReturn = value;
        }
        else if (type === "fixed" && allocation === "item") {
            var itemFixedDiscounts = this.getAllocationItemDiscounts(discount, cart, "fixed");
            toReturn = lodash_1.default.sumBy(itemFixedDiscounts, function (d) { return d.amount; });
        }
        if (subtotal < 0) {
            return this.rounded(Math.max(subtotal, toReturn));
        }
        return this.rounded(Math.min(subtotal, toReturn));
    };
    TotalsService.prototype.rounded = function (value) {
        return Math.round(value);
    };
    return TotalsService;
}(medusa_interfaces_1.BaseService));
exports.default = TotalsService;
//# sourceMappingURL=totals.js.map