/// <reference path="../../index.d.ts" />
export default ShippingProfileService;
declare const ShippingProfileService_base: any;
/**
 * Provides layer to manipulate profiles.
 * @class
 * @implements {BaseService}
 */
declare class ShippingProfileService extends ShippingProfileService_base implements BaseService {
    [x: string]: any;
    constructor({ manager, shippingProfileRepository, productService, productRepository, shippingOptionService, customShippingOptionService, }: {
        manager: any;
        shippingProfileRepository: any;
        productService: any;
        productRepository: any;
        shippingOptionService: any;
        customShippingOptionService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {ShippingProfileRepository} */
    private shippingProfileRepository_;
    /** @private @const {ProductService} */
    private productService_;
    /** @private @const {ProductReppsitory} */
    private productRepository_;
    /** @private @const {ShippingOptionService} */
    private shippingOptionService_;
    /** @private @const {CustomShippingOptionService} */
    private customShippingOptionService_;
    withTransaction(transactionManager: any): ShippingProfileService;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object for find
     * @return {Promise} the result of the find operation
     */
    list(selector?: any, config?: any): Promise<any>;
    fetchOptionsByProductIds(productIds: any, filter: any): Promise<any[]>;
    /**
     * Gets a profile by id.
     * Throws in case of DB Error and if profile was not found.
     * @param {string} profileId - the id of the profile to get.
     * @param {Object} options - options opf the query.
     * @return {Promise<Product>} the profile document.
     */
    retrieve(profileId: string, options?: any): Promise<Product>;
    retrieveDefault(): Promise<any>;
    /**
     * Creates a default shipping profile, if this does not already exist.
     * @return {Promise<ShippingProfile>} the shipping profile
     */
    createDefault(): Promise<ShippingProfile>;
    /**
     * Retrieves the default gift card profile
     * @return {Object} the shipping profile for gift cards
     */
    retrieveGiftCardDefault(): any;
    /**
     * Creates a default shipping profile, for gift cards if unless it already
     * exists.
     * @return {Promise<ShippingProfile>} the shipping profile
     */
    createGiftCardDefault(): Promise<ShippingProfile>;
    /**
     * Creates a new shipping profile.
     * @param {ShippingProfile} profile - the shipping profile to create from
     * @return {Promise} the result of the create operation
     */
    create(profile: ShippingProfile): Promise<any>;
    /**
     * Updates a profile. Metadata updates and product updates should use
     * dedicated methods, e.g. `setMetadata`, `addProduct`, etc. The function
     * will throw errors if metadata or product updates are attempted.
     * @param {string} profileId - the id of the profile. Must be a string that
     *   can be casted to an ObjectId
     * @param {object} update - an object with the update values.
     * @return {Promise} resolves to the update result.
     */
    update(profileId: string, update: object): Promise<any>;
    /**
     * Deletes a profile with a given profile id.
     * @param {string} profileId - the id of the profile to delete. Must be
     *   castable as an ObjectId
     * @return {Promise} the result of the delete operation.
     */
    delete(profileId: string): Promise<any>;
    /**
     * Adds a product to a profile. The method is idempotent, so multiple calls
     * with the same product variant will have the same result.
     * @param {string} profileId - the profile to add the product to.
     * @param {string} productId - the product to add.
     * @return {Promise} the result of update
     */
    addProduct(profileId: string, productId: string): Promise<any>;
    /**
     * Adds a shipping option to the profile. The shipping option can be used to
     * fulfill the products in the products field.
     * @param {string} profileId - the profile to apply the shipping option to
     * @param {string} optionId - the option to add to the profile
     * @return {Promise} the result of the model update operation
     */
    addShippingOption(profileId: string, optionId: string): Promise<any>;
    /**
     * Decorates a profile.
     * @param {Profile} profile - the profile to decorate.
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {Profile} return the decorated profile.
     */
    decorate(profile: Profile, fields: string[], expandFields?: string[]): Profile;
    /**
     * Returns a list of all the productIds in the cart.
     * @param {Cart} cart - the cart to extract products from
     * @return {[string]} a list of product ids
     */
    getProfilesInCart_(cart: Cart): [string];
    /**
     * Finds all the shipping profiles that cover the products in a cart, and
     * validates all options that are available for the cart.
     * @param {Cart} cart - the cart object to find shipping options for
     * @return {[ShippingOption]} a list of the available shipping options
     */
    fetchCartOptions(cart: Cart): [ShippingOption];
}
import { BaseService } from "medusa-interfaces";
