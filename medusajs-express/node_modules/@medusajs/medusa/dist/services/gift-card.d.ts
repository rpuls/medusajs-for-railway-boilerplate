export default GiftCardService;
declare const GiftCardService_base: any;
/**
 * Provides layer to manipulate gift cards.
 * @extends BaseService
 */
declare class GiftCardService extends GiftCardService_base {
    [x: string]: any;
    static Events: {
        CREATED: string;
    };
    constructor({ manager, giftCardRepository, giftCardTransactionRepository, regionService, eventBusService, }: {
        manager: any;
        giftCardRepository: any;
        giftCardTransactionRepository: any;
        regionService: any;
        eventBusService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {GiftCardRepository} */
    private giftCardRepository_;
    /** @private @const {GiftCardRepository} */
    private giftCardTransactionRepo_;
    /** @private @const {RegionService} */
    private regionService_;
    /** @private @const {EventBus} */
    private eventBus_;
    withTransaction(transactionManager: any): GiftCardService;
    /**
     * Generates a 16 character gift card code
     * @return {string} the generated gift card code
     */
    generateCode_(): string;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the configuration used to find the objects. contains relations, skip, and take.
     * @return {Promise} the result of the find operation
     */
    list(selector?: any, config?: any): Promise<any>;
    createTransaction(data: any): Promise<any>;
    /**
     * Creates a gift card with provided data given that the data is validated.
     * @param {GiftCard} giftCard - the gift card data to create
     * @return {Promise<GiftCard>} the result of the create operation
     */
    create(giftCard: GiftCard): Promise<GiftCard>;
    /**
     * Gets a gift card by id.
     * @param {string} giftCardId - id of gift card to retrieve
     * @param {object} config - optional values to include with gift card query
     * @return {Promise<GiftCard>} the gift card
     */
    retrieve(giftCardId: string, config?: object): Promise<GiftCard>;
    retrieveByCode(code: any, config?: {}): Promise<any>;
    /**
     * Updates a giftCard.
     * @param {string} giftCardId - giftCard id of giftCard to update
     * @param {GiftCard} update - the data to update the giftCard with
     * @return {Promise} the result of the update operation
     */
    update(giftCardId: string, update: GiftCard): Promise<any>;
    /**
     * Deletes a gift card idempotently
     * @param {string} giftCardId - id of gift card to delete
     * @return {Promise} the result of the delete operation
     */
    delete(giftCardId: string): Promise<any>;
}
