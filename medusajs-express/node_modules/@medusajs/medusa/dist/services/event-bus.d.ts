export default EventBusService;
/**
 * Can keep track of multiple subscribers to different events and run the
 * subscribers when events happen. Events will run asynchronously.
 * @class
 */
declare class EventBusService {
    constructor({ manager, logger, stagedJobRepository, redisClient, redisSubscriber }: {
        manager: any;
        logger: any;
        stagedJobRepository: any;
        redisClient: any;
        redisSubscriber: any;
    }, config: any, singleton?: boolean);
    config_: any;
    /** @private {EntityManager} */
    private manager_;
    /** @private {logger} */
    private logger_;
    stagedJobRepository_: any;
    /** @private {object} */
    private observers_;
    /** @private {BullQueue} */
    private queue_;
    /** @private {object} to handle cron jobs */
    private cronHandlers_;
    redisClient_: any;
    redisSubscriber_: any;
    /** @private {BullQueue} used for cron jobs */
    private cronQueue_;
    withTransaction(transactionManager: any): EventBusService;
    /**
     * Adds a function to a list of event subscribers.
     * @param {string} event - the event that the subscriber will listen for.
     * @param {func} subscriber - the function to be called when a certain event
     * happens. Subscribers must return a Promise.
     */
    subscribe(event: string, subscriber: func): void;
    /**
     * Adds a function to a list of event subscribers.
     * @param {string} event - the event that the subscriber will listen for.
     * @param {func} subscriber - the function to be called when a certain event
     * happens. Subscribers must return a Promise.
     */
    unsubscribe(event: string, subscriber: func): void;
    /**
     * Adds a function to a list of event subscribers.
     * @param {string} event - the event that the subscriber will listen for.
     * @param {func} subscriber - the function to be called when a certain event
     * happens. Subscribers must return a Promise.
     */
    registerCronHandler_(event: string, subscriber: func): void;
    /**
     * Calls all subscribers when an event occurs.
     * @param {string} eventName - the name of the event to be process.
     * @param {?any} data - the data to send to the subscriber.
     * @param {?any} options - options to add the job with
     * @return {BullJob} - the job from our queue
     */
    emit(eventName: string, data: any | null, options?: any | null): BullJob;
    sleep(ms: any): Promise<any>;
    startEnqueuer(): Promise<void>;
    enRun_: boolean | undefined;
    enqueue_: Promise<void> | undefined;
    stopEnqueuer(): Promise<void>;
    enqueuer_(): Promise<void>;
    /**
     * Handles incoming jobs.
     * @param {Object} job The job object
     * @return {Promise} resolves to the results of the subscriber calls.
     */
    worker_: (job: any) => Promise<any>;
    /**
     * Handles incoming jobs.
     * @param {Object} job The job object
     * @return {Promise} resolves to the results of the subscriber calls.
     */
    cronWorker_: (job: any) => Promise<any>;
    /**
     * Registers a cron job.
     * @param {string} eventName - the name of the event
     * @param {object} data - the data to be sent with the event
     * @param {string} cron - the cron pattern
     * @param {function} handler - the handler to call on each cron job
     * @return {void}
     */
    createCronJob(eventName: string, data: object, cron: string, handler: Function): void;
}
