/// <reference path="../../index.d.ts" />
export default TotalsService;
declare const TotalsService_base: any;
/**
 * A service that calculates total and subtotals for orders, carts etc..
 * @implements {BaseService}
 */
declare class TotalsService extends TotalsService_base implements BaseService {
    [x: string]: any;
    /**
     * Calculates subtotal of a given cart or order.
     * @param {object} object - object to calculate total for
     * @return {int} the calculated subtotal
     */
    getTotal(object: object): int;
    getPaidTotal(order: any): any;
    getSwapTotal(order: any): number;
    /**
     * Calculates subtotal of a given cart or order.
     * @param {(Cart|Order)} object - cart or order to calculate subtotal for
     * @param {Object} opts - options
     * @return {int} the calculated subtotal
     */
    getSubtotal(object: (Cart | Order), opts?: any): int;
    /**
     * Calculates shipping total
     * @param {Cart | Object} object - cart or order to calculate subtotal for
     * @return {int} shipping total
     */
    getShippingTotal(object: Cart | any): int;
    /**
     * Calculates tax total
     * Currently based on the Danish tax system
     * @param {Cart | Object} object - cart or order to calculate subtotal for
     * @return {int} tax total
     */
    getTaxTotal(object: Cart | any): int;
    getRefundedTotal(object: any): number;
    getLineItemRefund(object: any, lineItem: any): number;
    /**
     * Calculates refund total of line items.
     * If any of the items to return have been discounted, we need to
     * apply the discount again before refunding them.
     * @param {Order} order - cart or order to calculate subtotal for
     * @param {[LineItem]} lineItems -
     * @return {int} the calculated subtotal
     */
    getRefundTotal(order: Order, lineItems: [LineItem]): int;
    /**
     * Calculates either fixed or percentage discount of a variant
     * @param {string} lineItem - id of line item
     * @param {string} variant - id of variant in line item
     * @param {int} variantPrice - price of the variant based on region
     * @param {int} value - discount value
     * @param {string} discountType - the type of discount (fixed or percentage)
     * @return {{ string, string, int }} triples of lineitem, variant and
     *    applied discount
     */
    calculateDiscount_(lineItem: string, variant: string, variantPrice: int, value: int, discountType: string): {
        string;
        string;
        int;
    };
    /**
     * If the rule of a discount has allocation="item", then we need
     * to calculate discount on each item in the cart. Furthermore, we need to
     * make sure to only apply the discount on valid variants. And finally we
     * return ether an array of percentages discounts or fixed discounts
     * alongside the variant on which the discount was applied.
     * @param {Discount} discount - the discount to which we do the calculation
     * @param {Cart} cart - the cart to calculate discounts for
     * @return {[{ string, string, int }]} array of triples of lineitem, variant
     *    and applied discount
     */
    getAllocationItemDiscounts(discount: Discount, cart: Cart): [{
        string;
        string;
        int;
    }];
    getLineDiscounts(cart: any, discount: any): {
        item: any;
        amount: any;
    }[];
    getGiftCardTotal(cart: any): any;
    /**
     * Calculates the total discount amount for each of the different supported
     * discount types. If discounts aren't present or invalid returns 0.
     * @param {Cart} cart - the cart to calculate discounts for
     * @return {int} the total discounts amount
     */
    getDiscountTotal(cart: Cart): int;
    rounded(value: any): number;
}
import { BaseService } from "medusa-interfaces";
