export default InventoryService;
declare const InventoryService_base: any;
declare class InventoryService extends InventoryService_base {
    [x: string]: any;
    constructor({ manager, productVariantService }: {
        manager: any;
        productVariantService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {ProductVariantRepository_} */
    private productVariantService_;
    withTransaction(transactionManager: any): InventoryService;
    /**
     * Updates the inventory of a variant based on a given adjustment.
     * @param {string} variantId - the id of the variant to update
     * @param {number} adjustment - the number to adjust the inventory quantity by
     * @return {Promise} resolves to the update result.
     */
    adjustInventory(variantId: string, adjustment: number): Promise<any>;
    /**
     * Checks if the inventory of a variant can cover a given quantity. Will
     * return true if the variant doesn't have managed inventory or if the variant
     * allows backorders or if the inventory quantity is greater than `quantity`.
     * @param {string} variantId - the id of the variant to check
     * @param {number} quantity - the number of units to check availability for
     * @return {Promise<boolean>} true if the inventory covers the quantity
     */
    confirmInventory(variantId: string, quantity: number): Promise<boolean>;
}
