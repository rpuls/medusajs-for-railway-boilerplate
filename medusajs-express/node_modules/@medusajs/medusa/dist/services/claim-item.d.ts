export default ClaimItemService;
declare const ClaimItemService_base: any;
declare class ClaimItemService extends ClaimItemService_base {
    [x: string]: any;
    static Events: {
        CREATED: string;
        UPDATED: string;
        CANCELED: string;
    };
    constructor({ manager, claimItemRepository, claimTagRepository, claimImageRepository, lineItemService, eventBusService, }: {
        manager: any;
        claimItemRepository: any;
        claimTagRepository: any;
        claimImageRepository: any;
        lineItemService: any;
        eventBusService: any;
    });
    /** @private @constant {EntityManager} */
    private manager_;
    /** @private @constant {ClaimRepository} */
    private claimItemRepository_;
    claimTagRepository_: any;
    claimImageRepository_: any;
    /** @private @constant {LineItemService} */
    private lineItemService_;
    /** @private @constant {EventBus} */
    private eventBus_;
    withTransaction(manager: any): ClaimItemService;
    create(data: any): any;
    update(id: any, data: any): any;
    cancel(id: any): Promise<void>;
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config object for find
     * @return {Promise} the result of the find operation
     */
    list(selector: any, config?: any): Promise<any>;
    /**
     * Gets a claim item by id.
     * @param {string} id - id of ClaimItem to retrieve
     * @param {Object} config - configuration for the find operation
     * @return {Promise<Order>} the ClaimItem
     */
    retrieve(id: string, config?: any): Promise<Order>;
    /**
     * Dedicated method to delete metadata for an order.
     * @param {string} orderId - the order to delete metadata from.
     * @param {string} key - key for metadata field
     * @return {Promise} resolves to the updated result.
     */
    deleteMetadata(orderId: string, key: string): Promise<any>;
}
