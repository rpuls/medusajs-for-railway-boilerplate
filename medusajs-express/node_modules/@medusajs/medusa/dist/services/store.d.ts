export default StoreService;
declare const StoreService_base: any;
/**
 * Provides layer to manipulate store settings.
 * @extends BaseService
 */
declare class StoreService extends StoreService_base {
    [x: string]: any;
    constructor({ manager, storeRepository, currencyRepository, eventBusService, }: {
        manager: any;
        storeRepository: any;
        currencyRepository: any;
        eventBusService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {StoreRepository} */
    private storeRepository_;
    /** @private @const {CurrencyRepository} */
    private currencyRepository_;
    /** @private @const {EventBus} */
    private eventBus_;
    withTransaction(transactionManager: any): StoreService;
    /**
     * Creates a store if it doesn't already exist.
     * @return {Promise<Store>} the store.
     */
    create(): Promise<Store>;
    /**
     * Retrieve the store settings. There is always a maximum of one store.
     * @param {string[]} relations - relations to fetch with store
     * @return {Promise<Store>} the store
     */
    retrieve(relations?: string[]): Promise<Store>;
    getDefaultCurrency_(code: any): {
        code: any;
        symbol: any;
        symbol_native: any;
        name: any;
    };
    /**
     * Updates a store
     * @param {object} update - an object with the update values.
     * @return {Promise} resolves to the update result.
     */
    update(update: object): Promise<any>;
    /**
     * Add a currency to the store
     * @param {string} code - 3 character ISO currency code
     * @return {Promise} result after update
     */
    addCurrency(code: string): Promise<any>;
    /**
     * Removes a currency from the store
     * @param {string} code - 3 character ISO currency code
     * @return {Promise} result after update
     */
    removeCurrency(code: string): Promise<any>;
    /**
     * Decorates a store object.
     * @param {Store} store - the store to decorate.
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {Store} return the decorated Store.
     */
    decorate(store: Store, fields: string[], expandFields?: string[]): Store;
}
