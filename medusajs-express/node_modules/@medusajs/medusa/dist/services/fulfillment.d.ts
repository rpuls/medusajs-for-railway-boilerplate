export default FulfillmentService;
declare const FulfillmentService_base: any;
/**
 * Handles Fulfillments
 * @extends BaseService
 */
declare class FulfillmentService extends FulfillmentService_base {
    [x: string]: any;
    constructor({ manager, totalsService, fulfillmentRepository, trackingLinkRepository, shippingProfileService, lineItemService, fulfillmentProviderService, }: {
        manager: any;
        totalsService: any;
        fulfillmentRepository: any;
        trackingLinkRepository: any;
        shippingProfileService: any;
        lineItemService: any;
        fulfillmentProviderService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {TotalsService} */
    private totalsService_;
    /** @private @const {FulfillmentRepository} */
    private fulfillmentRepository_;
    /** @private @const {TrackingLinkRepository} */
    private trackingLinkRepository_;
    /** @private @const {ShippingProfileService} */
    private shippingProfileService_;
    /** @private @const {LineItemService} */
    private lineItemService_;
    /** @private @const {FulfillmentProviderService} */
    private fulfillmentProviderService_;
    withTransaction(transactionManager: any): FulfillmentService;
    partitionItems_(shippingMethods: any, items: any): {
        shipping_method: any;
    }[];
    /**
     * Retrieves the order line items, given an array of items.
     * @param {Order} order - the order to get line items from
     * @param {{ item_id: string, quantity: number }} items - the items to get
     * @param {function} transformer - a function to apply to each of the items
     *    retrieved from the order, should return a line item. If the transformer
     *    returns an undefined value the line item will be filtered from the
     *    returned array.
     * @return {Promise<Array<LineItem>>} the line items generated by the transformer.
     */
    getFulfillmentItems_(order: Order, items: {
        item_id: string;
        quantity: number;
    }, transformer: Function): Promise<Array<LineItem>>;
    /**
     * Checks that a given quantity of a line item can be fulfilled. Fails if the
     * fulfillable quantity is lower than the requested fulfillment quantity.
     * Fulfillable quantity is calculated by subtracting the already fulfilled
     * quantity from the quantity that was originally purchased.
     * @param {LineItem} item - the line item to check has sufficient fulfillable
     *   quantity.
     * @param {number} quantity - the quantity that is requested to be fulfilled.
     * @return {LineItem} a line item that has the requested fulfillment quantity
     *   set.
     */
    validateFulfillmentLineItem_(item: LineItem, quantity: number): LineItem;
    /**
     * Retrieves a fulfillment by its id.
     * @param {string} id - the id of the fulfillment to retrieve
     * @param {object} config - optional values to include with fulfillmentRepository query
     * @return {Fulfillment} the fulfillment
     */
    retrieve(id: string, config?: object): Fulfillment;
    /**
     * Creates an order fulfillment
     * If items needs to be fulfilled by different provider, we make
     * sure to partition those items, and create fulfillment for
     * those partitions.
     * @param {Order} order - order to create fulfillment for
     * @param {{ item_id: string, quantity: number}[]} itemsToFulfill - the items in the order to fulfill
     * @param {object} custom - potential custom values to add
     * @return {Fulfillment[]} the created fulfillments
     */
    createFulfillment(order: Order, itemsToFulfill: {
        item_id: string;
        quantity: number;
    }[], custom?: object): Fulfillment[];
    /**
     * Cancels a fulfillment with the fulfillment provider. Will decrement the
     * fulfillment_quantity on the line items associated with the fulfillment.
     * Throws if the fulfillment has already been shipped.
     * @param {Fulfillment|string} fulfillmentOrId - the fulfillment object or id.
     * @return {Promise} the result of the save operation
     *
     */
    cancelFulfillment(fulfillmentOrId: Fulfillment | string): Promise<any>;
    /**
     * Creates a shipment by marking a fulfillment as shipped. Adds
     * tracking links and potentially more metadata.
     * @param {Order} fulfillmentId - the fulfillment to ship
     * @param {TrackingLink[]} trackingLinks - tracking links for the shipment
     * @param {object} config - potential configuration settings, such as no_notification and metadata
     * @return {Fulfillment} the shipped fulfillment
     */
    createShipment(fulfillmentId: Order, trackingLinks: TrackingLink[], config?: object): Fulfillment;
}
