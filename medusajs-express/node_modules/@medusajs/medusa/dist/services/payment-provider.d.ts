export default PaymentProviderService;
declare const PaymentProviderService_base: any;
/**
 * Helps retrive payment providers
 */
declare class PaymentProviderService extends PaymentProviderService_base {
    [x: string]: any;
    constructor(container: any);
    /** @private {logger} */
    private container_;
    manager_: any;
    paymentSessionRepository_: any;
    paymentRepository_: any;
    refundRepository_: any;
    withTransaction(manager: any): PaymentProviderService;
    registerInstalledProviders(providers: any): Promise<void>;
    list(): Promise<any>;
    retrievePayment(id: any, relations?: any[]): Promise<any>;
    listPayments(selector: any, config?: {
        skip: number;
        take: number;
        order: {
            created_at: string;
        };
    }): any;
    retrieveSession(id: any, relations?: any[]): Promise<any>;
    /**
     * Creates a payment session with the given provider.
     * @param {string} providerId - the id of the provider to create payment with
     * @param {Cart} cart - a cart object used to calculate the amount, etc. from
     * @return {Promise} the payment session
     */
    createSession(providerId: string, cart: Cart): Promise<any>;
    /**
     * Refreshes a payment session with the given provider.
     * This means, that we delete the current one and create a new.
     * @param {PaymentSession} paymentSession - the payment session object to
     *    update
     * @param {Cart} cart - a cart object used to calculate the amount, etc. from
     * @return {Promise} the payment session
     */
    refreshSession(paymentSession: PaymentSession, cart: Cart): Promise<any>;
    /**
     * Updates an existing payment session.
     * @param {PaymentSession} paymentSession - the payment session object to
     *    update
     * @param {Cart} cart - the cart object to update for
     * @return {Promise} the updated payment session
     */
    updateSession(paymentSession: PaymentSession, cart: Cart): Promise<any>;
    deleteSession(paymentSession: any): any;
    /**
     * Finds a provider given an id
     * @param {string} providerId - the id of the provider to get
     * @return {PaymentService} the payment provider
     */
    retrieveProvider(providerId: string): PaymentService;
    createPayment(cart: any): Promise<any>;
    updatePayment(paymentId: any, update: any): Promise<any>;
    authorizePayment(paymentSession: any, context: any): Promise<any>;
    updateSessionData(paySession: any, update: any): Promise<any>;
    cancelPayment(paymentObj: any): Promise<any>;
    getStatus(payment: any): Promise<any>;
    capturePayment(paymentObj: any): Promise<any>;
    refundPayment(payObjs: any, amount: any, reason: any, note: any): Promise<any>;
    retrieveRefund(id: any, config?: {}): Promise<any>;
}
