"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var medusa_interfaces_1 = require("medusa-interfaces");
/**
 * Provides layer to manipulate profiles.
 * @extends BaseService
 */
var ShippingOptionService = /** @class */ (function (_super) {
    __extends(ShippingOptionService, _super);
    function ShippingOptionService(_a) {
        var manager = _a.manager, shippingOptionRepository = _a.shippingOptionRepository, shippingOptionRequirementRepository = _a.shippingOptionRequirementRepository, shippingMethodRepository = _a.shippingMethodRepository, fulfillmentProviderService = _a.fulfillmentProviderService, regionService = _a.regionService, totalsService = _a.totalsService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {ShippingOptionRepository} */
        _this.optionRepository_ = shippingOptionRepository;
        /** @private @const {ShippingMethodRepository} */
        _this.methodRepository_ = shippingMethodRepository;
        /** @private @const {ShippingOptionRequirementRepository} */
        _this.requirementRepository_ = shippingOptionRequirementRepository;
        /** @private @const {ProductService} */
        _this.providerService_ = fulfillmentProviderService;
        /** @private @const {RegionService} */
        _this.regionService_ = regionService;
        /** @private @const {TotalsService} */
        _this.totalsService_ = totalsService;
        return _this;
    }
    ShippingOptionService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new ShippingOptionService({
            manager: transactionManager,
            shippingOptionRepository: this.optionRepository_,
            shippingMethodRepository: this.methodRepository_,
            shippingOptionRequirementRepository: this.requirementRepository_,
            fulfillmentProviderService: this.providerService_,
            regionService: this.regionService_,
            totalsService: this.totalsService_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Validates a requirement
     * @param {ShippingRequirement} requirement - the requirement to validate
     * @param {string} optionId - the id to validate the requirement
     * @return {ShippingRequirement} a validated shipping requirement
     */
    ShippingOptionService.prototype.validateRequirement_ = function (requirement, optionId) {
        return __awaiter(this, void 0, void 0, function () {
            var reqRepo, existingReq, req, created;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!requirement.type) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "A Shipping Requirement must have a type field");
                        }
                        if (requirement.type !== "min_subtotal" &&
                            requirement.type !== "max_subtotal") {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Requirement type must be one of min_subtotal, max_subtotal");
                        }
                        reqRepo = this.manager_.getCustomRepository(this.requirementRepository_);
                        return [4 /*yield*/, reqRepo.findOne({
                                where: { id: requirement.id },
                            })];
                    case 1:
                        existingReq = _a.sent();
                        if (!existingReq && requirement.id) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "ID does not exist");
                        }
                        // If no option id is provided, we are currently in the process of creating
                        // a new shipping option. Therefore, simply return the requirement, such
                        // that the cascading will take care of the creation of the requirement.
                        if (!optionId) {
                            return [2 /*return*/, requirement];
                        }
                        if (!existingReq) return [3 /*break*/, 3];
                        return [4 /*yield*/, reqRepo.save(__assign(__assign({}, existingReq), requirement))];
                    case 2:
                        req = _a.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        created = reqRepo.create(__assign({ shipping_option_id: optionId }, requirement));
                        return [4 /*yield*/, reqRepo.save(created)];
                    case 4:
                        req = _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, req];
                }
            });
        });
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {object} config - config object
     * @return {Promise} the result of the find operation
     */
    ShippingOptionService.prototype.list = function (selector, config) {
        if (config === void 0) { config = { skip: 0, take: 50 }; }
        return __awaiter(this, void 0, void 0, function () {
            var optRepo, query;
            return __generator(this, function (_a) {
                optRepo = this.manager_.getCustomRepository(this.optionRepository_);
                query = this.buildQuery_(selector, config);
                return [2 /*return*/, optRepo.find(query)];
            });
        });
    };
    /**
     * Gets a profile by id.
     * Throws in case of DB Error and if profile was not found.
     * @param {string} optionId - the id of the profile to get.
     * @param {object} options - the options to get a profile
     * @return {Promise<Product>} the profile document.
     */
    ShippingOptionService.prototype.retrieve = function (optionId, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var soRepo, validatedId, query, option;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        soRepo = this.manager_.getCustomRepository(this.optionRepository_);
                        validatedId = this.validateId_(optionId);
                        query = {
                            where: { id: validatedId },
                        };
                        if (options.select) {
                            query.select = options.select;
                        }
                        if (options.relations) {
                            query.relations = options.relations;
                        }
                        return [4 /*yield*/, soRepo.findOne(query)];
                    case 1:
                        option = _a.sent();
                        if (!option) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Shipping Option with ".concat(optionId, " was not found"));
                        }
                        return [2 /*return*/, option];
                }
            });
        });
    };
    /**
     * Updates a shipping method's associations. Useful when a cart is completed
     * and its methods should be copied to an order/swap entity.
     * @param {string} id - the id of the shipping method to update
     * @param {object} update - the values to update the method with
     * @return {Promise<ShippingMethod>} the resulting shipping method
     */
    ShippingOptionService.prototype.updateShippingMethod = function (id, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var methodRepo, method;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    methodRepo = manager.getCustomRepository(this.methodRepository_);
                                    return [4 /*yield*/, methodRepo.findOne({ where: { id: id } })];
                                case 1:
                                    method = _a.sent();
                                    if ("return_id" in update) {
                                        method.return_id = update.return_id;
                                    }
                                    if ("swap_id" in update) {
                                        method.swap_id = update.swap_id;
                                    }
                                    if ("order_id" in update) {
                                        method.order_id = update.order_id;
                                    }
                                    if ("claim_order_id" in update) {
                                        method.claim_order_id = update.claim_order_id;
                                    }
                                    return [2 /*return*/, methodRepo.save(method)];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Removes a given shipping method
     * @param {ShippingMethod} sm - the shipping method to remove
     */
    ShippingOptionService.prototype.deleteShippingMethod = function (sm) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var methodRepo;
                        return __generator(this, function (_a) {
                            methodRepo = manager.getCustomRepository(this.methodRepository_);
                            return [2 /*return*/, methodRepo.remove(sm)];
                        });
                    }); })];
            });
        });
    };
    /**
     * Creates a shipping method for a given cart.
     * @param {string} optionId - the id of the option to use for the method.
     * @param {object} data - the optional provider data to use.
     * @param {object} config - the cart to create the shipping method for.
     * @return {ShippingMethod} the resulting shipping method.
     */
    ShippingOptionService.prototype.createShippingMethod = function (optionId, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var option, methodRepo, validatedData, methodPrice, toCreate, method, created;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(optionId, {
                                        relations: ["requirements"],
                                    })];
                                case 1:
                                    option = _a.sent();
                                    methodRepo = manager.getCustomRepository(this.methodRepository_);
                                    if ("cart" in config) {
                                        this.validateCartOption(option, config.cart || {});
                                    }
                                    return [4 /*yield*/, this.providerService_.validateFulfillmentData(option, data, config.cart || {})];
                                case 2:
                                    validatedData = _a.sent();
                                    if (!("price" in config)) return [3 /*break*/, 3];
                                    methodPrice = config.price;
                                    return [3 /*break*/, 5];
                                case 3: return [4 /*yield*/, this.getPrice_(option, validatedData, config.cart)];
                                case 4:
                                    methodPrice = _a.sent();
                                    _a.label = 5;
                                case 5:
                                    toCreate = {
                                        shipping_option_id: option.id,
                                        data: validatedData,
                                        price: methodPrice,
                                    };
                                    if (config.order) {
                                        toCreate.order_id = config.order.id;
                                    }
                                    if (config.cart) {
                                        toCreate.cart_id = config.cart.id;
                                    }
                                    if (config.cart_id) {
                                        toCreate.cart_id = config.cart_id;
                                    }
                                    if (config.return_id) {
                                        toCreate.return_id = config.return_id;
                                    }
                                    if (config.order_id) {
                                        toCreate.order_id = config.order_id;
                                    }
                                    if (config.claim_order_id) {
                                        toCreate.claim_order_id = config.claim_order_id;
                                    }
                                    if (config.draft_order_id) {
                                        toCreate.draft_order_id = config.draft_order_id;
                                    }
                                    return [4 /*yield*/, methodRepo.create(toCreate)];
                                case 6:
                                    method = _a.sent();
                                    return [4 /*yield*/, methodRepo.save(method)];
                                case 7:
                                    created = _a.sent();
                                    return [2 /*return*/, methodRepo.findOne({
                                            where: { id: created.id },
                                            relations: ["shipping_option"],
                                        })];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Checks if a given option id is a valid option for a cart. If it is the
     * option is returned with the correct price. Throws when region_ids do not
     * match, or when the shipping option requirements are not satisfied.
     * @param {object} option - the option object to check
     * @param {Cart} cart - the cart object to check against
     * @return {ShippingOption} the validated shipping option
     */
    ShippingOptionService.prototype.validateCartOption = function (option, cart) {
        if (option.is_return) {
            return null;
        }
        if (cart.region_id !== option.region_id) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The shipping option is not available in the cart's region");
        }
        var subtotal = cart.subtotal;
        var requirementResults = option.requirements.map(function (requirement) {
            switch (requirement.type) {
                case "max_subtotal":
                    return requirement.amount > subtotal;
                case "min_subtotal":
                    return requirement.amount <= subtotal;
                default:
                    return true;
            }
        });
        if (!requirementResults.every(Boolean)) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "The Cart does not satisfy the shipping option's requirements");
        }
        return option;
    };
    /**
     * Creates a new shipping option. Used both for outbound and inbound shipping
     * options. The difference is registered by the `is_return` field which
     * defaults to false.
     * @param {ShippingOption} data - the data to create shipping options
     * @return {Promise<ShippingOption>} the result of the create operation
     */
    ShippingOptionService.prototype.create = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var optionRepo, option, region, _a, isValid, acc, _loop_1, this_1, _b, _c, r, e_1_1, result;
                        var e_1, _d;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0:
                                    optionRepo = manager.getCustomRepository(this.optionRepository_);
                                    return [4 /*yield*/, optionRepo.create(data)];
                                case 1:
                                    option = _e.sent();
                                    return [4 /*yield*/, this.regionService_
                                            .withTransaction(manager)
                                            .retrieve(option.region_id, {
                                            relations: ["fulfillment_providers"],
                                        })];
                                case 2:
                                    region = _e.sent();
                                    if (!region.fulfillment_providers.find(function (_a) {
                                        var id = _a.id;
                                        return id === option.provider_id;
                                    })) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The fulfillment provider is not available in the provided region");
                                    }
                                    _a = option;
                                    return [4 /*yield*/, this.validatePriceType_(data.price_type, option)];
                                case 3:
                                    _a.price_type = _e.sent();
                                    option.amount = data.price_type === "calculated" ? null : data.amount;
                                    return [4 /*yield*/, this.providerService_.validateOption(option)];
                                case 4:
                                    isValid = _e.sent();
                                    if (!isValid) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The fulfillment provider cannot validate the shipping option");
                                    }
                                    if (!("requirements" in data)) return [3 /*break*/, 12];
                                    acc = [];
                                    _loop_1 = function (r) {
                                        var validated;
                                        return __generator(this, function (_f) {
                                            switch (_f.label) {
                                                case 0: return [4 /*yield*/, this_1.validateRequirement_(r)];
                                                case 1:
                                                    validated = _f.sent();
                                                    if (acc.find(function (raw) { return raw.type === validated.type; })) {
                                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Only one requirement of each type is allowed");
                                                    }
                                                    if (acc.find(function (raw) {
                                                        return (raw.type === "max_subtotal" &&
                                                            validated.amount > raw.amount) ||
                                                            (raw.type === "min_subtotal" && validated.amount < raw.amount);
                                                    })) {
                                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Max. subtotal must be greater than Min. subtotal");
                                                    }
                                                    acc.push(validated);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_1 = this;
                                    _e.label = 5;
                                case 5:
                                    _e.trys.push([5, 10, 11, 12]);
                                    _b = __values(data.requirements), _c = _b.next();
                                    _e.label = 6;
                                case 6:
                                    if (!!_c.done) return [3 /*break*/, 9];
                                    r = _c.value;
                                    return [5 /*yield**/, _loop_1(r)];
                                case 7:
                                    _e.sent();
                                    _e.label = 8;
                                case 8:
                                    _c = _b.next();
                                    return [3 /*break*/, 6];
                                case 9: return [3 /*break*/, 12];
                                case 10:
                                    e_1_1 = _e.sent();
                                    e_1 = { error: e_1_1 };
                                    return [3 /*break*/, 12];
                                case 11:
                                    try {
                                        if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                    return [7 /*endfinally*/];
                                case 12: return [4 /*yield*/, optionRepo.save(option)];
                                case 13:
                                    result = _e.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * @typedef ShippingOptionPrice
     * @property {string} type - one of flat_rate, calculated
     * @property {number} value - the value if available
     */
    /**
     * Validates a shipping option price
     * @param {ShippingOptionPrice} priceType - the price to validate
     * @param {ShippingOption} option - the option to validate against
     * @return {Promise<ShippingOptionPrice>} the validated price
     */
    ShippingOptionService.prototype.validatePriceType_ = function (priceType, option) {
        return __awaiter(this, void 0, void 0, function () {
            var canCalculate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!priceType ||
                            (priceType !== "flat_rate" && priceType !== "calculated")) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The price must be of type flat_rate or calculated");
                        }
                        if (!(priceType === "calculated")) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.providerService_.canCalculate(option.provider_id, option.data)];
                    case 1:
                        canCalculate = _a.sent();
                        if (!canCalculate) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The fulfillment provider cannot calculate prices for this option");
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, priceType];
                }
            });
        });
    };
    /**
     * Updates a profile. Metadata updates and product updates should use
     * dedicated methods, e.g. `setMetadata`, etc. The function
     * will throw errors if metadata or product updates are attempted.
     * @param {string} optionId - the id of the option. Must be a string that
     *   can be casted to an ObjectId
     * @param {object} update - an object with the update values.
     * @return {Promise} resolves to the update result.
     */
    ShippingOptionService.prototype.update = function (optionId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var option, _a, acc, _loop_2, this_2, _b, _c, r, e_2_1, accReqs_1, toRemove, _d, optionRepo, result;
                        var e_2, _e;
                        var _this = this;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0: return [4 /*yield*/, this.retrieve(optionId, {
                                        relations: ["requirements"],
                                    })];
                                case 1:
                                    option = _f.sent();
                                    if (!("metadata" in update)) return [3 /*break*/, 3];
                                    _a = option;
                                    return [4 /*yield*/, this.setMetadata_(option, update.metadata)];
                                case 2:
                                    _a.metadata = _f.sent();
                                    _f.label = 3;
                                case 3:
                                    if (update.region_id || update.provider_id || update.data) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Region and Provider cannot be updated after creation");
                                    }
                                    if ("is_return" in update) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "is_return cannot be changed after creation");
                                    }
                                    if (!("requirements" in update)) return [3 /*break*/, 14];
                                    acc = [];
                                    _loop_2 = function (r) {
                                        var validated;
                                        return __generator(this, function (_g) {
                                            switch (_g.label) {
                                                case 0: return [4 /*yield*/, this_2.validateRequirement_(r, optionId)];
                                                case 1:
                                                    validated = _g.sent();
                                                    if (acc.find(function (raw) { return raw.type === validated.type; })) {
                                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Only one requirement of each type is allowed");
                                                    }
                                                    if (acc.find(function (raw) {
                                                        return (raw.type === "max_subtotal" &&
                                                            validated.amount > raw.amount) ||
                                                            (raw.type === "min_subtotal" && validated.amount < raw.amount);
                                                    })) {
                                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Max. subtotal must be greater than Min. subtotal");
                                                    }
                                                    acc.push(validated);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    };
                                    this_2 = this;
                                    _f.label = 4;
                                case 4:
                                    _f.trys.push([4, 9, 10, 11]);
                                    _b = __values(update.requirements), _c = _b.next();
                                    _f.label = 5;
                                case 5:
                                    if (!!_c.done) return [3 /*break*/, 8];
                                    r = _c.value;
                                    return [5 /*yield**/, _loop_2(r)];
                                case 6:
                                    _f.sent();
                                    _f.label = 7;
                                case 7:
                                    _c = _b.next();
                                    return [3 /*break*/, 5];
                                case 8: return [3 /*break*/, 11];
                                case 9:
                                    e_2_1 = _f.sent();
                                    e_2 = { error: e_2_1 };
                                    return [3 /*break*/, 11];
                                case 10:
                                    try {
                                        if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                    return [7 /*endfinally*/];
                                case 11:
                                    if (!option.requirements) return [3 /*break*/, 13];
                                    accReqs_1 = acc.map(function (a) { return a.id; });
                                    toRemove = option.requirements.filter(function (r) { return !accReqs_1.includes(r.id); });
                                    return [4 /*yield*/, Promise.all(toRemove.map(function (req) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, this.removeRequirement(req.id)];
                                                    case 1:
                                                        _a.sent();
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); }))];
                                case 12:
                                    _f.sent();
                                    _f.label = 13;
                                case 13:
                                    option.requirements = acc;
                                    _f.label = 14;
                                case 14:
                                    if (!("price_type" in update)) return [3 /*break*/, 16];
                                    _d = option;
                                    return [4 /*yield*/, this.validatePriceType_(update.price_type, option)];
                                case 15:
                                    _d.price_type = _f.sent();
                                    if (update.price_type === "calculated") {
                                        option.amount = null;
                                    }
                                    _f.label = 16;
                                case 16:
                                    if ("amount" in update && option.price_type !== "calculated") {
                                        option.amount = update.amount;
                                    }
                                    if ("name" in update) {
                                        option.name = update.name;
                                    }
                                    if ("admin_only" in update) {
                                        option.admin_only = update.admin_only;
                                    }
                                    optionRepo = manager.getCustomRepository(this.optionRepository_);
                                    return [4 /*yield*/, optionRepo.save(option)];
                                case 17:
                                    result = _f.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Deletes a profile with a given profile id.
     * @param {string} optionId - the id of the profile to delete. Must be
     *   castable as an ObjectId
     * @return {Promise} the result of the delete operation.
     */
    ShippingOptionService.prototype.delete = function (optionId) {
        return __awaiter(this, void 0, void 0, function () {
            var option, optionRepo, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.retrieve(optionId)];
                    case 1:
                        option = _a.sent();
                        optionRepo = this.manager_.getCustomRepository(this.optionRepository_);
                        return [2 /*return*/, optionRepo.softRemove(option)];
                    case 2:
                        error_1 = _a.sent();
                        // Delete is idempotent, but we return a promise to allow then-chaining
                        return [2 /*return*/, Promise.resolve()];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @typedef ShippingRequirement
     * @property {string} type - one of max_subtotal, min_subtotal
     * @property {number} amount - the value to match against
     */
    /**
     * Adds a requirement to a shipping option. Only 1 requirement of each type
     * is allowed.
     * @param {string} optionId - the option to add the requirement to.
     * @param {ShippingRequirement} requirement - the requirement for the option.
     * @return {Promise} the result of update
     */
    ShippingOptionService.prototype.addRequirement = function (optionId, requirement) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var option, validatedReq, optionRepo;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.retrieve(optionId, {
                                        relations: ["requirements"],
                                    })];
                                case 1:
                                    option = _a.sent();
                                    return [4 /*yield*/, this.validateRequirement_(requirement)];
                                case 2:
                                    validatedReq = _a.sent();
                                    if (option.requirements.find(function (r) { return r.type === validatedReq.type; })) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.DUPLICATE_ERROR, "A requirement with type: ".concat(validatedReq.type, " already exists"));
                                    }
                                    option.requirements.push(validatedReq);
                                    optionRepo = manager.getCustomRepository(this.optionRepository_);
                                    return [2 /*return*/, optionRepo.save(option)];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Removes a requirement from a shipping option
     * @param {string} requirementId - the id of the requirement to remove
     * @return {Promise} the result of update
     */
    ShippingOptionService.prototype.removeRequirement = function (requirementId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var reqRepo, requirement, result, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 3, , 4]);
                                    reqRepo = manager.getCustomRepository(this.requirementRepository_);
                                    return [4 /*yield*/, reqRepo.findOne({
                                            where: { id: requirementId },
                                        })];
                                case 1:
                                    requirement = _a.sent();
                                    return [4 /*yield*/, reqRepo.softRemove(requirement)];
                                case 2:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                                case 3:
                                    error_2 = _a.sent();
                                    // Delete is idempotent, but we return a promise to allow then-chaining
                                    return [2 /*return*/, Promise.resolve()];
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Decorates a shipping option.
     * @param {ShippingOption} optionId - the shipping option to decorate using optionId.
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {ShippingOption} the decorated ShippingOption.
     */
    ShippingOptionService.prototype.decorate = function (optionId, fields, expandFields) {
        if (fields === void 0) { fields = []; }
        if (expandFields === void 0) { expandFields = []; }
        return __awaiter(this, void 0, void 0, function () {
            var requiredFields, option;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requiredFields = ["id", "metadata"];
                        fields = fields.concat(requiredFields);
                        return [4 /*yield*/, this.retrieve(optionId, {
                                select: fields,
                                relations: expandFields,
                            })];
                    case 1:
                        option = _a.sent();
                        return [2 /*return*/, option];
                }
            });
        });
    };
    /**
     * Dedicated method to set metadata for a shipping option.
     * @param {object} option - the option to set metadata for.
     * @param {object} metadata - object for metadata field
     * @return {Promise} resolves to the updated result.
     */
    ShippingOptionService.prototype.setMetadata_ = function (option, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var existing, newData, _a, _b, _c, key, value, updated;
            var e_3, _d;
            return __generator(this, function (_e) {
                existing = option.metadata || {};
                newData = {};
                try {
                    for (_a = __values(Object.entries(metadata)), _b = _a.next(); !_b.done; _b = _a.next()) {
                        _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                        if (typeof key !== "string") {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Key type is invalid. Metadata keys must be strings");
                        }
                        newData[key] = value;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                updated = __assign(__assign({}, existing), newData);
                return [2 /*return*/, updated];
            });
        });
    };
    /**
     * Returns the amount to be paid for a shipping method. Will ask the
     * fulfillment provider to calculate the price if the shipping option has the
     * price type "calculated".
     * @param {ShippingOption} option - the shipping option to retrieve the price
     *   for.
     * @param {ShippingData} data - the shipping data to retrieve the price.
     * @param {Cart | Order} cart - the context in which the price should be
     *   retrieved.
     * @return {Promise<Number>} the price of the shipping option.
     */
    ShippingOptionService.prototype.getPrice_ = function (option, data, cart) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (option.price_type === "calculated") {
                    return [2 /*return*/, this.providerService_.calculatePrice(option, data, cart)];
                }
                return [2 /*return*/, option.amount];
            });
        });
    };
    return ShippingOptionService;
}(medusa_interfaces_1.BaseService));
exports.default = ShippingOptionService;
//# sourceMappingURL=shipping-option.js.map