export default ProductCollectionService;
declare const ProductCollectionService_base: any;
/**
 * Provides layer to manipulate product collections.
 * @extends BaseService
 */
declare class ProductCollectionService extends ProductCollectionService_base {
    [x: string]: any;
    constructor({ manager, productCollectionRepository, productRepository, eventBusService, }: {
        manager: any;
        productCollectionRepository: any;
        productRepository: any;
        eventBusService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {ProductCollectionRepository} */
    private productCollectionRepository_;
    /** @private @const {ProductRepository} */
    private productRepository_;
    /** @private @const {EventBus} */
    private eventBus_;
    withTransaction(transactionManager: any): ProductCollectionService;
    /**
     * Retrieves a product collection by id.
     * @param {string} collectionId - the id of the collection to retrieve.
     * @param {Object} config - the config of the collection to retrieve.
     * @return {Promise<ProductCollection>} the collection.
     */
    retrieve(collectionId: string, config?: any): Promise<ProductCollection>;
    /**
     * Retrieves a product collection by id.
     * @param {string} collectionHandle - the handle of the collection to retrieve.
     * @param {object} config - query config for request
     * @return {Promise<ProductCollection>} the collection.
     */
    retrieveByHandle(collectionHandle: string, config?: object): Promise<ProductCollection>;
    /**
     * Creates a product collection
     * @param {object} collection - the collection to create
     * @return {Promise<ProductCollection>} created collection
     */
    create(collection: object): Promise<ProductCollection>;
    /**
     * Updates a product collection
     * @param {string} collectionId - id of collection to update
     * @param {object} update - update object
     * @return {Promise<ProductCollection>} update collection
     */
    update(collectionId: string, update: object): Promise<ProductCollection>;
    /**
     * Deletes a product collection idempotently
     * @param {string} collectionId - id of collection to delete
     * @return {Promise} empty promise
     */
    delete(collectionId: string): Promise<any>;
    /**
     * Lists product collections
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config to be used for find
     * @return {Promise} the result of the find operation
     */
    list(selector?: any, config?: any): Promise<any>;
    /**
     * Lists product collections and add count.
     * @param {Object} selector - the query object for find
     * @param {Object} config - the config to be used for find
     * @return {Promise} the result of the find operation
     */
    listAndCount(selector?: any, config?: any): Promise<any>;
}
