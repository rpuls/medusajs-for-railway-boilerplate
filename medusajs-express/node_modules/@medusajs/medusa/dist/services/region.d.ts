export default RegionService;
declare const RegionService_base: any;
/**
 * Provides layer to manipulate regions.
 * @extends BaseService
 */
declare class RegionService extends RegionService_base {
    [x: string]: any;
    static Events: {
        UPDATED: string;
        CREATED: string;
        DELETED: string;
    };
    constructor({ manager, regionRepository, countryRepository, storeService, eventBusService, currencyRepository, paymentProviderRepository, fulfillmentProviderRepository, paymentProviderService, fulfillmentProviderService, }: {
        manager: any;
        regionRepository: any;
        countryRepository: any;
        storeService: any;
        eventBusService: any;
        currencyRepository: any;
        paymentProviderRepository: any;
        fulfillmentProviderRepository: any;
        paymentProviderService: any;
        fulfillmentProviderService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {RegionRepository} */
    private regionRepository_;
    /** @private @const {CountryRepository} */
    private countryRepository_;
    /** @private @const {StoreService} */
    private storeService_;
    /** @private @const {EventBus} */
    private eventBus_;
    /** @private @const {CurrencyRepository} */
    private currencyRepository_;
    /** @private @const {PaymentProviderRepository} */
    private paymentProviderRepository_;
    /** @private @const {FulfillmentProviderRepository} */
    private fulfillmentProviderRepository_;
    /** @private @const {PaymentProviderService} */
    private paymentProviderService_;
    /** @private @const {FulfillmentProviderService} */
    private fulfillmentProviderService_;
    withTransaction(transactionManager: any): RegionService;
    /**
     * Creates a region.
     * @param {Region} regionObject - the unvalidated region
     * @return {Region} the newly created region
     */
    create(regionObject: Region): Region;
    /**
     * Updates a region
     * @param {string} regionId - the region to update
     * @param {object} update - the data to update the region with
     * @return {Promise} the result of the update operation
     */
    update(regionId: string, update: object): Promise<any>;
    /**
     * Validates fields for creation and updates. If the region already exisits
     * the id can be passed to check that country updates are allowed.
     * @param {object} region - the region data to validate
     * @param {string?} id - optional id of the region to check against
     * @return {object} the validated region data
     */
    validateFields_(region: object, id?: string | null): object;
    /**
     * Validates a tax rate. Will throw if the tax rate is not between 0 and 1.
     * @param {number} taxRate - a number representing the tax rate of the region
     */
    validateTaxRate_(taxRate: number): void;
    /**
     * Validates a currency code. Will throw if the currency code doesn't exist.
     * @param {string} currencyCode - an ISO currency code
     */
    validateCurrency_(currencyCode: string): Promise<void>;
    /**
     * Validates a country code. Will normalize the code before checking for
     * existence.
     * @param {string} code - a 2 digit alphanumeric ISO country code
     * @param {string} regionId - the id of the current region to check against
     */
    validateCountry_(code: string, regionId: string): Promise<any>;
    retrieveByCountryCode(code: any, config?: {}): Promise<Region>;
    /**
     * Retrieves a region by its id.
     * @param {string} regionId - the id of the region to retrieve
     * @param {object} config - configuration settings
     * @return {Region} the region
     */
    retrieve(regionId: string, config?: object): Region;
    /**
     * Lists all regions based on a query
     * @param {object} selector - query object for find
     * @param {object} config - configuration settings
     * @return {Promise} result of the find operation
     */
    list(selector?: object, config?: object): Promise<any>;
    /**
     * Deletes a region.
     * @param {string} regionId - the region to delete
     * @return {Promise} the result of the delete operation
     */
    delete(regionId: string): Promise<any>;
    /**
     * Adds a country to the region.
     * @param {string} regionId - the region to add a country to
     * @param {string} code - a 2 digit alphanumeric ISO country code.
     * @return {Promise} the result of the update operation
     */
    addCountry(regionId: string, code: string): Promise<any>;
    /**
     * Removes a country from a Region
     * @param {string} regionId - the region to remove from
     * @param {string} code - a 2 digit alphanumeric ISO country code to remove
     * @return {Promise} the result of the update operation
     */
    removeCountry(regionId: string, code: string): Promise<any>;
    /**
     * Adds a payment provider that is available in the region. Fails if the
     * provider doesn't exist.
     * @param {string} regionId - the region to add the provider to
     * @param {string} providerId - the provider to add to the region
     * @return {Promise} the result of the update operation
     */
    addPaymentProvider(regionId: string, providerId: string): Promise<any>;
    /**
     * Adds a fulfillment provider that is available in the region. Fails if the
     * provider doesn't exist.
     * @param {string} regionId - the region to add the provider to
     * @param {string} providerId - the provider to add to the region
     * @return {Promise} the result of the update operation
     */
    addFulfillmentProvider(regionId: string, providerId: string): Promise<any>;
    /**
     * Removes a payment provider from a region. Is idempotent.
     * @param {string} regionId - the region to remove the provider from
     * @param {string} providerId - the provider to remove from the region
     * @return {Promise} the result of the update operation
     */
    removePaymentProvider(regionId: string, providerId: string): Promise<any>;
    /**
     * Removes a fulfillment provider from a region. Is idempotent.
     * @param {string} regionId - the region to remove the provider from
     * @param {string} providerId - the provider to remove from the region
     * @return {Promise} the result of the update operation
     */
    removeFulfillmentProvider(regionId: string, providerId: string): Promise<any>;
}
