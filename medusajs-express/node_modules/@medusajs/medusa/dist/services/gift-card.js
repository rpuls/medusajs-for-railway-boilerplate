"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var medusa_interfaces_1 = require("medusa-interfaces");
var randomatic_1 = __importDefault(require("randomatic"));
var typeorm_1 = require("typeorm");
/**
 * Provides layer to manipulate gift cards.
 * @extends BaseService
 */
var GiftCardService = /** @class */ (function (_super) {
    __extends(GiftCardService, _super);
    function GiftCardService(_a) {
        var manager = _a.manager, giftCardRepository = _a.giftCardRepository, giftCardTransactionRepository = _a.giftCardTransactionRepository, regionService = _a.regionService, eventBusService = _a.eventBusService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {GiftCardRepository} */
        _this.giftCardRepository_ = giftCardRepository;
        /** @private @const {GiftCardRepository} */
        _this.giftCardTransactionRepo_ = giftCardTransactionRepository;
        /** @private @const {RegionService} */
        _this.regionService_ = regionService;
        /** @private @const {EventBus} */
        _this.eventBus_ = eventBusService;
        return _this;
    }
    GiftCardService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new GiftCardService({
            manager: transactionManager,
            giftCardRepository: this.giftCardRepository_,
            giftCardTransactionRepository: this.giftCardTransactionRepo_,
            regionService: this.regionService_,
            eventBusService: this.eventBus_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Generates a 16 character gift card code
     * @return {string} the generated gift card code
     */
    GiftCardService.prototype.generateCode_ = function () {
        var code = [
            (0, randomatic_1.default)("A0", 4),
            (0, randomatic_1.default)("A0", 4),
            (0, randomatic_1.default)("A0", 4),
            (0, randomatic_1.default)("A0", 4),
        ].join("-");
        return code;
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {Object} config - the configuration used to find the objects. contains relations, skip, and take.
     * @return {Promise} the result of the find operation
     */
    GiftCardService.prototype.list = function (selector, config) {
        if (selector === void 0) { selector = {}; }
        if (config === void 0) { config = { relations: [], skip: 0, take: 10 }; }
        return __awaiter(this, void 0, void 0, function () {
            var giftCardRepo, q, query, rels, where, raw;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        giftCardRepo = this.manager_.getCustomRepository(this.giftCardRepository_);
                        if ("q" in selector) {
                            q = selector.q;
                            delete selector.q;
                        }
                        query = this.buildQuery_(selector, config);
                        rels = query.relations;
                        delete query.relations;
                        if (!q) return [3 /*break*/, 2];
                        where = query.where;
                        delete where.id;
                        return [4 /*yield*/, giftCardRepo
                                .createQueryBuilder("gift_card")
                                .leftJoinAndSelect("gift_card.order", "order")
                                .select(["gift_card.id"])
                                .where(where)
                                .andWhere(new typeorm_1.Brackets(function (qb) {
                                return qb
                                    .where("gift_card.code ILIKE :q", { q: "%".concat(q, "%") })
                                    .orWhere("display_id::varchar(255) ILIKE :dId", { dId: "".concat(q) });
                            }))
                                .getMany()];
                    case 1:
                        raw = _a.sent();
                        return [2 /*return*/, giftCardRepo.findWithRelations(rels, raw.map(function (i) { return i.id; }))];
                    case 2: return [2 /*return*/, giftCardRepo.findWithRelations(rels, query)];
                }
            });
        });
    };
    GiftCardService.prototype.createTransaction = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var gctRepo, created, saved;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    gctRepo = manager.getCustomRepository(this.giftCardTransactionRepo_);
                                    created = gctRepo.create(data);
                                    return [4 /*yield*/, gctRepo.save(created)];
                                case 1:
                                    saved = _a.sent();
                                    return [2 /*return*/, saved.id];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Creates a gift card with provided data given that the data is validated.
     * @param {GiftCard} giftCard - the gift card data to create
     * @return {Promise<GiftCard>} the result of the create operation
     */
    GiftCardService.prototype.create = function (giftCard) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var giftCardRepo, region, code, toCreate, created, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    giftCardRepo = manager.getCustomRepository(this.giftCardRepository_);
                                    if (!giftCard.region_id) {
                                        throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Gift card is missing region_id");
                                    }
                                    return [4 /*yield*/, this.regionService_.retrieve(giftCard.region_id)];
                                case 1:
                                    region = _a.sent();
                                    code = this.generateCode_();
                                    toCreate = __assign({ code: code, region_id: region.id }, giftCard);
                                    return [4 /*yield*/, giftCardRepo.create(toCreate)];
                                case 2:
                                    created = _a.sent();
                                    return [4 /*yield*/, giftCardRepo.save(created)];
                                case 3:
                                    result = _a.sent();
                                    return [4 /*yield*/, this.eventBus_
                                            .withTransaction(manager)
                                            .emit(GiftCardService.Events.CREATED, {
                                            id: result.id,
                                        })];
                                case 4:
                                    _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Gets a gift card by id.
     * @param {string} giftCardId - id of gift card to retrieve
     * @param {object} config - optional values to include with gift card query
     * @return {Promise<GiftCard>} the gift card
     */
    GiftCardService.prototype.retrieve = function (giftCardId, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var giftCardRepo, validatedId, query, rels, giftCard;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        giftCardRepo = this.manager_.getCustomRepository(this.giftCardRepository_);
                        validatedId = this.validateId_(giftCardId);
                        query = {
                            where: { id: validatedId },
                        };
                        if (config.select) {
                            query.select = config.select;
                        }
                        if (config.relations) {
                            query.relations = config.relations;
                        }
                        rels = query.relations;
                        delete query.relations;
                        return [4 /*yield*/, giftCardRepo.findOneWithRelations(rels, query)];
                    case 1:
                        giftCard = _a.sent();
                        if (!giftCard) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Gift card with ".concat(giftCardId, " was not found"));
                        }
                        return [2 /*return*/, giftCard];
                }
            });
        });
    };
    GiftCardService.prototype.retrieveByCode = function (code, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var giftCardRepo, query, rels, giftCard;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        giftCardRepo = this.manager_.getCustomRepository(this.giftCardRepository_);
                        query = {
                            where: { code: code },
                        };
                        if (config.select) {
                            query.select = config.select;
                        }
                        if (config.relations) {
                            query.relations = config.relations;
                        }
                        rels = query.relations;
                        delete query.relations;
                        return [4 /*yield*/, giftCardRepo.findOneWithRelations(rels, query)];
                    case 1:
                        giftCard = _a.sent();
                        if (!giftCard) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Gift card with ".concat(code, " was not found"));
                        }
                        return [2 /*return*/, giftCard];
                }
            });
        });
    };
    /**
     * Updates a giftCard.
     * @param {string} giftCardId - giftCard id of giftCard to update
     * @param {GiftCard} update - the data to update the giftCard with
     * @return {Promise} the result of the update operation
     */
    GiftCardService.prototype.update = function (giftCardId, update) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var giftCardRepo, giftCard, region_id, metadata, balance, rest, region, _a, _b, _c, _d, key, value, updated;
                        var e_1, _e;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0:
                                    giftCardRepo = manager.getCustomRepository(this.giftCardRepository_);
                                    return [4 /*yield*/, this.retrieve(giftCardId)];
                                case 1:
                                    giftCard = _f.sent();
                                    region_id = update.region_id, metadata = update.metadata, balance = update.balance, rest = __rest(update, ["region_id", "metadata", "balance"]);
                                    if (!(region_id && region_id !== giftCard.region_id)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.regionService_.retrieve(region_id)];
                                case 2:
                                    region = _f.sent();
                                    giftCard.region_id = region.id;
                                    _f.label = 3;
                                case 3:
                                    if (!metadata) return [3 /*break*/, 5];
                                    _a = giftCard;
                                    return [4 /*yield*/, this.setMetadata_(giftCard.id, metadata)];
                                case 4:
                                    _a.metadata = _f.sent();
                                    _f.label = 5;
                                case 5:
                                    if (balance) {
                                        if (balance < 0 || giftCard.value < balance) {
                                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "new balance is invalid");
                                        }
                                        giftCard.balance = balance;
                                    }
                                    try {
                                        for (_b = __values(Object.entries(rest)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                            _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                                            giftCard[key] = value;
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                    return [4 /*yield*/, giftCardRepo.save(giftCard)];
                                case 6:
                                    updated = _f.sent();
                                    return [2 /*return*/, updated];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Deletes a gift card idempotently
     * @param {string} giftCardId - id of gift card to delete
     * @return {Promise} the result of the delete operation
     */
    GiftCardService.prototype.delete = function (giftCardId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var giftCardRepo, giftCard;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    giftCardRepo = manager.getCustomRepository(this.giftCardRepository_);
                                    return [4 /*yield*/, giftCardRepo.findOne({ where: { id: giftCardId } })];
                                case 1:
                                    giftCard = _a.sent();
                                    if (!giftCard) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    return [4 /*yield*/, giftCardRepo.softRemove(giftCard)];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/, Promise.resolve()];
                            }
                        });
                    }); })];
            });
        });
    };
    GiftCardService.Events = {
        CREATED: "gift_card.created",
    };
    return GiftCardService;
}(medusa_interfaces_1.BaseService));
exports.default = GiftCardService;
//# sourceMappingURL=gift-card.js.map