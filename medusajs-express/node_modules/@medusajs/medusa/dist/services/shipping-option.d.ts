export default ShippingOptionService;
declare const ShippingOptionService_base: any;
/**
 * Provides layer to manipulate profiles.
 * @extends BaseService
 */
declare class ShippingOptionService extends ShippingOptionService_base {
    [x: string]: any;
    constructor({ manager, shippingOptionRepository, shippingOptionRequirementRepository, shippingMethodRepository, fulfillmentProviderService, regionService, totalsService, }: {
        manager: any;
        shippingOptionRepository: any;
        shippingOptionRequirementRepository: any;
        shippingMethodRepository: any;
        fulfillmentProviderService: any;
        regionService: any;
        totalsService: any;
    });
    /** @private @const {EntityManager} */
    private manager_;
    /** @private @const {ShippingOptionRepository} */
    private optionRepository_;
    /** @private @const {ShippingMethodRepository} */
    private methodRepository_;
    /** @private @const {ShippingOptionRequirementRepository} */
    private requirementRepository_;
    /** @private @const {ProductService} */
    private providerService_;
    /** @private @const {RegionService} */
    private regionService_;
    /** @private @const {TotalsService} */
    private totalsService_;
    withTransaction(transactionManager: any): ShippingOptionService;
    /**
     * Validates a requirement
     * @param {ShippingRequirement} requirement - the requirement to validate
     * @param {string} optionId - the id to validate the requirement
     * @return {ShippingRequirement} a validated shipping requirement
     */
    validateRequirement_(requirement: {
        /**
         * - one of max_subtotal, min_subtotal
         */
        type: string;
        /**
         * - the value to match against
         */
        amount: number;
    }, optionId: string): {
        /**
         * - one of max_subtotal, min_subtotal
         */
        type: string;
        /**
         * - the value to match against
         */
        amount: number;
    };
    /**
     * @param {Object} selector - the query object for find
     * @param {object} config - config object
     * @return {Promise} the result of the find operation
     */
    list(selector: any, config?: object): Promise<any>;
    /**
     * Gets a profile by id.
     * Throws in case of DB Error and if profile was not found.
     * @param {string} optionId - the id of the profile to get.
     * @param {object} options - the options to get a profile
     * @return {Promise<Product>} the profile document.
     */
    retrieve(optionId: string, options?: object): Promise<Product>;
    /**
     * Updates a shipping method's associations. Useful when a cart is completed
     * and its methods should be copied to an order/swap entity.
     * @param {string} id - the id of the shipping method to update
     * @param {object} update - the values to update the method with
     * @return {Promise<ShippingMethod>} the resulting shipping method
     */
    updateShippingMethod(id: string, update: object): Promise<ShippingMethod>;
    /**
     * Removes a given shipping method
     * @param {ShippingMethod} sm - the shipping method to remove
     */
    deleteShippingMethod(sm: ShippingMethod): Promise<any>;
    /**
     * Creates a shipping method for a given cart.
     * @param {string} optionId - the id of the option to use for the method.
     * @param {object} data - the optional provider data to use.
     * @param {object} config - the cart to create the shipping method for.
     * @return {ShippingMethod} the resulting shipping method.
     */
    createShippingMethod(optionId: string, data: object, config: object): ShippingMethod;
    /**
     * Checks if a given option id is a valid option for a cart. If it is the
     * option is returned with the correct price. Throws when region_ids do not
     * match, or when the shipping option requirements are not satisfied.
     * @param {object} option - the option object to check
     * @param {Cart} cart - the cart object to check against
     * @return {ShippingOption} the validated shipping option
     */
    validateCartOption(option: object, cart: Cart): ShippingOption;
    /**
     * Creates a new shipping option. Used both for outbound and inbound shipping
     * options. The difference is registered by the `is_return` field which
     * defaults to false.
     * @param {ShippingOption} data - the data to create shipping options
     * @return {Promise<ShippingOption>} the result of the create operation
     */
    create(data: ShippingOption): Promise<ShippingOption>;
    /**
     * @typedef ShippingOptionPrice
     * @property {string} type - one of flat_rate, calculated
     * @property {number} value - the value if available
     */
    /**
     * Validates a shipping option price
     * @param {ShippingOptionPrice} priceType - the price to validate
     * @param {ShippingOption} option - the option to validate against
     * @return {Promise<ShippingOptionPrice>} the validated price
     */
    validatePriceType_(priceType: {
        /**
         * - one of flat_rate, calculated
         */
        type: string;
        /**
         * - the value if available
         */
        value: number;
    }, option: ShippingOption): Promise<{
        /**
         * - one of flat_rate, calculated
         */
        type: string;
        /**
         * - the value if available
         */
        value: number;
    }>;
    /**
     * Updates a profile. Metadata updates and product updates should use
     * dedicated methods, e.g. `setMetadata`, etc. The function
     * will throw errors if metadata or product updates are attempted.
     * @param {string} optionId - the id of the option. Must be a string that
     *   can be casted to an ObjectId
     * @param {object} update - an object with the update values.
     * @return {Promise} resolves to the update result.
     */
    update(optionId: string, update: object): Promise<any>;
    /**
     * Deletes a profile with a given profile id.
     * @param {string} optionId - the id of the profile to delete. Must be
     *   castable as an ObjectId
     * @return {Promise} the result of the delete operation.
     */
    delete(optionId: string): Promise<any>;
    /**
     * @typedef ShippingRequirement
     * @property {string} type - one of max_subtotal, min_subtotal
     * @property {number} amount - the value to match against
     */
    /**
     * Adds a requirement to a shipping option. Only 1 requirement of each type
     * is allowed.
     * @param {string} optionId - the option to add the requirement to.
     * @param {ShippingRequirement} requirement - the requirement for the option.
     * @return {Promise} the result of update
     */
    addRequirement(optionId: string, requirement: {
        /**
         * - one of max_subtotal, min_subtotal
         */
        type: string;
        /**
         * - the value to match against
         */
        amount: number;
    }): Promise<any>;
    /**
     * Removes a requirement from a shipping option
     * @param {string} requirementId - the id of the requirement to remove
     * @return {Promise} the result of update
     */
    removeRequirement(requirementId: string): Promise<any>;
    /**
     * Decorates a shipping option.
     * @param {ShippingOption} optionId - the shipping option to decorate using optionId.
     * @param {string[]} fields - the fields to include.
     * @param {string[]} expandFields - fields to expand.
     * @return {ShippingOption} the decorated ShippingOption.
     */
    decorate(optionId: ShippingOption, fields?: string[], expandFields?: string[]): ShippingOption;
    /**
     * Dedicated method to set metadata for a shipping option.
     * @param {object} option - the option to set metadata for.
     * @param {object} metadata - object for metadata field
     * @return {Promise} resolves to the updated result.
     */
    setMetadata_(option: object, metadata: object): Promise<any>;
    /**
     * Returns the amount to be paid for a shipping method. Will ask the
     * fulfillment provider to calculate the price if the shipping option has the
     * price type "calculated".
     * @param {ShippingOption} option - the shipping option to retrieve the price
     *   for.
     * @param {ShippingData} data - the shipping data to retrieve the price.
     * @param {Cart | Order} cart - the context in which the price should be
     *   retrieved.
     * @return {Promise<Number>} the price of the shipping option.
     */
    getPrice_(option: ShippingOption, data: ShippingData, cart: Cart | Order): Promise<number>;
}
