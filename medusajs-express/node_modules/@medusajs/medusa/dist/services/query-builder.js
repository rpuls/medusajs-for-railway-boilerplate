"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var lodash_1 = __importDefault(require("lodash"));
var QueryBuilderService = /** @class */ (function (_super) {
    __extends(QueryBuilderService, _super);
    function QueryBuilderService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QueryBuilderService.prototype.buildQuery = function (params, properties) {
        var textSearch = lodash_1.default.pick(params, ["q"]);
        var filters = lodash_1.default.pick(params, properties);
        var textQuery = this.buildTextSearchQuery(textSearch, properties);
        var filterQuery = this.buildFilterQuery(filters);
        if (textQuery && filterQuery) {
            return {
                $and: [textQuery, filterQuery],
            };
        }
        else if (!textQuery && filterQuery) {
            return filterQuery;
        }
        else if (textQuery && !filterQuery) {
            return textQuery;
        }
        else {
            return {};
        }
    };
    QueryBuilderService.prototype.buildFilterQuery = function (filters) {
        if (lodash_1.default.isEmpty(filters)) {
            return;
        }
        var filterQuery = {};
        Object.keys(filters).map(function (filter) {
            filterQuery[filter] = filters[filter];
        });
        return filterQuery;
    };
    QueryBuilderService.prototype.buildTextSearchQuery = function (search, searchProperties) {
        if (lodash_1.default.isEmpty(search)) {
            return;
        }
        var searchQuery = searchProperties.map(function (s) {
            var _a;
            return (_a = {},
                _a[s] = new RegExp(search.q, "i"),
                _a);
        });
        return { $or: searchQuery };
    };
    return QueryBuilderService;
}(medusa_interfaces_1.BaseService));
exports.default = QueryBuilderService;
//# sourceMappingURL=query-builder.js.map