"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_interfaces_1 = require("medusa-interfaces");
var medusa_core_utils_1 = require("medusa-core-utils");
var InventoryService = /** @class */ (function (_super) {
    __extends(InventoryService, _super);
    function InventoryService(_a) {
        var manager = _a.manager, productVariantService = _a.productVariantService;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {ProductVariantRepository_} */
        _this.productVariantService_ = productVariantService;
        return _this;
    }
    InventoryService.prototype.withTransaction = function (transactionManager) {
        if (!transactionManager) {
            return this;
        }
        var cloned = new InventoryService({
            manager: transactionManager,
            productVariantService: this.productVariantService_,
        });
        cloned.transactionManager_ = transactionManager;
        return cloned;
    };
    /**
     * Updates the inventory of a variant based on a given adjustment.
     * @param {string} variantId - the id of the variant to update
     * @param {number} adjustment - the number to adjust the inventory quantity by
     * @return {Promise} resolves to the update result.
     */
    InventoryService.prototype.adjustInventory = function (variantId, adjustment) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                // if variantId is undefined – ergo. a custom item – then do nothing
                if (typeof variantId === "undefined" || variantId === null) {
                    return [2 /*return*/];
                }
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var variant;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.productVariantService_.retrieve(variantId)
                                    // if inventory is managed then update
                                ];
                                case 1:
                                    variant = _a.sent();
                                    if (!variant.manage_inventory) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.productVariantService_
                                            .withTransaction(manager)
                                            .update(variant, {
                                            inventory_quantity: variant.inventory_quantity + adjustment,
                                        })];
                                case 2: return [2 /*return*/, _a.sent()];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Checks if the inventory of a variant can cover a given quantity. Will
     * return true if the variant doesn't have managed inventory or if the variant
     * allows backorders or if the inventory quantity is greater than `quantity`.
     * @param {string} variantId - the id of the variant to check
     * @param {number} quantity - the number of units to check availability for
     * @return {Promise<boolean>} true if the inventory covers the quantity
     */
    InventoryService.prototype.confirmInventory = function (variantId, quantity) {
        return __awaiter(this, void 0, void 0, function () {
            var variant, inventory_quantity, allow_backorder, manage_inventory, isCovered;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // if variantId is undefined then confirm inventory as it
                        // is a custom item that is not managed
                        if (typeof variantId === "undefined" || variantId === null) {
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.productVariantService_.retrieve(variantId)];
                    case 1:
                        variant = _a.sent();
                        inventory_quantity = variant.inventory_quantity, allow_backorder = variant.allow_backorder, manage_inventory = variant.manage_inventory;
                        isCovered = !manage_inventory || allow_backorder || inventory_quantity >= quantity;
                        if (!isCovered) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_ALLOWED, "Variant with id: ".concat(variant.id, " does not have the required inventory"), medusa_core_utils_1.MedusaError.Codes.INSUFFICIENT_INVENTORY);
                        }
                        return [2 /*return*/, isCovered];
                }
            });
        });
    };
    return InventoryService;
}(medusa_interfaces_1.BaseService));
exports.default = InventoryService;
//# sourceMappingURL=inventory.js.map