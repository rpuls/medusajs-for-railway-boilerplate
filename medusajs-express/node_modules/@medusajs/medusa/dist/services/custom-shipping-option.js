"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var medusa_interfaces_1 = require("medusa-interfaces");
var CustomShippingOptionService = /** @class */ (function (_super) {
    __extends(CustomShippingOptionService, _super);
    function CustomShippingOptionService(_a) {
        var manager = _a.manager, customShippingOptionRepository = _a.customShippingOptionRepository;
        var _this = _super.call(this) || this;
        /** @private @const {EntityManager} */
        _this.manager_ = manager;
        /** @private @const {CustomShippingOptionRepository} */
        _this.customShippingOptionRepository_ = customShippingOptionRepository;
        return _this;
    }
    /**
     * Sets the service's manager to a given transaction manager
     * @param {EntityManager} manager - the manager to use
     * @return {CustomShippingOptionService} a cloned CustomShippingOption service
     */
    CustomShippingOptionService.prototype.withTransaction = function (manager) {
        if (!manager) {
            return this;
        }
        var cloned = new CustomShippingOptionService({
            manager: manager,
            customShippingOptionRepository: this.customShippingOptionRepository_,
        });
        cloned.transactionManager_ = manager;
        return cloned;
    };
    /**
     * Retrieves a specific shipping option.
     * @param {string} id - the id of the custom shipping option to retrieve.
     * @param {*} config - any options needed to query for the result.
     * @return {Promise<CustomShippingOption>} which resolves to the requested custom shipping option.
     */
    CustomShippingOptionService.prototype.retrieve = function (id, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var customShippingOptionRepo, validatedId, query, customShippingOption;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        customShippingOptionRepo = this.manager_.getCustomRepository(this.customShippingOptionRepository_);
                        validatedId = this.validateId_(id);
                        query = this.buildQuery_({ id: validatedId }, config);
                        return [4 /*yield*/, customShippingOptionRepo.findOne(query)];
                    case 1:
                        customShippingOption = _a.sent();
                        if (!customShippingOption) {
                            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.NOT_FOUND, "Custom shipping option with id: ".concat(id, " was not found."));
                        }
                        return [2 /*return*/, customShippingOption];
                }
            });
        });
    };
    /** Fetches all custom shipping options related to the given selector
     * @param {Object} selector - the query object for find
     * @param {Object} config - the configuration used to find the objects. contains relations, skip, and take.
     * @return {Promise<CustomShippingOption[]>} custom shipping options matching the query
     */
    CustomShippingOptionService.prototype.list = function (selector, config) {
        if (config === void 0) { config = {
            skip: 0,
            take: 50,
            relations: [],
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var customShippingOptionRepo, query;
            return __generator(this, function (_a) {
                customShippingOptionRepo = this.manager_.getCustomRepository(this.customShippingOptionRepository_);
                query = this.buildQuery_(selector, config);
                return [2 /*return*/, customShippingOptionRepo.find(query)];
            });
        });
    };
    /**
     * Creates a custom shipping option associated with a given author
     * @param {object} data - the custom shipping option to create
     * @param {*} config - any configurations if needed, including meta data
     * @return {Promise<CustomShippingOption>} resolves to the creation result
     */
    CustomShippingOptionService.prototype.create = function (data, config) {
        if (config === void 0) { config = { metadata: {} }; }
        return __awaiter(this, void 0, void 0, function () {
            var metadata, cart_id, shipping_option_id, price;
            var _this = this;
            return __generator(this, function (_a) {
                metadata = config.metadata;
                cart_id = data.cart_id, shipping_option_id = data.shipping_option_id, price = data.price;
                return [2 /*return*/, this.atomicPhase_(function (manager) { return __awaiter(_this, void 0, void 0, function () {
                        var customShippingOptionRepo, customShippingOption, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    customShippingOptionRepo = manager.getCustomRepository(this.customShippingOptionRepository_);
                                    return [4 /*yield*/, customShippingOptionRepo.create({
                                            cart_id: cart_id,
                                            shipping_option_id: shipping_option_id,
                                            price: price,
                                            metadata: metadata,
                                        })];
                                case 1:
                                    customShippingOption = _a.sent();
                                    return [4 /*yield*/, customShippingOptionRepo.save(customShippingOption)];
                                case 2:
                                    result = _a.sent();
                                    return [2 /*return*/, result];
                            }
                        });
                    }); })];
            });
        });
    };
    return CustomShippingOptionService;
}(medusa_interfaces_1.BaseService));
exports.default = CustomShippingOptionService;
//# sourceMappingURL=custom-shipping-option.js.map