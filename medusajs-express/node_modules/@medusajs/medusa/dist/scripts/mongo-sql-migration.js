#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var mongodb_1 = __importDefault(require("mongodb"));
var chalk_1 = __importDefault(require("chalk"));
var typeorm_1 = require("typeorm");
var medusa_core_utils_1 = require("medusa-core-utils");
var money_amount_1 = require("../models/money-amount");
var country_1 = require("../models/country");
var currency_1 = require("../models/currency");
var discount_1 = require("../models/discount");
var customer_1 = require("../models/customer");
var order_1 = require("../models/order");
var line_item_1 = require("../models/line-item");
var fulfillment_1 = require("../models/fulfillment");
var fulfillment_item_1 = require("../models/fulfillment-item");
var return_item_1 = require("../models/return-item");
var fulfillment_provider_1 = require("../models/fulfillment-provider");
var payment_provider_1 = require("../models/payment-provider");
var payment_1 = require("../models/payment");
var swap_1 = require("../models/swap");
var gift_card_1 = require("../models/gift-card");
var refund_1 = require("../models/refund");
var return_1 = require("../models/return");
var address_3 = require("../models/address");
var shipping_method_1 = require("../models/shipping-method");
var shipping_option_1 = require("../models/shipping-option");
var shipping_profile_1 = require("../models/shipping-profile");
var discount_rule_1 = require("../models/discount-rule");
var store_1 = require("../models/store");
var product_option_1 = require("../models/product-option");
var product_option_value_1 = require("../models/product-option-value");
var shipping_option_requirement_1 = require("../models/shipping-option-requirement");
var region_1 = require("../repositories/region");
var discount_2 = require("../repositories/discount");
var gift_card_2 = require("../repositories/gift-card");
var shipping_profile_2 = require("../repositories/shipping-profile");
var shipping_option_2 = require("../repositories/shipping-option");
var product_1 = require("../repositories/product");
var product_variant_1 = require("../repositories/product-variant");
/**
 * Migrate store
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateStore = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var dcol, dcur, stores, storeRepo, currencyRepo, stores_1, stores_1_1, d, newly, _a, _b, e_1_1;
    var e_1, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                dcol = mongodb.collection("stores");
                dcur = dcol.find({});
                return [4 /*yield*/, dcur.toArray()];
            case 1:
                stores = _e.sent();
                storeRepo = queryRunner.manager.getRepository(store_1.Store);
                currencyRepo = queryRunner.manager.getRepository(currency_1.Currency);
                _e.label = 2;
            case 2:
                _e.trys.push([2, 8, 9, 10]);
                stores_1 = __values(stores), stores_1_1 = stores_1.next();
                _e.label = 3;
            case 3:
                if (!!stores_1_1.done) return [3 /*break*/, 7];
                d = stores_1_1.value;
                _b = (_a = storeRepo).create;
                _d = {
                    name: d.name,
                    default_currency_code: d.default_currency.toLowerCase()
                };
                return [4 /*yield*/, Promise.all(d.currencies.map(function (c) { return currencyRepo.findOne({ code: c.toLowerCase() }); }))];
            case 4:
                newly = _b.apply(_a, [(_d.currencies = _e.sent(),
                        _d.swap_link_template = d.swap_link_template,
                        _d)]);
                return [4 /*yield*/, storeRepo.save(newly)];
            case 5:
                _e.sent();
                _e.label = 6;
            case 6:
                stores_1_1 = stores_1.next();
                return [3 /*break*/, 3];
            case 7: return [3 /*break*/, 10];
            case 8:
                e_1_1 = _e.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 10];
            case 9:
                try {
                    if (stores_1_1 && !stores_1_1.done && (_c = stores_1.return)) _c.call(stores_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 10: return [2 /*return*/];
        }
    });
}); };
/**
 * Migrates Regions
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateRegions = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var rcol, regCursor, regions, countryRepository, payRepository, fulRepository, regionRepository, regions_1, regions_1_1, reg, countries, newRegion, _a, _b, pp, exists, newly, e_2_1, _c, _d, pp, exists, newly, e_3_1, e_4_1;
    var e_4, _e, e_2, _f, e_3, _g;
    return __generator(this, function (_h) {
        switch (_h.label) {
            case 0:
                rcol = mongodb.collection("regions");
                regCursor = rcol.find({});
                return [4 /*yield*/, regCursor.toArray()];
            case 1:
                regions = _h.sent();
                countryRepository = queryRunner.manager.getRepository(country_1.Country);
                payRepository = queryRunner.manager.getRepository(payment_provider_1.PaymentProvider);
                fulRepository = queryRunner.manager.getRepository(fulfillment_provider_1.FulfillmentProvider);
                regionRepository = queryRunner.manager.getCustomRepository(region_1.RegionRepository);
                _h.label = 2;
            case 2:
                _h.trys.push([2, 28, 29, 30]);
                regions_1 = __values(regions), regions_1_1 = regions_1.next();
                _h.label = 3;
            case 3:
                if (!!regions_1_1.done) return [3 /*break*/, 27];
                reg = regions_1_1.value;
                return [4 /*yield*/, countryRepository.find({
                        iso_2: (0, typeorm_1.In)(reg.countries.map(function (c) { return c.toLowerCase(); })),
                    })];
            case 4:
                countries = _h.sent();
                newRegion = regionRepository.create({
                    id: "".concat(reg._id),
                    name: reg.name,
                    currency_code: reg.currency_code.toLowerCase(),
                    tax_rate: reg.tax_rate * 100,
                    tax_code: reg.tax_code,
                    countries: countries,
                });
                newRegion.payment_providers = [];
                _h.label = 5;
            case 5:
                _h.trys.push([5, 12, 13, 14]);
                _a = (e_2 = void 0, __values(reg.payment_providers)), _b = _a.next();
                _h.label = 6;
            case 6:
                if (!!_b.done) return [3 /*break*/, 11];
                pp = _b.value;
                return [4 /*yield*/, payRepository.findOne({ id: pp })];
            case 7:
                exists = _h.sent();
                if (!!exists) return [3 /*break*/, 9];
                newly = payRepository.create({
                    id: pp,
                    is_installed: false,
                });
                return [4 /*yield*/, payRepository.save(newly)];
            case 8:
                exists = _h.sent();
                _h.label = 9;
            case 9:
                newRegion.payment_providers.push(exists);
                _h.label = 10;
            case 10:
                _b = _a.next();
                return [3 /*break*/, 6];
            case 11: return [3 /*break*/, 14];
            case 12:
                e_2_1 = _h.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 14];
            case 13:
                try {
                    if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 14:
                newRegion.fulfillment_providers = [];
                _h.label = 15;
            case 15:
                _h.trys.push([15, 22, 23, 24]);
                _c = (e_3 = void 0, __values(reg.fulfillment_providers)), _d = _c.next();
                _h.label = 16;
            case 16:
                if (!!_d.done) return [3 /*break*/, 21];
                pp = _d.value;
                return [4 /*yield*/, fulRepository.findOne({ id: pp })];
            case 17:
                exists = _h.sent();
                if (!!exists) return [3 /*break*/, 19];
                newly = fulRepository.create({
                    id: pp,
                    is_installed: false,
                });
                return [4 /*yield*/, fulRepository.save(newly)];
            case 18:
                exists = _h.sent();
                _h.label = 19;
            case 19:
                newRegion.fulfillment_providers.push(exists);
                _h.label = 20;
            case 20:
                _d = _c.next();
                return [3 /*break*/, 16];
            case 21: return [3 /*break*/, 24];
            case 22:
                e_3_1 = _h.sent();
                e_3 = { error: e_3_1 };
                return [3 /*break*/, 24];
            case 23:
                try {
                    if (_d && !_d.done && (_g = _c.return)) _g.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
                return [7 /*endfinally*/];
            case 24: return [4 /*yield*/, regionRepository.save(newRegion)];
            case 25:
                _h.sent();
                _h.label = 26;
            case 26:
                regions_1_1 = regions_1.next();
                return [3 /*break*/, 3];
            case 27: return [3 /*break*/, 30];
            case 28:
                e_4_1 = _h.sent();
                e_4 = { error: e_4_1 };
                return [3 /*break*/, 30];
            case 29:
                try {
                    if (regions_1_1 && !regions_1_1.done && (_e = regions_1.return)) _e.call(regions_1);
                }
                finally { if (e_4) throw e_4.error; }
                return [7 /*endfinally*/];
            case 30: return [2 /*return*/];
        }
    });
}); };
/**
 * Migrates Shipping Options
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateShippingOptions = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var col, cursor, options, pCol, pCursor, profiles, reqRepo, optionRepository, profileRepo, _loop_1, options_1, options_1_1, option, e_5_1;
    var e_5, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                col = mongodb.collection("shippingoptions");
                cursor = col.find({});
                return [4 /*yield*/, cursor.toArray()
                    // const rCol = mongodb.collection("regions")
                    // const rCursor = rCol.find({})
                    // const regions = await rCursor.toArray()
                ];
            case 1:
                options = _b.sent();
                pCol = mongodb.collection("shippingprofiles");
                pCursor = pCol.find({});
                return [4 /*yield*/, pCursor.toArray()];
            case 2:
                profiles = _b.sent();
                reqRepo = queryRunner.manager.getRepository(shipping_option_requirement_1.ShippingOptionRequirement);
                optionRepository = queryRunner.manager.getCustomRepository(shipping_option_2.ShippingOptionRepository);
                profileRepo = queryRunner.manager.getCustomRepository(shipping_profile_2.ShippingProfileRepository);
                _loop_1 = function (option) {
                    var mongoProfile, profile, newOption;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                mongoProfile = profiles.find(function (p) { return p._id.equals(option.profile_id); });
                                profile = void 0;
                                if (!(mongoProfile.name === "default_shipping_profile")) return [3 /*break*/, 2];
                                return [4 /*yield*/, profileRepo.findOne({ type: "default" })];
                            case 1:
                                profile = _c.sent();
                                return [3 /*break*/, 4];
                            case 2:
                                if (!(mongoProfile.name = "default_gift_card_profile")) return [3 /*break*/, 4];
                                return [4 /*yield*/, profileRepo.findOne({ type: "gift_card" })];
                            case 3:
                                profile = _c.sent();
                                _c.label = 4;
                            case 4:
                                newOption = optionRepository.create({
                                    id: "".concat(option._id),
                                    name: option.name,
                                    region_id: option.region_id,
                                    profile: profile,
                                    provider_id: option.provider_id,
                                    price_type: option.price.type,
                                    amount: Math.round(option.price.amount * 100),
                                    is_return: !!option.is_return,
                                    data: option.data,
                                    requirements: option.requirements.map(function (r) {
                                        return reqRepo.create({
                                            type: r.type,
                                            amount: Math.round(r.value * 100),
                                        });
                                    }),
                                });
                                return [4 /*yield*/, optionRepository.save(newOption)];
                            case 5:
                                _c.sent();
                                return [2 /*return*/];
                        }
                    });
                };
                _b.label = 3;
            case 3:
                _b.trys.push([3, 8, 9, 10]);
                options_1 = __values(options), options_1_1 = options_1.next();
                _b.label = 4;
            case 4:
                if (!!options_1_1.done) return [3 /*break*/, 7];
                option = options_1_1.value;
                return [5 /*yield**/, _loop_1(option)];
            case 5:
                _b.sent();
                _b.label = 6;
            case 6:
                options_1_1 = options_1.next();
                return [3 /*break*/, 4];
            case 7: return [3 /*break*/, 10];
            case 8:
                e_5_1 = _b.sent();
                e_5 = { error: e_5_1 };
                return [3 /*break*/, 10];
            case 9:
                try {
                    if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
                }
                finally { if (e_5) throw e_5.error; }
                return [7 /*endfinally*/];
            case 10: return [2 /*return*/];
        }
    });
}); };
/**
 * Migrates products and product variants
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateProducts = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var col, cursor, products, variantCol, maRepo, optValRepo, optRepo, varRepo, prodRepo, profileRepo, defProf, gcProf, _loop_2, products_1, products_1_1, p, e_6_1;
    var e_6, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                col = mongodb.collection("products");
                cursor = col.find({});
                return [4 /*yield*/, cursor.toArray()];
            case 1:
                products = _b.sent();
                variantCol = mongodb.collection("productvariants");
                maRepo = queryRunner.manager.getRepository(money_amount_1.MoneyAmount);
                optValRepo = queryRunner.manager.getRepository(product_option_value_1.ProductOptionValue);
                optRepo = queryRunner.manager.getRepository(product_option_1.ProductOption);
                varRepo = queryRunner.manager.getCustomRepository(product_variant_1.ProductVariantRepository);
                prodRepo = queryRunner.manager.getCustomRepository(product_1.ProductRepository);
                profileRepo = queryRunner.manager.getCustomRepository(shipping_profile_2.ShippingProfileRepository);
                return [4 /*yield*/, profileRepo.findOne({ type: "default" })];
            case 2:
                defProf = _b.sent();
                return [4 /*yield*/, profileRepo.findOne({ type: "gift_card" })];
            case 3:
                gcProf = _b.sent();
                _loop_2 = function (p) {
                    var newOptions, varCur, mongoVariants, newVariants, newProd;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, Promise.all(p.options.map(function (o) {
                                    var newO = optRepo.create({
                                        id: "".concat(o._id),
                                        title: o.title,
                                    });
                                    return optRepo.save(newO);
                                }))];
                            case 1:
                                newOptions = _c.sent();
                                varCur = variantCol.find({
                                    _id: { $in: p.variants.map(function (id) { return new mongodb_1.default.ObjectID(id); }) },
                                });
                                return [4 /*yield*/, varCur.toArray()];
                            case 2:
                                mongoVariants = _c.sent();
                                return [4 /*yield*/, Promise.all(mongoVariants.map(function (v) {
                                        var newV = varRepo.create({
                                            id: "".concat(v._id),
                                            title: v.title,
                                            barcode: v.ean,
                                            ean: v.ean,
                                            sku: v.sku,
                                            manage_inventory: v.manage_inventory,
                                            allow_backorder: v.allow_backorder,
                                            inventory_quantity: v.inventory_quantity,
                                            options: v.options.map(function (o, idx) {
                                                var opt = newOptions[idx];
                                                return optValRepo.create({
                                                    value: o.value,
                                                    option: opt,
                                                });
                                            }),
                                            prices: v.prices.map(function (p) {
                                                return maRepo.create({
                                                    currency_code: p.currency_code.toLowerCase(),
                                                    amount: Math.round(p.amount * 100),
                                                });
                                            }),
                                            hs_code: v.metadata && v.metadata.hs_code,
                                            origin_country: v.metadata && v.metadata.origin_country,
                                            metadata: v.metadata && {
                                                alternative_size: v.metadata.alternative_size,
                                                color: v.metadata.color,
                                            },
                                        });
                                        return newV;
                                    }))];
                            case 3:
                                newVariants = _c.sent();
                                newProd = prodRepo.create({
                                    id: "".concat(p._id),
                                    title: p.title,
                                    tags: p.tags || null,
                                    description: p.description,
                                    handle: p.handle,
                                    is_giftcard: p.is_giftcard,
                                    thumbnail: p.thumbnail,
                                    profile: p.is_giftcard ? gcProf : defProf,
                                    options: newOptions,
                                    variants: newVariants,
                                });
                                return [4 /*yield*/, prodRepo.save(newProd)];
                            case 4:
                                _c.sent();
                                return [2 /*return*/];
                        }
                    });
                };
                _b.label = 4;
            case 4:
                _b.trys.push([4, 9, 10, 11]);
                products_1 = __values(products), products_1_1 = products_1.next();
                _b.label = 5;
            case 5:
                if (!!products_1_1.done) return [3 /*break*/, 8];
                p = products_1_1.value;
                return [5 /*yield**/, _loop_2(p)];
            case 6:
                _b.sent();
                _b.label = 7;
            case 7:
                products_1_1 = products_1.next();
                return [3 /*break*/, 5];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_6_1 = _b.sent();
                e_6 = { error: e_6_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (products_1_1 && !products_1_1.done && (_a = products_1.return)) _a.call(products_1);
                }
                finally { if (e_6) throw e_6.error; }
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}); };
var createDiscount = function (mongodb, queryRunner, d) { return __awaiter(void 0, void 0, void 0, function () {
    var rcol, ruleRepo, gcRepo, discountRepo, regRepo, rcur, mongoRegs, region, newD, rcur, mongoRegs, regions, newD;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rcol = mongodb.collection("regions");
                ruleRepo = queryRunner.manager.getRepository(discount_rule_1.DiscountRule);
                gcRepo = queryRunner.manager.getCustomRepository(gift_card_2.GiftCardRepository);
                discountRepo = queryRunner.manager.getCustomRepository(discount_2.DiscountRepository);
                regRepo = queryRunner.manager.getCustomRepository(region_1.RegionRepository);
                if (!d.is_giftcard) return [3 /*break*/, 3];
                rcur = rcol.find({
                    _id: mongodb_1.default.ObjectID(d.regions[0]),
                });
                return [4 /*yield*/, rcur.toArray()];
            case 1:
                mongoRegs = _a.sent();
                return [4 /*yield*/, regRepo.findOne({ name: mongoRegs[0].name })];
            case 2:
                region = _a.sent();
                newD = gcRepo.create({
                    id: "".concat(d._id),
                    code: d.code,
                    is_disabled: d.disabled,
                    value: !!d.original_amount ? Math.round(d.original_amount * 100) : 0,
                    balance: Math.round(d.discount_rule.value * 100),
                    region: region,
                });
                return [2 /*return*/, gcRepo.save(newD)];
            case 3:
                rcur = rcol.find({
                    _id: { $in: d.regions.map(function (id) { return mongodb_1.default.ObjectID(id); }) },
                });
                return [4 /*yield*/, rcur.toArray()];
            case 4:
                mongoRegs = _a.sent();
                return [4 /*yield*/, regRepo.find({
                        id: (0, typeorm_1.In)(mongoRegs.map(function (r) { return "".concat(r._id); })),
                    })];
            case 5:
                regions = _a.sent();
                newD = discountRepo.create({
                    id: "".concat(d._id),
                    code: d.code,
                    is_dynamic: !!d.is_dynamic,
                    rule: ruleRepo.create({
                        description: d.discount_rule.description,
                        type: d.discount_rule.type,
                        allocation: d.discount_rule.allocation,
                        value: d.discount_rule.type === "percentage"
                            ? d.discount_rule.value
                            : Math.round(d.discount_rule.value * 100),
                        usage_limit: d.discount_rule.usage_limit,
                    }),
                    is_disabled: d.disabled,
                    regions: regions,
                });
                return [2 /*return*/, discountRepo.save(newD)];
        }
    });
}); };
/**
 * Migrates discounts
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateDiscounts = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var dcol, dcur, discounts, discounts_1, discounts_1_1, d, e_7_1;
    var e_7, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                dcol = mongodb.collection("discounts");
                dcur = dcol.find({});
                return [4 /*yield*/, dcur.toArray()];
            case 1:
                discounts = _b.sent();
                _b.label = 2;
            case 2:
                _b.trys.push([2, 7, 8, 9]);
                discounts_1 = __values(discounts), discounts_1_1 = discounts_1.next();
                _b.label = 3;
            case 3:
                if (!!discounts_1_1.done) return [3 /*break*/, 6];
                d = discounts_1_1.value;
                return [4 /*yield*/, createDiscount(mongodb, queryRunner, d)];
            case 4:
                _b.sent();
                _b.label = 5;
            case 5:
                discounts_1_1 = discounts_1.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_7_1 = _b.sent();
                e_7 = { error: e_7_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (discounts_1_1 && !discounts_1_1.done && (_a = discounts_1.return)) _a.call(discounts_1);
                }
                finally { if (e_7) throw e_7.error; }
                return [7 /*endfinally*/];
            case 9: return [4 /*yield*/, migrateDynamicDiscounts(mongodb, queryRunner)];
            case 10:
                _b.sent();
                return [2 /*return*/];
        }
    });
}); };
/**
 * Migrates dynamic discounts
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateDynamicDiscounts = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var dcol, dyncol, dcur, dynamicCodes, discountRepo, mongoV, visited, toSave, dynamicCodes_1, dynamicCodes_1_1, d, disc, discount, pare, newD, e_8_1;
    var e_8, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                dcol = mongodb.collection("discounts");
                dyncol = mongodb.collection("dynamicdiscountcodes");
                dcur = dyncol.find({});
                return [4 /*yield*/, dcur.toArray()];
            case 1:
                dynamicCodes = _b.sent();
                discountRepo = queryRunner.manager.getCustomRepository(discount_2.DiscountRepository);
                mongoV = {};
                visited = {};
                toSave = [];
                _b.label = 2;
            case 2:
                _b.trys.push([2, 12, 13, 14]);
                dynamicCodes_1 = __values(dynamicCodes), dynamicCodes_1_1 = dynamicCodes_1.next();
                _b.label = 3;
            case 3:
                if (!!dynamicCodes_1_1.done) return [3 /*break*/, 11];
                d = dynamicCodes_1_1.value;
                disc = void 0;
                if (!mongoV[d.discount_id]) return [3 /*break*/, 4];
                disc = mongoV[d.discount_id];
                return [3 /*break*/, 6];
            case 4: return [4 /*yield*/, dcol.findOne({ _id: mongodb_1.default.ObjectID(d.discount_id) })];
            case 5:
                disc = _b.sent();
                mongoV[d.discount_id] = disc;
                _b.label = 6;
            case 6:
                discount = void 0;
                if (!visited[disc.code]) return [3 /*break*/, 7];
                discount = visited[disc.code];
                return [3 /*break*/, 9];
            case 7: return [4 /*yield*/, discountRepo.findOne({ code: disc.code })];
            case 8:
                pare = _b.sent();
                discount = pare;
                visited[disc.code] = pare;
                _b.label = 9;
            case 9:
                newD = discountRepo.create({
                    code: d.code,
                    is_dynamic: true,
                    is_disabled: d.disabled,
                    parent_discount: discount,
                    rule_id: discount.rule_id,
                });
                toSave.push(newD);
                _b.label = 10;
            case 10:
                dynamicCodes_1_1 = dynamicCodes_1.next();
                return [3 /*break*/, 3];
            case 11: return [3 /*break*/, 14];
            case 12:
                e_8_1 = _b.sent();
                e_8 = { error: e_8_1 };
                return [3 /*break*/, 14];
            case 13:
                try {
                    if (dynamicCodes_1_1 && !dynamicCodes_1_1.done && (_a = dynamicCodes_1.return)) _a.call(dynamicCodes_1);
                }
                finally { if (e_8) throw e_8.error; }
                return [7 /*endfinally*/];
            case 14: return [2 /*return*/, discountRepo.save(toSave)];
        }
    });
}); };
/**
 * Migrates customers
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateCustomers = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var col, cur, customers, customerRepo, toSave, _loop_3, customers_1, customers_1_1, c;
    var e_9, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                col = mongodb.collection("customers");
                cur = col.find({});
                return [4 /*yield*/, cur.toArray()];
            case 1:
                customers = _b.sent();
                customerRepo = queryRunner.manager.getRepository(customer_1.Customer);
                toSave = [];
                _loop_3 = function (c) {
                    if (toSave.find(function (s) { return s.email === c.email.toLowerCase(); })) {
                        return "continue";
                    }
                    var newC = customerRepo.create({
                        id: "".concat(c._id),
                        email: c.email.toLowerCase(),
                        first_name: c.first_name,
                        last_name: c.last_name,
                        phone: c.phone,
                        has_account: c.has_account,
                        password_hash: c.password_hash,
                        metadata: c.metadata,
                    });
                    toSave.push(newC);
                };
                try {
                    for (customers_1 = __values(customers), customers_1_1 = customers_1.next(); !customers_1_1.done; customers_1_1 = customers_1.next()) {
                        c = customers_1_1.value;
                        _loop_3(c);
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (customers_1_1 && !customers_1_1.done && (_a = customers_1.return)) _a.call(customers_1);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
                return [2 /*return*/, customerRepo.save(toSave, { chunk: 1000 })];
        }
    });
}); };
/**
 * Migrates orders
 * @param {MongoDb} mongodb
 * @param {QueryRunner} queryRunner
 */
var migrateOrders = function (mongodb, queryRunner) { return __awaiter(void 0, void 0, void 0, function () {
    var swapCol, col, cur, orders, customerRepo, orderRepo, lineItemRepo, fulItemRepo, retItemRepo, fulfillmentRepo, paymentRepo, refundRepo, returnRepo, gcRepo, swapRepo, discountRepo, methodRepo, optionRepo, addressRepo, profileRepo, fulProvRepo, paymentsToSave, refundsToSave, returnsToSave, swapsToSave, shippingMethodsToSave, lineItemsToSave, ordersToSave, giftCardsToSave, discountsToSave, fulfillToSave, _loop_4, orders_1, orders_1_1, o, e_10_1, newOs, orders_2, orders_2_1, o, e_11_1, last;
    var e_10, _a, e_11, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                swapCol = mongodb.collection("swaps");
                col = mongodb.collection("orders");
                cur = col.find({});
                return [4 /*yield*/, cur.toArray()];
            case 1:
                orders = _c.sent();
                customerRepo = queryRunner.manager.getRepository(customer_1.Customer);
                orderRepo = queryRunner.manager.getRepository(order_1.Order);
                lineItemRepo = queryRunner.manager.getRepository(line_item_1.LineItem);
                fulItemRepo = queryRunner.manager.getRepository(fulfillment_item_1.FulfillmentItem);
                retItemRepo = queryRunner.manager.getRepository(return_item_1.ReturnItem);
                fulfillmentRepo = queryRunner.manager.getRepository(fulfillment_1.Fulfillment);
                paymentRepo = queryRunner.manager.getRepository(payment_1.Payment);
                refundRepo = queryRunner.manager.getRepository(refund_1.Refund);
                returnRepo = queryRunner.manager.getRepository(return_1.Return);
                gcRepo = queryRunner.manager.getRepository(gift_card_1.GiftCard);
                swapRepo = queryRunner.manager.getRepository(swap_1.Swap);
                discountRepo = queryRunner.manager.getRepository(discount_1.Discount);
                methodRepo = queryRunner.manager.getRepository(shipping_method_1.ShippingMethod);
                optionRepo = queryRunner.manager.getRepository(shipping_option_1.ShippingOption);
                addressRepo = queryRunner.manager.getRepository(address_3.Address);
                profileRepo = queryRunner.manager.getRepository(shipping_profile_1.ShippingProfile);
                fulProvRepo = queryRunner.manager.getRepository(fulfillment_provider_1.FulfillmentProvider);
                paymentsToSave = [];
                refundsToSave = [];
                returnsToSave = [];
                swapsToSave = [];
                shippingMethodsToSave = [];
                lineItemsToSave = [];
                ordersToSave = [];
                giftCardsToSave = [];
                discountsToSave = [];
                fulfillToSave = [];
                _loop_4 = function (o) {
                    var createShippingMethod, _d, _e, m, method, e_12_1, customer, n, createLineItem, _f, _g, li, lineitem, giftCards, discounts, _h, _j, d, gc_1, disc, e_13_1, address, nOrder, createFulfillment, _k, _l, f, ful, refunds, totalRefund, _m, _o, r, reason, createReturn, _p, _q, r, ret, e_14_1, swapCur, oSwaps, oSwaps_1, oSwaps_1_1, s, _r, _s, li, toCreate, address_4, _t, _u, _v, _w, f, newly, e_15_1, amount;
                    var e_12, _x, e_16, _y, e_13, _z, e_17, _0, e_18, _1, e_14, _2, e_15, _3, e_19, _4, _5, e_20, _6;
                    return __generator(this, function (_7) {
                        switch (_7.label) {
                            case 0:
                                createShippingMethod = function (m) { return __awaiter(void 0, void 0, void 0, function () {
                                    var shippingOption, profile, provider, newly_1, newly;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, optionRepo.findOne({
                                                    id: "".concat(m._id),
                                                })];
                                            case 1:
                                                shippingOption = _a.sent();
                                                if (!!shippingOption) return [3 /*break*/, 7];
                                                return [4 /*yield*/, profileRepo.findOne({ type: "default" })];
                                            case 2:
                                                profile = _a.sent();
                                                return [4 /*yield*/, fulProvRepo.findOne({ id: m.provider_id })];
                                            case 3:
                                                provider = _a.sent();
                                                if (!!provider) return [3 /*break*/, 5];
                                                newly_1 = fulProvRepo.create({
                                                    id: m.provider_id,
                                                    is_installed: false,
                                                });
                                                return [4 /*yield*/, fulProvRepo.save(newly_1)];
                                            case 4:
                                                provider = _a.sent();
                                                _a.label = 5;
                                            case 5:
                                                newly = optionRepo.create({
                                                    name: m.name,
                                                    region_id: o.region_id,
                                                    profile_id: profile.id,
                                                    price_type: "flat_rate",
                                                    amount: Math.round(m.price * 100),
                                                    data: m.data,
                                                    is_return: false,
                                                    deleted_at: new Date(),
                                                    provider: provider,
                                                });
                                                return [4 /*yield*/, optionRepo.save(newly)];
                                            case 6:
                                                shippingOption = _a.sent();
                                                _a.label = 7;
                                            case 7: return [2 /*return*/, methodRepo.create({
                                                    order_id: "".concat(o._id),
                                                    shipping_option_id: shippingOption.id,
                                                    price: Math.round(m.price * 100),
                                                    data: m.data,
                                                })];
                                        }
                                    });
                                }); };
                                _7.label = 1;
                            case 1:
                                _7.trys.push([1, 6, 7, 8]);
                                _d = (e_12 = void 0, __values(o.shipping_methods)), _e = _d.next();
                                _7.label = 2;
                            case 2:
                                if (!!_e.done) return [3 /*break*/, 5];
                                m = _e.value;
                                return [4 /*yield*/, createShippingMethod(m)];
                            case 3:
                                method = _7.sent();
                                shippingMethodsToSave.push(method);
                                _7.label = 4;
                            case 4:
                                _e = _d.next();
                                return [3 /*break*/, 2];
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                e_12_1 = _7.sent();
                                e_12 = { error: e_12_1 };
                                return [3 /*break*/, 8];
                            case 7:
                                try {
                                    if (_e && !_e.done && (_x = _d.return)) _x.call(_d);
                                }
                                finally { if (e_12) throw e_12.error; }
                                return [7 /*endfinally*/];
                            case 8: return [4 /*yield*/, customerRepo.findOne({ email: o.email.toLowerCase() })];
                            case 9:
                                customer = _7.sent();
                                if (!!customer) return [3 /*break*/, 11];
                                n = customerRepo.create({
                                    email: o.email.toLowerCase(),
                                });
                                return [4 /*yield*/, customerRepo.save(n)];
                            case 10:
                                customer = _7.sent();
                                _7.label = 11;
                            case 11:
                                createLineItem = function (li, custom) {
                                    if (custom === void 0) { custom = {}; }
                                    var fulfilled_quantity = Math.min(li.fulfilled_quantity || 0, li.quantity);
                                    var shipped_quantity = Math.min(li.fulfilled_quantity || 0, li.shipped_quantity || 0);
                                    var returned_quantity = Math.min(li.shipped_quantity || 0, li.returned_quantity || 0);
                                    return lineItemRepo.create(__assign(__assign({}, custom), { id: "".concat(li._id), title: li.title, description: li.description, quantity: li.quantity, is_giftcard: !!li.is_giftcard, should_merge: !!li.should_merge, allow_discounts: !li.no_discount, thumbnail: li.thumbnail, unit_price: Math.round(li.content.unit_price * 100), variant_id: li.content.variant._id ? "".concat(li.content.variant._id) : null, fulfilled_quantity: fulfilled_quantity, shipped_quantity: shipped_quantity, returned_quantity: returned_quantity, metadata: li.metadata }));
                                };
                                try {
                                    for (_f = (e_16 = void 0, __values(o.items)), _g = _f.next(); !_g.done; _g = _f.next()) {
                                        li = _g.value;
                                        lineitem = createLineItem(li, {
                                            order_id: "".concat(o._id),
                                        });
                                        lineItemsToSave.push(lineitem);
                                    }
                                }
                                catch (e_16_1) { e_16 = { error: e_16_1 }; }
                                finally {
                                    try {
                                        if (_g && !_g.done && (_y = _f.return)) _y.call(_f);
                                    }
                                    finally { if (e_16) throw e_16.error; }
                                }
                                giftCards = [];
                                discounts = [];
                                _7.label = 12;
                            case 12:
                                _7.trys.push([12, 23, 24, 25]);
                                _h = (e_13 = void 0, __values(o.discounts)), _j = _h.next();
                                _7.label = 13;
                            case 13:
                                if (!!_j.done) return [3 /*break*/, 22];
                                d = _j.value;
                                if (!d.is_giftcard) return [3 /*break*/, 17];
                                return [4 /*yield*/, gcRepo.findOne({ code: d.code })];
                            case 14:
                                gc_1 = _7.sent();
                                if (!!gc_1) return [3 /*break*/, 16];
                                return [4 /*yield*/, createDiscount(mongodb, queryRunner, d)];
                            case 15:
                                gc_1 = _7.sent();
                                _7.label = 16;
                            case 16:
                                giftCards.push(gc_1);
                                return [3 /*break*/, 21];
                            case 17: return [4 /*yield*/, discountRepo.findOne({ code: d.code })];
                            case 18:
                                disc = _7.sent();
                                if (!!disc) return [3 /*break*/, 20];
                                return [4 /*yield*/, createDiscount(mongodb, queryRunner, d)];
                            case 19:
                                disc = _7.sent();
                                _7.label = 20;
                            case 20:
                                discounts.push(disc);
                                _7.label = 21;
                            case 21:
                                _j = _h.next();
                                return [3 /*break*/, 13];
                            case 22: return [3 /*break*/, 25];
                            case 23:
                                e_13_1 = _7.sent();
                                e_13 = { error: e_13_1 };
                                return [3 /*break*/, 25];
                            case 24:
                                try {
                                    if (_j && !_j.done && (_z = _h.return)) _z.call(_h);
                                }
                                finally { if (e_13) throw e_13.error; }
                                return [7 /*endfinally*/];
                            case 25:
                                address = addressRepo.create({
                                    customer: customer,
                                    first_name: o.shipping_address.first_name,
                                    last_name: o.shipping_address.last_name,
                                    address_1: o.shipping_address.address_1,
                                    address_2: o.shipping_address.address_2,
                                    city: o.shipping_address.city,
                                    country_code: o.shipping_address.country_code.toLowerCase(),
                                    province: o.shipping_address.province,
                                    postal_code: o.shipping_address.postal_code,
                                    phone: o.shipping_address.phone,
                                });
                                nOrder = orderRepo.create({
                                    id: "".concat(o._id),
                                    display_id: o.display_id,
                                    tax_rate: o.tax_rate * 100,
                                    currency_code: o.currency_code.toLowerCase(),
                                    email: o.email.toLowerCase(),
                                    status: o.status,
                                    fulfillment_status: o.fulfillment_status,
                                    payment_status: o.payment_status,
                                    shipping_address: address,
                                    billing_address: address,
                                    // shipping_methods: shippingMethods,
                                    // items: lineItems,
                                    gift_cards: giftCards,
                                    region_id: "".concat(o.region_id),
                                    customer: customer,
                                    discounts: discounts,
                                    created_at: new Date(parseInt(o.created)),
                                    canceled_at: o.status === "canceled" ? new Date() : null,
                                });
                                ordersToSave.push(nOrder);
                                createFulfillment = function (f, custom) {
                                    if (custom === void 0) { custom = {}; }
                                    if (!f || !f._id) {
                                        console.log("found empty");
                                    }
                                    var items = f.items.map(function (fi) {
                                        return fulItemRepo.create({
                                            item_id: "".concat(fi._id),
                                            quantity: fi.quantity,
                                        });
                                    });
                                    var toCreate = __assign(__assign({ id: "".concat(f._id) }, custom), { items: items, provider_id: f.provider_id, tracking_numbers: f.tracking_numbers, data: {}, metadata: f.metadata, canceled_at: f.is_canceled ? new Date() : null, shipped_at: f.shipped_at ? new Date(parseInt(f.shipped_at)) : null });
                                    if (!!f.created) {
                                        toCreate.created_at = new Date(parseInt(f.created));
                                    }
                                    return fulfillmentRepo.create(toCreate);
                                };
                                try {
                                    for (_k = (e_17 = void 0, __values(o.fulfillments)), _l = _k.next(); !_l.done; _l = _k.next()) {
                                        f = _l.value;
                                        if (!f || !f._id) {
                                            continue;
                                        }
                                        ful = createFulfillment(f, { order_id: "".concat(o._id) });
                                        fulfillToSave.push(ful);
                                    }
                                }
                                catch (e_17_1) { e_17 = { error: e_17_1 }; }
                                finally {
                                    try {
                                        if (_l && !_l.done && (_0 = _k.return)) _0.call(_k);
                                    }
                                    finally { if (e_17) throw e_17.error; }
                                }
                                refunds = [];
                                totalRefund = 0;
                                try {
                                    for (_m = (e_18 = void 0, __values(o.refunds)), _o = _m.next(); !_o.done; _o = _m.next()) {
                                        r = _o.value;
                                        reason = r.reason || "return";
                                        totalRefund += r.amount;
                                        refundsToSave.push(refundRepo.create({
                                            order_id: "".concat(o._id),
                                            currency_code: o.currency_code.toLowerCase(),
                                            amount: Math.round(r.amount * 100),
                                            reason: reason,
                                            note: r.note,
                                            created_at: new Date(parseInt(r.created)),
                                        }));
                                    }
                                }
                                catch (e_18_1) { e_18 = { error: e_18_1 }; }
                                finally {
                                    try {
                                        if (_o && !_o.done && (_1 = _m.return)) _1.call(_m);
                                    }
                                    finally { if (e_18) throw e_18.error; }
                                }
                                createReturn = function (r, custom) {
                                    if (custom === void 0) { custom = {}; }
                                    return __awaiter(void 0, void 0, void 0, function () {
                                        var m, method, shippingOption, profile, provider, newly_2, newly, items;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    m = r.shipping_method;
                                                    if (!(m && m.name)) return [3 /*break*/, 8];
                                                    return [4 /*yield*/, optionRepo.findOne({
                                                            name: m.name,
                                                            region_id: o.region_id,
                                                        })];
                                                case 1:
                                                    shippingOption = _a.sent();
                                                    if (!!shippingOption) return [3 /*break*/, 7];
                                                    return [4 /*yield*/, profileRepo.findOne({ type: "default" })];
                                                case 2:
                                                    profile = _a.sent();
                                                    return [4 /*yield*/, fulProvRepo.findOne({ id: m.provider_id })];
                                                case 3:
                                                    provider = _a.sent();
                                                    if (!!provider) return [3 /*break*/, 5];
                                                    newly_2 = fulProvRepo.create({
                                                        id: m.provider_id,
                                                        is_installed: false,
                                                    });
                                                    return [4 /*yield*/, fulProvRepo.save(newly_2)];
                                                case 4:
                                                    provider = _a.sent();
                                                    _a.label = 5;
                                                case 5:
                                                    newly = optionRepo.create({
                                                        name: m.name,
                                                        region_id: o.region_id,
                                                        profile_id: profile.id,
                                                        price_type: "flat_rate",
                                                        amount: Math.round(m.price * 100),
                                                        data: m.data,
                                                        is_return: true,
                                                        deleted_at: new Date(),
                                                        provider: provider,
                                                    });
                                                    return [4 /*yield*/, optionRepo.save(newly)];
                                                case 6:
                                                    shippingOption = _a.sent();
                                                    _a.label = 7;
                                                case 7:
                                                    method = methodRepo.create({
                                                        shipping_option_id: shippingOption.id,
                                                        price: Math.round(m.price * 100),
                                                        data: m.data,
                                                    });
                                                    _a.label = 8;
                                                case 8:
                                                    items = r.items.map(function (raw) {
                                                        //const ri = o.items.find(i => i._id.equals(raw.item_id))
                                                        //const original = or.items.find(
                                                        //  li => li.title === ri.title && li.description === ri.description
                                                        //)
                                                        return retItemRepo.create({
                                                            item_id: raw.item_id,
                                                            quantity: raw.quantity,
                                                            requested_quantity: raw.is_requested ? raw.quantity : null,
                                                            received_quantity: raw.is_registered ? raw.quantity : null,
                                                        });
                                                    });
                                                    return [2 /*return*/, returnRepo.create(__assign(__assign({ id: "".concat(r._id), status: r.status || "received" }, custom), { refund_amount: Math.round(r.refund_amount * 100), shipping_method: method, shipping_data: r.shipping_data, items: items, received_at: r.status === "received" ? new Date() : null, created_at: new Date(parseInt(r.created)), metadata: r.metadata }))];
                                            }
                                        });
                                    });
                                };
                                _7.label = 26;
                            case 26:
                                _7.trys.push([26, 31, 32, 33]);
                                _p = (e_14 = void 0, __values(o.returns)), _q = _p.next();
                                _7.label = 27;
                            case 27:
                                if (!!_q.done) return [3 /*break*/, 30];
                                r = _q.value;
                                if (r.items.length === 0) {
                                    return [3 /*break*/, 29];
                                }
                                return [4 /*yield*/, createReturn(r, { order_id: "".concat(o._id) })];
                            case 28:
                                ret = _7.sent();
                                returnsToSave.push(ret);
                                _7.label = 29;
                            case 29:
                                _q = _p.next();
                                return [3 /*break*/, 27];
                            case 30: return [3 /*break*/, 33];
                            case 31:
                                e_14_1 = _7.sent();
                                e_14 = { error: e_14_1 };
                                return [3 /*break*/, 33];
                            case 32:
                                try {
                                    if (_q && !_q.done && (_2 = _p.return)) _2.call(_p);
                                }
                                finally { if (e_14) throw e_14.error; }
                                return [7 /*endfinally*/];
                            case 33:
                                if (!o.swaps) return [3 /*break*/, 44];
                                swapCur = swapCol.find({
                                    _id: { $in: o.swaps.map(function (i) { return mongodb_1.default.ObjectID(i); }) },
                                });
                                return [4 /*yield*/, swapCur.toArray()];
                            case 34:
                                oSwaps = _7.sent();
                                if (!oSwaps.length) return [3 /*break*/, 44];
                                _7.label = 35;
                            case 35:
                                _7.trys.push([35, 42, 43, 44]);
                                oSwaps_1 = (e_15 = void 0, __values(oSwaps)), oSwaps_1_1 = oSwaps_1.next();
                                _7.label = 36;
                            case 36:
                                if (!!oSwaps_1_1.done) return [3 /*break*/, 41];
                                s = oSwaps_1_1.value;
                                if (!s.return)
                                    return [3 /*break*/, 40];
                                try {
                                    for (_r = (e_19 = void 0, __values(s.additional_items)), _s = _r.next(); !_s.done; _s = _r.next()) {
                                        li = _s.value;
                                        lineItemsToSave.push(createLineItem(li, { swap_id: "".concat(s._id) }));
                                    }
                                }
                                catch (e_19_1) { e_19 = { error: e_19_1 }; }
                                finally {
                                    try {
                                        if (_s && !_s.done && (_4 = _r.return)) _4.call(_r);
                                    }
                                    finally { if (e_19) throw e_19.error; }
                                }
                                _5 = {
                                    id: "".concat(s._id),
                                    order_id: "".concat(o._id),
                                    fulfillment_status: s.fulfillment_status === "shipped" ? "shipped" : "not_fulfilled",
                                    payment_status: s.payment_status
                                };
                                return [4 /*yield*/, Promise.all(s.shipping_methods.map(createShippingMethod))];
                            case 37:
                                toCreate = (_5.shipping_methods = _7.sent(),
                                    _5.created_at = new Date(parseInt(s.created)),
                                    _5);
                                if (s.shipping_address) {
                                    address_4 = addressRepo.create({
                                        customer: customer,
                                        first_name: s.shipping_address.first_name,
                                        last_name: s.shipping_address.last_name,
                                        address_1: s.shipping_address.address_1,
                                        address_2: s.shipping_address.address_2,
                                        city: s.shipping_address.city,
                                        country_code: s.shipping_address.country_code.toLowerCase(),
                                        province: s.shipping_address.province,
                                        postal_code: s.shipping_address.postal_code,
                                        phone: s.shipping_address.phone,
                                    });
                                    toCreate.shipping_address = address_4;
                                }
                                if (!s.return) return [3 /*break*/, 39];
                                _u = (_t = returnsToSave).push;
                                return [4 /*yield*/, createReturn(s.return, {
                                        swap_id: "".concat(s._id),
                                    })];
                            case 38:
                                _u.apply(_t, [_7.sent()]);
                                _7.label = 39;
                            case 39:
                                if (s.payment_method) {
                                    toCreate.payment = paymentRepo.create({
                                        amount: (s.payment_method.data && s.payment_method.data.amount) || 0,
                                        currency_code: s.currency_code.toLowerCase(),
                                        amount_refunded: 0,
                                        provider_id: o.payment_method.provider_id,
                                        data: o.payment_method.data,
                                        canceled_at: o.payment_status === "canceled" ? new Date() : null,
                                        captured_at: o.payment_status === "captured" ||
                                            o.payment_status === "refunded" ||
                                            o.payment_status === "partially"
                                            ? new Date()
                                            : null,
                                    });
                                }
                                if ((s.fulfillments && s.fulfillments.length) > 0) {
                                    try {
                                        for (_v = (e_20 = void 0, __values(s.fulfillments)), _w = _v.next(); !_w.done; _w = _v.next()) {
                                            f = _w.value;
                                            if (!f || !f._id) {
                                                continue;
                                            }
                                            fulfillToSave.push(createFulfillment(f, { swap_id: "".concat(s._id) }));
                                        }
                                    }
                                    catch (e_20_1) { e_20 = { error: e_20_1 }; }
                                    finally {
                                        try {
                                            if (_w && !_w.done && (_6 = _v.return)) _6.call(_v);
                                        }
                                        finally { if (e_20) throw e_20.error; }
                                    }
                                }
                                newly = swapRepo.create(toCreate);
                                swapsToSave.push(newly);
                                _7.label = 40;
                            case 40:
                                oSwaps_1_1 = oSwaps_1.next();
                                return [3 /*break*/, 36];
                            case 41: return [3 /*break*/, 44];
                            case 42:
                                e_15_1 = _7.sent();
                                e_15 = { error: e_15_1 };
                                return [3 /*break*/, 44];
                            case 43:
                                try {
                                    if (oSwaps_1_1 && !oSwaps_1_1.done && (_3 = oSwaps_1.return)) _3.call(oSwaps_1);
                                }
                                finally { if (e_15) throw e_15.error; }
                                return [7 /*endfinally*/];
                            case 44:
                                amount = o.payment_method.provider_id === "stripe"
                                    ? o.payment_method.data.amount
                                    : o.payment_method.data.order_amount ||
                                        (o.payment_method.data.amount &&
                                            o.payment_method.data.amount.value) ||
                                        0;
                                paymentsToSave.push(paymentRepo.create({
                                    order_id: "".concat(o._id),
                                    amount: amount,
                                    currency_code: o.currency_code.toLowerCase(),
                                    amount_refunded: Math.round(totalRefund * 100),
                                    provider_id: o.payment_method.provider_id,
                                    data: o.payment_method.data,
                                    canceled_at: o.payment_status === "canceled" ? new Date() : null,
                                    captured_at: o.payment_status === "captured" ||
                                        o.payment_status === "refunded" ||
                                        o.payment_status === "partially_refunded"
                                        ? new Date()
                                        : null,
                                }));
                                // await orderRepo.save(or)
                                if (o.display_id % 100 === 0) {
                                    console.log(o.display_id);
                                }
                                return [2 /*return*/];
                        }
                    });
                };
                _c.label = 2;
            case 2:
                _c.trys.push([2, 7, 8, 9]);
                orders_1 = __values(orders), orders_1_1 = orders_1.next();
                _c.label = 3;
            case 3:
                if (!!orders_1_1.done) return [3 /*break*/, 6];
                o = orders_1_1.value;
                return [5 /*yield**/, _loop_4(o)];
            case 4:
                _c.sent();
                _c.label = 5;
            case 5:
                orders_1_1 = orders_1.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_10_1 = _c.sent();
                e_10 = { error: e_10_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (orders_1_1 && !orders_1_1.done && (_a = orders_1.return)) _a.call(orders_1);
                }
                finally { if (e_10) throw e_10.error; }
                return [7 /*endfinally*/];
            case 9: return [4 /*yield*/, orderRepo.save(ordersToSave, { chunk: 1000 })];
            case 10:
                newOs = _c.sent();
                return [4 /*yield*/, swapRepo.save(swapsToSave, { chunk: 1000 })];
            case 11:
                _c.sent();
                return [4 /*yield*/, lineItemRepo.save(lineItemsToSave, { chunk: 1000 })];
            case 12:
                _c.sent();
                return [4 /*yield*/, methodRepo.save(shippingMethodsToSave, { chunk: 1000 })];
            case 13:
                _c.sent();
                return [4 /*yield*/, refundRepo.save(refundsToSave, { chunk: 1000 })];
            case 14:
                _c.sent();
                return [4 /*yield*/, returnRepo.save(returnsToSave, { chunk: 1000 })];
            case 15:
                _c.sent();
                return [4 /*yield*/, gcRepo.save(giftCardsToSave, { chunk: 1000 })];
            case 16:
                _c.sent();
                console.log("done with gcs");
                return [4 /*yield*/, discountRepo.save(discountsToSave, { chunk: 1000 })];
            case 17:
                _c.sent();
                console.log("done with discounts");
                return [4 /*yield*/, fulfillmentRepo.save(fulfillToSave, { chunk: 1000 })];
            case 18:
                _c.sent();
                _c.label = 19;
            case 19:
                _c.trys.push([19, 24, 25, 26]);
                orders_2 = __values(orders), orders_2_1 = orders_2.next();
                _c.label = 20;
            case 20:
                if (!!orders_2_1.done) return [3 /*break*/, 23];
                o = orders_2_1.value;
                return [4 /*yield*/, queryRunner.query("UPDATE \"order\" SET display_id=$1 WHERE id=$2", [
                        o.display_id,
                        "".concat(o._id),
                    ])];
            case 21:
                _c.sent();
                _c.label = 22;
            case 22:
                orders_2_1 = orders_2.next();
                return [3 /*break*/, 20];
            case 23: return [3 /*break*/, 26];
            case 24:
                e_11_1 = _c.sent();
                e_11 = { error: e_11_1 };
                return [3 /*break*/, 26];
            case 25:
                try {
                    if (orders_2_1 && !orders_2_1.done && (_b = orders_2.return)) _b.call(orders_2);
                }
                finally { if (e_11) throw e_11.error; }
                return [7 /*endfinally*/];
            case 26:
                last = orders[orders.length - 1];
                return [4 /*yield*/, queryRunner.query("ALTER SEQUENCE order_display_id_seq RESTART WITH ".concat(parseInt(last.display_id) + 1))];
            case 27:
                _c.sent();
                return [2 /*return*/];
        }
    });
}); };
var migrate = function () { return __awaiter(void 0, void 0, void 0, function () {
    var root, configModule, _a, mongo_url, database_type, database_url, database_extra, mPath, client, db, sqlConnection, queryRunner, error, err_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                root = path_1.default.resolve(".");
                configModule = (0, medusa_core_utils_1.getConfigFile)(root, "medusa-config").configModule;
                _a = configModule.projectConfig, mongo_url = _a.mongo_url, database_type = _a.database_type, database_url = _a.database_url, database_extra = _a.database_extra;
                if (!mongo_url) {
                    throw new Error("Cannot run migration script without a mongo_url in medusa-config");
                }
                if (!database_type || !database_url) {
                    throw new Error("Cannot run migration script without a database_type and database_url in medusa-config");
                }
                mPath = path_1.default.resolve(__dirname, "../models");
                console.log(chalk_1.default.blue("MONGO:"), "Connecting to ", mongo_url);
                return [4 /*yield*/, mongodb_1.default.MongoClient.connect(mongo_url, {
                        useNewUrlParser: true,
                        useUnifiedTopology: true,
                    })];
            case 1:
                client = _b.sent();
                db = client.db(client.dbName);
                console.log(chalk_1.default.green("MONGO:"), "Connecting created");
                console.log(chalk_1.default.blue("SQL:"), "Connecting to ", database_url);
                return [4 /*yield*/, (0, typeorm_1.createConnection)({
                        type: database_type,
                        url: database_url,
                        extra: database_extra || {},
                        entities: ["".concat(mPath, "/*.js")],
                        // logging: true,
                    })];
            case 2:
                sqlConnection = _b.sent();
                queryRunner = sqlConnection.createQueryRunner();
                return [4 /*yield*/, queryRunner.connect()];
            case 3:
                _b.sent();
                return [4 /*yield*/, queryRunner.startTransaction()];
            case 4:
                _b.sent();
                console.log(chalk_1.default.green("SQL:"), "Connecting created");
                _b.label = 5;
            case 5:
                _b.trys.push([5, 40, 42, 44]);
                return [4 /*yield*/, queryRunner.query("UPDATE country SET region_id=NULL WHERE iso_2 IS NOT NULL")];
            case 6:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM store WHERE id IS NOT NULL")];
            case 7:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM return_item WHERE return_id IS NOT NULL")];
            case 8:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM fulfillment_item WHERE fulfillment_id IS NOT NULL")];
            case 9:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM line_item WHERE id IS NOT NULL")];
            case 10:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM gift_card WHERE code IS NOT NULL")];
            case 11:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM discount WHERE code IS NOT NULL")];
            case 12:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM discount_rule WHERE type IS NOT NULL")];
            case 13:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM money_amount WHERE currency_code IS NOT NULL")];
            case 14:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM product_option_value WHERE value IS NOT NULL")];
            case 15:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM product_option WHERE title IS NOT NULL")];
            case 16:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM product_variant WHERE title IS NOT NULL")];
            case 17:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM product WHERE title is NOT NULL")];
            case 18:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM shipping_option_requirement WHERE id IS NOT NULL")];
            case 19:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM shipping_method WHERE id IS NOT NULL")];
            case 20:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM shipping_option WHERE name IS NOT NULL")];
            case 21:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM order_discounts WHERE order_id IS NOT NULL")];
            case 22:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM payment WHERE id IS NOT NULL")];
            case 23:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM fulfillment WHERE id IS NOT NULL")];
            case 24:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM return WHERE id IS NOT NULL")];
            case 25:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM swap WHERE id IS NOT NULL")];
            case 26:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM refund WHERE id IS NOT NULL")];
            case 27:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM \"order\" WHERE id IS NOT NULL")];
            case 28:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM address WHERE id IS NOT NULL")];
            case 29:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM region WHERE name IS NOT NULL")];
            case 30:
                _b.sent();
                return [4 /*yield*/, queryRunner.query("DELETE FROM customer WHERE email IS NOT NULL")];
            case 31:
                _b.sent();
                return [4 /*yield*/, migrateStore(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Store migrated");
                    })];
            case 32:
                _b.sent();
                return [4 /*yield*/, migrateRegions(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Regions migrated");
                    })];
            case 33:
                _b.sent();
                return [4 /*yield*/, migrateShippingOptions(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Shipping Options Migrated");
                    })];
            case 34:
                _b.sent();
                return [4 /*yield*/, migrateProducts(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Products migrated");
                    })];
            case 35:
                _b.sent();
                return [4 /*yield*/, migrateDiscounts(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Discounts migrated");
                    })];
            case 36:
                _b.sent();
                return [4 /*yield*/, migrateCustomers(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Customers migrated");
                    })];
            case 37:
                _b.sent();
                return [4 /*yield*/, migrateOrders(db, queryRunner).then(function () {
                        console.log(chalk_1.default.green("SUCCESS: "), "Orders migrated");
                    })];
            case 38:
                _b.sent();
                return [4 /*yield*/, queryRunner.commitTransaction()];
            case 39:
                _b.sent();
                return [3 /*break*/, 44];
            case 40:
                err_1 = _b.sent();
                return [4 /*yield*/, queryRunner.rollbackTransaction()];
            case 41:
                _b.sent();
                error = err_1;
                return [3 /*break*/, 44];
            case 42: return [4 /*yield*/, queryRunner.release()];
            case 43:
                _b.sent();
                return [7 /*endfinally*/];
            case 44:
                if (error) {
                    throw error;
                }
                return [2 /*return*/];
        }
    });
}); };
migrate()
    .then(function () {
    console.log("Migration complete");
    process.exit();
})
    .catch(function (err) {
    console.log(err);
    process.exit(1);
});
//# sourceMappingURL=mongo-sql-migration.js.map