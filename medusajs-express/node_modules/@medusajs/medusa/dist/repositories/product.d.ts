import { FindManyOptions, FindOperator, OrderByCondition, Repository } from "typeorm";
import { ProductTag } from "..";
import { Product } from "../models/product";
declare type DefaultWithoutRelations = Omit<FindManyOptions<Product>, "relations">;
declare type CustomOptions = {
    where?: DefaultWithoutRelations["where"] & {
        tags?: FindOperator<ProductTag>;
    };
    order?: OrderByCondition;
    skip?: number;
    take?: number;
    withDeleted?: boolean;
};
declare type FindWithRelationsOptions = CustomOptions;
export declare class ProductRepository extends Repository<Product> {
    private mergeEntitiesWithRelations;
    private queryProducts;
    private getGroupedRelations;
    private queryProductsWithIds;
    findWithRelationsAndCount(relations?: Array<keyof Product>, idsOrOptionsWithoutRelations?: FindWithRelationsOptions): Promise<[Product[], number]>;
    findWithRelations(relations?: Array<keyof Product>, idsOrOptionsWithoutRelations?: FindWithRelationsOptions, withDeleted?: boolean): Promise<Product[]>;
    findOneWithRelations(relations?: Array<keyof Product>, optionsWithoutRelations?: FindWithRelationsOptions): Promise<Product>;
}
export {};
