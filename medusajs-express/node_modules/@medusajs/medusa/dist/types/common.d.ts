import "reflect-metadata";
export declare type PartialPick<T, K extends keyof T> = {
    [P in K]?: T[P];
};
export declare type TotalField = "shipping_total" | "discount_total" | "tax_total" | "refunded_total" | "total" | "subtotal" | "refundable_amount" | "gift_card_total";
export interface FindConfig<Entity> {
    select?: (keyof Entity)[];
    skip?: number;
    take?: number;
    relations?: string[];
    order?: "ASC" | "DESC";
}
export declare type PaginatedResponse = {
    limit: number;
    offset: number;
    count: number;
};
export declare type DeleteResponse = {
    id: string;
    object: string;
    deleted: boolean;
};
export declare class DateComparisonOperator {
    lt?: Date;
    gt?: Date;
    gte?: Date;
    lte?: Date;
}
export declare class StringComparisonOperator {
    lt?: string;
    gt?: string;
    gte?: string;
    lte?: string;
}
export declare class NumericalComparisonOperator {
    lt?: number;
    gt?: number;
    gte?: number;
    lte?: number;
}
export declare class AddressPayload {
    first_name: string;
    last_name: string;
    phone: string;
    metadata: object;
    company: string;
    address_1: string;
    address_2: string;
    city: string;
    country_code: string;
    province: string;
    postal_code: string;
}
export declare class AddressCreatePayload {
    first_name: string;
    last_name: string;
    phone: string;
    metadata: object;
    company: string;
    address_1: string;
    address_2: string;
    city: string;
    country_code: string;
    province: string;
    postal_code: string;
}
