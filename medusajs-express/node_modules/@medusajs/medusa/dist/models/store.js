"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var currency_1 = require("./currency");
var Store = /** @class */ (function () {
    function Store() {
    }
    Store.prototype.beforeInsert = function () {
        var id = (0, ulid_1.ulid)();
        this.id = "store_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Store.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: "Medusa Store" }),
        __metadata("design:type", String)
    ], Store.prototype, "name", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: "usd" }),
        __metadata("design:type", String)
    ], Store.prototype, "default_currency_code", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return currency_1.Currency; }),
        (0, typeorm_1.JoinColumn)({ name: "default_currency_code", referencedColumnName: "code" }),
        __metadata("design:type", currency_1.Currency)
    ], Store.prototype, "default_currency", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return currency_1.Currency; }),
        (0, typeorm_1.JoinTable)({
            name: "store_currencies",
            joinColumn: {
                name: "store_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "currency_code",
                referencedColumnName: "code",
            },
        }),
        __metadata("design:type", Array)
    ], Store.prototype, "currencies", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Store.prototype, "swap_link_template", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Store.prototype, "payment_link_template", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Store.prototype, "invite_link_template", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Store.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Store.prototype, "updated_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Store.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Store.prototype, "beforeInsert", null);
    Store = __decorate([
        (0, typeorm_1.Entity)()
    ], Store);
    return Store;
}());
exports.Store = Store;
/**
 * @schema store
 * title: "Store"
 * description: "Holds settings for the Store, such as name, currencies, etc."
 * x-resourceId: store
 * properties:
 *   id:
 *     description: "The id of the Store. This value will be prefixed with `store_`."
 *     type: string
 *   name:
 *     description: "The name of the Store - this may be displayed to the Customer."
 *     type: string
 *   default_currency_code:
 *     description: "The default currency code used when no other currency code is specified."
 *     type: string
 *   currencies:
 *     description: "The currencies that are enabled for the Store."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/currency"
 *   swap_link_template:
 *     description: "A template to generate Swap links from use {{cart_id}} to include the Swap's `cart_id` in the link."
 *     type: string
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=store.js.map