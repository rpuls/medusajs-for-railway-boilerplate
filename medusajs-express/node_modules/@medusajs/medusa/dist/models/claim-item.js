"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimItem = exports.ClaimReason = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var line_item_1 = require("./line-item");
var claim_image_1 = require("./claim-image");
var claim_tag_1 = require("./claim-tag");
var claim_order_1 = require("./claim-order");
var product_variant_1 = require("./product-variant");
var ClaimReason;
(function (ClaimReason) {
    ClaimReason["MISSING_ITEM"] = "missing_item";
    ClaimReason["WRONG_ITEM"] = "wrong_item";
    ClaimReason["PRODUCTION_FAILURE"] = "production_failure";
    ClaimReason["OTHER"] = "other";
})(ClaimReason = exports.ClaimReason || (exports.ClaimReason = {}));
var ClaimItem = /** @class */ (function () {
    function ClaimItem() {
    }
    ClaimItem.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "citm_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return claim_image_1.ClaimImage; }, function (ci) { return ci.claim_item; }, { cascade: ["insert", "remove"] }),
        __metadata("design:type", Array)
    ], ClaimItem.prototype, "images", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "claim_order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return claim_order_1.ClaimOrder; }, function (co) { return co.claim_items; }),
        (0, typeorm_1.JoinColumn)({ name: "claim_order_id" }),
        __metadata("design:type", claim_order_1.ClaimOrder)
    ], ClaimItem.prototype, "claim_order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "item_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return line_item_1.LineItem; }),
        (0, typeorm_1.JoinColumn)({ name: "item_id" }),
        __metadata("design:type", line_item_1.LineItem)
    ], ClaimItem.prototype, "item", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "variant_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return product_variant_1.ProductVariant; }),
        (0, typeorm_1.JoinColumn)({ name: "variant_id" }),
        __metadata("design:type", product_variant_1.ProductVariant)
    ], ClaimItem.prototype, "variant", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "enum", enum: ClaimReason }),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "reason", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ClaimItem.prototype, "note", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int" }),
        __metadata("design:type", Number)
    ], ClaimItem.prototype, "quantity", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return claim_tag_1.ClaimTag; }, { cascade: ["insert"] }),
        (0, typeorm_1.JoinTable)({
            name: "claim_item_tags",
            joinColumn: {
                name: "item_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "tag_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], ClaimItem.prototype, "tags", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ClaimItem.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ClaimItem.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ClaimItem.prototype, "deleted_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], ClaimItem.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ClaimItem.prototype, "beforeInsert", null);
    ClaimItem = __decorate([
        (0, typeorm_1.Entity)()
    ], ClaimItem);
    return ClaimItem;
}());
exports.ClaimItem = ClaimItem;
/**
 * @schema claim_item
 * title: "Claim Item"
 * description: "Represents a claimed item along with information about the reasons for the claim."
 * x-resourceId: claim_item
 * properties:
 *   id:
 *     type: string
 *   images:
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/claim_image"
 *   claim_order_id:
 *     type: string
 *   item_id:
 *     type: string
 *   item:
 *     description: "The Line Item that the claim refers to"
 *     $ref: "#/components/schemas/line_item"
 *   variant_id:
 *     type: string
 *   variant:
 *     description: "The Product Variant that is claimed."
 *     $ref: "#/components/schemas/product_variant"
 *   reason:
 *     description: "The reason for the claim"
 *     type: string
 *     enum:
 *       - missing_item
 *       - wrong_item
 *       - production_failure
 *       - other
 *   note:
 *     description: "An optional note about the claim, for additional information"
 *     type: string
 *   quantity:
 *     description: "The quantity of the item that is being claimed; must be less than or equal to the amount purchased in the original order."
 *     type: integer
 *   tags:
 *     description: "User defined tags for easy filtering and grouping."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/claim_tag"
 *   created_at:
 *     type: string
 *     format: date-time
 *   updated_at:
 *     type: string
 *     format: date-time
 *   deleted_at:
 *     type: string
 *     format: date-time
 *   metadata:
 *     type: object
 */
//# sourceMappingURL=claim-item.js.map