"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Region = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var currency_1 = require("./currency");
var country_1 = require("./country");
var payment_provider_1 = require("./payment-provider");
var fulfillment_provider_1 = require("./fulfillment-provider");
var Region = /** @class */ (function () {
    function Region() {
    }
    Region.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "reg_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Region.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Region.prototype, "name", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Region.prototype, "currency_code", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return currency_1.Currency; }),
        (0, typeorm_1.JoinColumn)({ name: "currency_code", referencedColumnName: "code" }),
        __metadata("design:type", currency_1.Currency)
    ], Region.prototype, "currency", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "real" }),
        __metadata("design:type", Number)
    ], Region.prototype, "tax_rate", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Region.prototype, "tax_code", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return country_1.Country; }, function (c) { return c.region; }),
        __metadata("design:type", Array)
    ], Region.prototype, "countries", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return payment_provider_1.PaymentProvider; }, { eager: true, cascade: ['insert', 'update'] }),
        (0, typeorm_1.JoinTable)({
            name: "region_payment_providers",
            joinColumn: {
                name: "region_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "provider_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], Region.prototype, "payment_providers", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return fulfillment_provider_1.FulfillmentProvider; }, { eager: true, cascade: ['insert', 'update'] }),
        (0, typeorm_1.JoinTable)({
            name: "region_fulfillment_providers",
            joinColumn: {
                name: "region_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "provider_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], Region.prototype, "fulfillment_providers", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Region.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Region.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Region.prototype, "deleted_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Region.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Region.prototype, "beforeInsert", null);
    Region = __decorate([
        (0, typeorm_1.Entity)()
    ], Region);
    return Region;
}());
exports.Region = Region;
/**
 * @schema region
 * title: "Region"
 * description: "Regions hold settings for how Customers in a given geographical location shop. The is, for example, where currencies and tax rates are defined. A Region can consist of multiple countries to accomodate common shopping settings across countries."
 * x-resourceId: region
 * properties:
 *   id:
 *     description: "The id of the Region. This value will be prefixed with `reg_`."
 *     type: string
 *   name:
 *     description: "The name of the region as displayed to the customer. If the Region only has one country it is recommended to write the country name."
 *     type: string
 *   currency_code:
 *     description: "The 3 character ISO currency code that Customers will shop in in the Region."
 *     type: string
 *   tax_rate:
 *     description: "The tax rate that should be charged on purchases in the Region."
 *     type: number
 *   tax_code:
 *     description: "The tax code used on purchases in the Region. This may be used by other systems for accounting purposes."
 *     type: string
 *   countries:
 *     description: "The countries that are included in the Region."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/country"
 *   payment_providers:
 *     description: "The Payment Providers that can be used to process Payments in the Region."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/payment_provider"
 *   fulfillment_providers:
 *     description: "The Fulfillment Providers that can be used to fulfill orders in the Region."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/fulfillment_provider"
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   deleted_at:
 *     description: "The date with timezone at which the resource was deleted."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=region.js.map