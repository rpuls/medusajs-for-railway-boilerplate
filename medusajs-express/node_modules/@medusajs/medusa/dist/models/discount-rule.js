"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscountRule = exports.AllocationType = exports.DiscountRuleType = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var product_1 = require("./product");
var DiscountRuleType;
(function (DiscountRuleType) {
    DiscountRuleType["FIXED"] = "fixed";
    DiscountRuleType["PERCENTAGE"] = "percentage";
    DiscountRuleType["FREE_SHIPPING"] = "free_shipping";
})(DiscountRuleType = exports.DiscountRuleType || (exports.DiscountRuleType = {}));
var AllocationType;
(function (AllocationType) {
    AllocationType["TOTAL"] = "total";
    AllocationType["ITEM"] = "item";
})(AllocationType = exports.AllocationType || (exports.AllocationType = {}));
var DiscountRule = /** @class */ (function () {
    function DiscountRule() {
    }
    DiscountRule.prototype.beforeInsert = function () {
        var id = (0, ulid_1.ulid)();
        this.id = "dru_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], DiscountRule.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], DiscountRule.prototype, "description", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({
            type: "enum",
            enum: DiscountRuleType,
        }),
        __metadata("design:type", String)
    ], DiscountRule.prototype, "type", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", Number)
    ], DiscountRule.prototype, "value", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({
            type: "enum",
            enum: AllocationType,
            nullable: true,
        }),
        __metadata("design:type", String)
    ], DiscountRule.prototype, "allocation", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return product_1.Product; }, { cascade: true }),
        (0, typeorm_1.JoinTable)({
            name: "discount_rule_products",
            joinColumn: {
                name: "discount_rule_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "product_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], DiscountRule.prototype, "valid_for", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], DiscountRule.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], DiscountRule.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], DiscountRule.prototype, "deleted_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], DiscountRule.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DiscountRule.prototype, "beforeInsert", null);
    DiscountRule = __decorate([
        (0, typeorm_1.Entity)()
    ], DiscountRule);
    return DiscountRule;
}());
exports.DiscountRule = DiscountRule;
/**
 * @schema discount_rule
 * title: "Discount Rule"
 * description: "Holds the rules that governs how a Discount is calculated when applied to a Cart."
 * x-resourceId: discount_rule
 * properties:
 *   id:
 *     description: "The id of the Discount Rule. Will be prefixed by `dru_`."
 *     type: string
 *   type:
 *     description: "The type of the Discount, can be `fixed` for discounts that reduce the price by a fixed amount, `percentage` for percentage reductions or `free_shipping` for shipping vouchers."
 *     type: string
 *     enum:
 *       - fixed
 *       - percentage
 *       - free_shipping
 *   description:
 *     description: "A short description of the discount"
 *     type: string
 *   value:
 *     description: "The value that the discount represents; this will depend on the type of the discount"
 *     type: integer
 *   allocation:
 *     description: "The scope that the discount should apply to."
 *     type: string
 *     enum:
 *       - total
 *       - item
 *   valid_for:
 *     description: "A set of Products that the discount can be used for."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/product"
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   update_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   deleted_at:
 *     description: "The date with timezone at which the resource was deleted."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=discount-rule.js.map