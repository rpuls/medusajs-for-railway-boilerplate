"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShippingMethod = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var claim_order_1 = require("./claim-order");
var order_1 = require("./order");
var cart_1 = require("./cart");
var swap_1 = require("./swap");
var return_1 = require("./return");
var shipping_option_1 = require("./shipping-option");
var ShippingMethod = /** @class */ (function () {
    function ShippingMethod() {
    }
    ShippingMethod.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "sm_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "shipping_option_id", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return order_1.Order; }),
        (0, typeorm_1.JoinColumn)({ name: "order_id" }),
        __metadata("design:type", order_1.Order)
    ], ShippingMethod.prototype, "order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "claim_order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return claim_order_1.ClaimOrder; }),
        (0, typeorm_1.JoinColumn)({ name: "claim_order_id" }),
        __metadata("design:type", claim_order_1.ClaimOrder)
    ], ShippingMethod.prototype, "claim_order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "cart_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return cart_1.Cart; }),
        (0, typeorm_1.JoinColumn)({ name: "cart_id" }),
        __metadata("design:type", cart_1.Cart)
    ], ShippingMethod.prototype, "cart", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "swap_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return swap_1.Swap; }),
        (0, typeorm_1.JoinColumn)({ name: "swap_id" }),
        __metadata("design:type", swap_1.Swap)
    ], ShippingMethod.prototype, "swap", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ShippingMethod.prototype, "return_id", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return return_1.Return; }, function (ret) { return ret.shipping_method; }),
        (0, typeorm_1.JoinColumn)({ name: "return_id" }),
        __metadata("design:type", return_1.Return)
    ], ShippingMethod.prototype, "return_order", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return shipping_option_1.ShippingOption; }, { eager: true }),
        (0, typeorm_1.JoinColumn)({ name: "shipping_option_id" }),
        __metadata("design:type", shipping_option_1.ShippingOption)
    ], ShippingMethod.prototype, "shipping_option", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int" }),
        __metadata("design:type", Number)
    ], ShippingMethod.prototype, "price", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb" }),
        __metadata("design:type", Object)
    ], ShippingMethod.prototype, "data", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ShippingMethod.prototype, "beforeInsert", null);
    ShippingMethod = __decorate([
        (0, typeorm_1.Check)("\"claim_order_id\" IS NOT NULL OR \"order_id\" IS NOT NULL OR \"cart_id\" IS NOT NULL OR \"swap_id\" IS NOT NULL OR \"return_id\" IS NOT NULL"),
        (0, typeorm_1.Check)("\"price\" >= 0"),
        (0, typeorm_1.Entity)()
    ], ShippingMethod);
    return ShippingMethod;
}());
exports.ShippingMethod = ShippingMethod;
/**
 * @schema shipping_method
 * title: "Shipping Method"
 * description: "Shipping Methods represent a way in which an Order or Return can be shipped. Shipping Methods are built from a Shipping Option, but may contain additional details, that can be necessary for the Fulfillment Provider to handle the shipment."
 * x-resourceId: shipping_method
 * properties:
 *   id:
 *     description: "The id of the Shipping Method. This value will be prefixed with `sm_`."
 *     type: string
 *   shipping_option_id:
 *     description: "The id of the Shipping Option that the Shipping Method is built from."
 *     type: string
 *   shipping_option:
 *     description: "The Shipping Option that the Shipping Method is built from."
 *     anyOf:
 *       - $ref: "#/components/schemas/shipping_option"
 *   order_id:
 *     description: "The id of the Order that the Shipping Method is used on."
 *     type: string
 *   return_id:
 *     description: "The id of the Return that the Shipping Method is used on."
 *     type: string
 *   swap_id:
 *     description: "The id of the Swap that the Shipping Method is used on."
 *     type: string
 *   cart_id:
 *     description: "The id of the Cart that the Shipping Method is used on."
 *     type: string
 *   claim_order_id:
 *     description: "The id of the Claim that the Shipping Method is used on."
 *     type: string
 *   price:
 *     description: "The amount to charge for the Shipping Method. The currency of the price is defined by the Region that the Order that the Shipping Method belongs to is a part of."
 *     type: integer
 *   data:
 *     description: "Additional data that the Fulfillment Provider needs to fulfill the shipment. This is used in combination with the Shipping Options data, and may contain information such as a drop point id."
 *     type: object
 */
//# sourceMappingURL=shipping-method.js.map