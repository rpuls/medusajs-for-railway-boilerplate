"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Swap = exports.PaymentStatus = exports.FulfillmentStatus = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var order_1 = require("./order");
var fulfillment_1 = require("./fulfillment");
var address_1 = require("./address");
var line_item_1 = require("./line-item");
var return_1 = require("./return");
var cart_1 = require("./cart");
var payment_1 = require("./payment");
var shipping_method_1 = require("./shipping-method");
var FulfillmentStatus;
(function (FulfillmentStatus) {
    FulfillmentStatus["NOT_FULFILLED"] = "not_fulfilled";
    FulfillmentStatus["FULFILLED"] = "fulfilled";
    FulfillmentStatus["SHIPPED"] = "shipped";
    FulfillmentStatus["CANCELED"] = "canceled";
    FulfillmentStatus["REQUIRES_ACTION"] = "requires_action";
})(FulfillmentStatus = exports.FulfillmentStatus || (exports.FulfillmentStatus = {}));
var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["NOT_PAID"] = "not_paid";
    PaymentStatus["AWAITING"] = "awaiting";
    PaymentStatus["CAPTURED"] = "captured";
    PaymentStatus["CONFIRMED"] = "confirmed";
    PaymentStatus["CANCELED"] = "canceled";
    PaymentStatus["DIFFERENCE_REFUNDED"] = "difference_refunded";
    PaymentStatus["PARTIALLY_REFUNDED"] = "partially_refunded";
    PaymentStatus["REFUNDED"] = "refunded";
    PaymentStatus["REQUIRES_ACTION"] = "requires_action";
})(PaymentStatus = exports.PaymentStatus || (exports.PaymentStatus = {}));
var Swap = /** @class */ (function () {
    function Swap() {
    }
    Swap.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "swap_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Swap.prototype, "id", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "enum", enum: FulfillmentStatus }),
        __metadata("design:type", String)
    ], Swap.prototype, "fulfillment_status", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "enum", enum: PaymentStatus }),
        __metadata("design:type", String)
    ], Swap.prototype, "payment_status", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ type: "string" }),
        __metadata("design:type", String)
    ], Swap.prototype, "order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return order_1.Order; }, function (o) { return o.swaps; }),
        (0, typeorm_1.JoinColumn)({ name: "order_id" }),
        __metadata("design:type", order_1.Order)
    ], Swap.prototype, "order", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return line_item_1.LineItem; }, function (item) { return item.swap; }, { cascade: ["insert"] }),
        __metadata("design:type", line_item_1.LineItem)
    ], Swap.prototype, "additional_items", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return return_1.Return; }, function (ret) { return ret.swap; }, { cascade: ["insert"] }),
        __metadata("design:type", return_1.Return)
    ], Swap.prototype, "return_order", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return fulfillment_1.Fulfillment; }, function (fulfillment) { return fulfillment.swap; }, { cascade: ["insert"] }),
        __metadata("design:type", Array)
    ], Swap.prototype, "fulfillments", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return payment_1.Payment; }, function (p) { return p.swap; }, { cascade: ["insert"] }),
        __metadata("design:type", payment_1.Payment)
    ], Swap.prototype, "payment", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int", nullable: true }),
        __metadata("design:type", Number)
    ], Swap.prototype, "difference_due", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Swap.prototype, "shipping_address_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return address_1.Address; }, { cascade: ["insert"] }),
        (0, typeorm_1.JoinColumn)({ name: "shipping_address_id" }),
        __metadata("design:type", address_1.Address)
    ], Swap.prototype, "shipping_address", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return shipping_method_1.ShippingMethod; }, function (method) { return method.swap; }, { cascade: ["insert"] }),
        __metadata("design:type", Array)
    ], Swap.prototype, "shipping_methods", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Swap.prototype, "cart_id", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return cart_1.Cart; }),
        (0, typeorm_1.JoinColumn)({ name: "cart_id" }),
        __metadata("design:type", cart_1.Cart)
    ], Swap.prototype, "cart", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Swap.prototype, "confirmed_at", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Swap.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Swap.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Swap.prototype, "deleted_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Swap.prototype, "canceled_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "boolean", nullable: true }),
        __metadata("design:type", Boolean)
    ], Swap.prototype, "no_notification", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "boolean", default: false }),
        __metadata("design:type", Boolean)
    ], Swap.prototype, "allow_backorder", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Swap.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Swap.prototype, "idempotency_key", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Swap.prototype, "beforeInsert", null);
    Swap = __decorate([
        (0, typeorm_1.Entity)()
    ], Swap);
    return Swap;
}());
exports.Swap = Swap;
/**
 * @schema swap
 * title: "Swap"
 * description: "Swaps can be created when a Customer wishes to exchange Products that they have purchased to different Products. Swaps consist of a Return of previously purchased Products and a Fulfillment of new Products, the amount paid for the Products being returned will be used towards payment for the new Products. In the case where the amount paid for the the Products being returned exceed the amount to be paid for the new Products, a Refund will be issued for the difference."
 * x-resourceId: swap
 * properties:
 *   id:
 *     description: "The id of the Swap. This value will be prefixed with `swap_`."
 *     type: string
 *   fulfillment_status:
 *     description: "The status of the Fulfillment of the Swap."
 *     type: string
 *     enum:
 *       - not_fulfilled
 *       - partially_fulfilled
 *       - fulfilled
 *       - partially_shipped
 *       - shipped
 *       - partially_returned
 *       - returned
 *       - canceled
 *       - requires_action
 *   payment_status:
 *     description: "The status of the Payment of the Swap. The payment may either refer to the refund of an amount or the authorization of a new amount."
 *     type: string
 *     enum:
 *       - not_paid
 *       - awaiting
 *       - captured
 *       - canceled
 *       - difference_refunded
 *       - requires_action
 *   order_id:
 *     description: "The id of the Order where the Line Items to be returned where purchased."
 *     type: string
 *   additional_items:
 *     description: "The new Line Items to ship to the Customer."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/line_item"
 *   return_order:
 *     description: "The Return that is issued for the return part of the Swap."
 *     anyOf:
 *       - $ref: "#/components/schemas/return"
 *   fulfillments:
 *     description: "The Fulfillments used to send the new Line Items."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/fulfillment"
 *   payment:
 *     description: "The Payment authorized when the Swap requires an additional amount to be charged from the Customer."
 *     anyOf:
 *       - $ref: "#/components/schemas/payment"
 *   difference_due:
 *     description: "The difference that is paid or refunded as a result of the Swap. May be negative when the amount paid for the returned items exceed the total of the new Products."
 *     type: integer
 *   shipping_address:
 *     description: "The Address to send the new Line Items to - in most cases this will be the same as the shipping address on the Order."
 *     anyOf:
 *       - $ref: "#/components/schemas/address"
 *   shipping_methods:
 *     description: "The Shipping Methods used to fulfill the addtional items purchased."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/shipping_method"
 *   cart_id:
 *     description: "The id of the Cart that the Customer will use to confirm the Swap."
 *     type: string
 *   allow_backorder:
 *     description: "If true, swaps can be completed with items out of stock"
 *     type: boolean
 *   confirmed_at:
 *     description: "The date with timezone at which the Swap was confirmed by the Customer."
 *     type: string
 *     format: date-time
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   canceled_at:
 *     description: "The date with timezone at which the Swap was canceled."
 *     type: string
 *     format: date-time
 *   no_notification:
 *     description: "If set to true, no notification will be sent related to this swap"
 *     type: boolean
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=swap.js.map