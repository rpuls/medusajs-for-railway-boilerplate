"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReturnReason = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var ReturnReason = /** @class */ (function () {
    function ReturnReason() {
    }
    ReturnReason_1 = ReturnReason;
    ReturnReason.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "rr_".concat(id);
    };
    var ReturnReason_1;
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], ReturnReason.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Index)({ unique: true }),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ReturnReason.prototype, "value", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], ReturnReason.prototype, "label", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ReturnReason.prototype, "description", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], ReturnReason.prototype, "parent_return_reason_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return ReturnReason_1; }, { cascade: ['soft-remove'] }),
        (0, typeorm_1.JoinColumn)({ name: "parent_return_reason_id" }),
        __metadata("design:type", ReturnReason)
    ], ReturnReason.prototype, "parent_return_reason", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return ReturnReason_1; }, function (return_reason) { return return_reason.parent_return_reason; }, { cascade: ["insert", 'soft-remove'] }),
        __metadata("design:type", Array)
    ], ReturnReason.prototype, "return_reason_children", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ReturnReason.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ReturnReason.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], ReturnReason.prototype, "deleted_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], ReturnReason.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ReturnReason.prototype, "beforeInsert", null);
    ReturnReason = ReturnReason_1 = __decorate([
        (0, typeorm_1.Entity)()
    ], ReturnReason);
    return ReturnReason;
}());
exports.ReturnReason = ReturnReason;
/**
 * @schema return_reason
 * title: "Return Reason"
 * description: "A Reason for why a given product is returned. A Return Reason can be used on Return Items in order to indicate why a Line Item was returned."
 * x-resourceId: return_reason
 * properties:
 *   id:
 *     description: "The id of the Return Reason will start with `rr_`."
 *     type: string
 *   description:
 *     description: "A description of the Reason."
 *     type: string
 *   label:
 *     description: "A text that can be displayed to the Customer as a reason."
 *     type: string
 *   value:
 *     description: "The value to identify the reason by."
 *     type: string
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   deleted_at:
 *     description: "The date with timezone at which the resource was deleted."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=return-reason.js.map