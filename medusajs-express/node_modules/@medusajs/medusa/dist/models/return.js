"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Return = exports.ReturnStatus = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var order_1 = require("./order");
var swap_1 = require("./swap");
var claim_order_1 = require("./claim-order");
var return_item_1 = require("./return-item");
var shipping_method_1 = require("./shipping-method");
var ReturnStatus;
(function (ReturnStatus) {
    ReturnStatus["REQUESTED"] = "requested";
    ReturnStatus["RECEIVED"] = "received";
    ReturnStatus["REQUIRES_ACTION"] = "requires_action";
    ReturnStatus["CANCELED"] = "canceled";
})(ReturnStatus = exports.ReturnStatus || (exports.ReturnStatus = {}));
var Return = /** @class */ (function () {
    function Return() {
    }
    Return.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "ret_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Return.prototype, "id", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({
            type: "enum",
            enum: ReturnStatus,
            default: ReturnStatus.REQUESTED,
        }),
        __metadata("design:type", String)
    ], Return.prototype, "status", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return return_item_1.ReturnItem; }, function (item) { return item.return_order; }, { eager: true, cascade: ["insert"] }),
        __metadata("design:type", Array)
    ], Return.prototype, "items", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Return.prototype, "swap_id", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return swap_1.Swap; }, function (swap) { return swap.return_order; }),
        (0, typeorm_1.JoinColumn)({ name: "swap_id" }),
        __metadata("design:type", swap_1.Swap)
    ], Return.prototype, "swap", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Return.prototype, "claim_order_id", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return claim_order_1.ClaimOrder; }, function (co) { return co.return_order; }),
        (0, typeorm_1.JoinColumn)({ name: "claim_order_id" }),
        __metadata("design:type", claim_order_1.ClaimOrder)
    ], Return.prototype, "claim_order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Return.prototype, "order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return order_1.Order; }, function (o) { return o.returns; }),
        (0, typeorm_1.JoinColumn)({ name: "order_id" }),
        __metadata("design:type", order_1.Order)
    ], Return.prototype, "order", void 0);
    __decorate([
        (0, typeorm_1.OneToOne)(function () { return shipping_method_1.ShippingMethod; }, function (method) { return method.return_order; }, { cascade: true }),
        __metadata("design:type", shipping_method_1.ShippingMethod)
    ], Return.prototype, "shipping_method", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Return.prototype, "shipping_data", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "int" }),
        __metadata("design:type", Number)
    ], Return.prototype, "refund_amount", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Return.prototype, "received_at", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Return.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Return.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "boolean", nullable: true }),
        __metadata("design:type", Boolean)
    ], Return.prototype, "no_notification", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Return.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Return.prototype, "idempotency_key", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Return.prototype, "beforeInsert", null);
    Return = __decorate([
        (0, typeorm_1.Entity)()
    ], Return);
    return Return;
}());
exports.Return = Return;
/**
 * @schema return
 * title: "Return"
 * description: "Return orders hold information about Line Items that a Customer wishes to send back, along with how the items will be returned. Returns can be used as part of a Swap."
 * x-resourceId: return
 * properties:
 *   id:
 *     description: "The id of the Return. This value will be prefixed with `ret_`."
 *     type: string
 *   status:
 *     description: "Status of the Return."
 *     type: string
 *     enum:
 *       - requested
 *       - received
 *       - requires_action
 *   items:
 *     description: "The Return Items that will be shipped back to the warehouse.
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/return_item"
 *   swap_id:
 *     description: "The id of the Swap that the Return is a part of."
 *     type: string
 *   order_id:
 *     description: "The id of the Order that the Return is made from."
 *     type: string
 *   claim_order_id:
 *     description: "The id of the Claim that the Return is a part of."
 *     type: string
 *   shipping_method:
 *     description: "The Shipping Method that will be used to send the Return back. Can be null if the Customer facilitates the return shipment themselves."
 *     anyOf:
 *       - $ref: "#/components/schemas/shipping_method"
 *   shipping_data:
 *     description: "Data about the return shipment as provided by the Fulfilment Provider that handles the return shipment."
 *     type: object
 *   refund_amount:
 *     description: "The amount that should be refunded as a result of the return."
 *     type: integer
 *   received_at:
 *     description: "The date with timezone at which the return was received."
 *     type: string
 *     format: date-time
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   no_notification:
 *     description: "When set to true, no notification will be sent related to this return."
 *     type: boolean
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=return.js.map