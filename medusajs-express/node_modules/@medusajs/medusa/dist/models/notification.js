"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notification = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var customer_1 = require("./customer");
var notification_provider_1 = require("./notification-provider");
var Notification = /** @class */ (function () {
    function Notification() {
    }
    Notification_1 = Notification;
    Notification.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "noti_".concat(id);
    };
    var Notification_1;
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Notification.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Notification.prototype, "event_name", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Notification.prototype, "resource_type", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Notification.prototype, "resource_id", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Notification.prototype, "customer_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return customer_1.Customer; }),
        (0, typeorm_1.JoinColumn)({ name: "customer_id" }),
        __metadata("design:type", customer_1.Customer)
    ], Notification.prototype, "customer", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Notification.prototype, "to", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb" }),
        __metadata("design:type", Object)
    ], Notification.prototype, "data", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Notification.prototype, "parent_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return Notification_1; }),
        (0, typeorm_1.JoinColumn)({ name: "parent_id" }),
        __metadata("design:type", Notification)
    ], Notification.prototype, "parent_notification", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return Notification_1; }, function (noti) { return noti.parent_notification; }),
        __metadata("design:type", Array)
    ], Notification.prototype, "resends", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Notification.prototype, "provider_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return notification_provider_1.NotificationProvider; }),
        (0, typeorm_1.JoinColumn)({ name: "provider_id" }),
        __metadata("design:type", notification_provider_1.NotificationProvider)
    ], Notification.prototype, "provider", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Notification.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Notification.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Notification.prototype, "beforeInsert", null);
    Notification = Notification_1 = __decorate([
        (0, typeorm_1.Entity)()
    ], Notification);
    return Notification;
}());
exports.Notification = Notification;
/**
 * @schema notification
 * title: "Notification"
 * description: "Notifications a communications sent via Notification Providers as a reaction to internal events such as `order.placed`. Notifications can be used to show a chronological timeline for communications sent to a Customer regarding an Order, and enables resends."
 * x-resourceId: notification
 * properties:
 *   id:
 *     description: "The id of the Notification. This value will be prefixed by `noti_`."
 *     type: string
 *   event_name:
 *     description: "The name of the event that the notification was sent for."
 *     type: string
 *   resource_type:
 *     description: "The type of resource that the Notification refers to."
 *     type: string
 *   resource_id:
 *     description: "The id of the resource that the Notification refers to."
 *     type: string
 *   customer_id:
 *     description: "The id of the Customer that the Notification was sent to."
 *     type: string
 *   customer:
 *     description: "The Customer that the Notification was sent to."
 *     anyOf:
 *       - $ref: "#/components/schemas/customer"
 *   to:
 *     description: "The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id"
 *     type: string
 *   data:
 *     description: "The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend."
 *     type: object
 *   parent_id:
 *     description: "The id of the Notification that was originally sent."
 *     type: string
 *   resends:
 *     description: "The resends that have been completed after the original Notification."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/notification_resend"
 *   provider_id:
 *     description: "The id of the Notification Provider that handles the Notification."
 *     type: string
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 */
/**
 * @schema notification_resend
 * title: "Notification Resend"
 * description: "A resend of a Notification."
 * x-resourceId: notification_resend
 * properties:
 *   id:
 *     description: "The id of the Notification. This value will be prefixed by `noti_`."
 *     type: string
 *   event_name:
 *     description: "The name of the event that the notification was sent for."
 *     type: string
 *   resource_type:
 *     description: "The type of resource that the Notification refers to."
 *     type: string
 *   resource_id:
 *     description: "The id of the resource that the Notification refers to."
 *     type: string
 *   to:
 *     description: "The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id"
 *     type: string
 *   data:
 *     description: "The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend."
 *     type: object
 *   parent_id:
 *     description: "The id of the Notification that was originally sent."
 *     type: string
 *   provider_id:
 *     description: "The id of the Notification Provider that handles the Notification."
 *     type: string
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 */
//# sourceMappingURL=notification.js.map