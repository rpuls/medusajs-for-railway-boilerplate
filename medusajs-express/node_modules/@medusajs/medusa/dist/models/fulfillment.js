"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fulfillment = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var order_1 = require("./order");
var fulfillment_provider_1 = require("./fulfillment-provider");
var fulfillment_item_1 = require("./fulfillment-item");
var swap_1 = require("./swap");
var claim_order_1 = require("./claim-order");
var tracking_link_1 = require("./tracking-link");
var Fulfillment = /** @class */ (function () {
    function Fulfillment() {
    }
    Fulfillment.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "ful_".concat(id);
    };
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "claim_order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return claim_order_1.ClaimOrder; }, function (co) { return co.fulfillments; }),
        (0, typeorm_1.JoinColumn)({ name: "claim_order_id" }),
        __metadata("design:type", claim_order_1.ClaimOrder)
    ], Fulfillment.prototype, "claim_order", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "swap_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return swap_1.Swap; }, function (swap) { return swap.fulfillments; }),
        (0, typeorm_1.JoinColumn)({ name: "swap_id" }),
        __metadata("design:type", swap_1.Swap)
    ], Fulfillment.prototype, "swap", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "order_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return order_1.Order; }, function (o) { return o.fulfillments; }),
        (0, typeorm_1.JoinColumn)({ name: "order_id" }),
        __metadata("design:type", order_1.Order)
    ], Fulfillment.prototype, "order", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: "boolean", nullable: true }),
        __metadata("design:type", Boolean)
    ], Fulfillment.prototype, "no_notification", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "provider_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return fulfillment_provider_1.FulfillmentProvider; }),
        (0, typeorm_1.JoinColumn)({ name: "provider_id" }),
        __metadata("design:type", fulfillment_provider_1.FulfillmentProvider)
    ], Fulfillment.prototype, "provider", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return fulfillment_item_1.FulfillmentItem; }, function (i) { return i.fulfillment; }, { eager: true, cascade: true }),
        __metadata("design:type", Array)
    ], Fulfillment.prototype, "items", void 0);
    __decorate([
        (0, typeorm_1.OneToMany)(function () { return tracking_link_1.TrackingLink; }, function (tl) { return tl.fulfillment; }, { cascade: ["insert"] }),
        __metadata("design:type", Array)
    ], Fulfillment.prototype, "tracking_links", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", default: [] }),
        __metadata("design:type", Array)
    ], Fulfillment.prototype, "tracking_numbers", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb" }),
        __metadata("design:type", Object)
    ], Fulfillment.prototype, "data", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Fulfillment.prototype, "shipped_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Fulfillment.prototype, "canceled_at", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Fulfillment.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Fulfillment.prototype, "updated_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Fulfillment.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Fulfillment.prototype, "idempotency_key", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Fulfillment.prototype, "beforeInsert", null);
    Fulfillment = __decorate([
        (0, typeorm_1.Entity)()
    ], Fulfillment);
    return Fulfillment;
}());
exports.Fulfillment = Fulfillment;
/**
 * @schema fulfillment
 * title: "Fulfillment"
 * description: "Fulfillments are created once store operators can prepare the purchased goods. Fulfillments will eventually be shipped and hold information about how to track shipments. Fulfillments are created through a provider, which is typically an external shipping aggregator, shipping partner og 3PL, most plugins will have asynchronous communications with these providers through webhooks in order to automatically update and synchronize the state of Fulfillments."
 * x-resourceId: fulfillment
 * properties:
 *   id:
 *     description: "The id of the Fulfillment. This value will be prefixed by `ful_`."
 *     type: string
 *   claim_order_id:
 *     description: "The id of the Claim that the Fulfillment belongs to."
 *     type: string
 *   swap_id:
 *     description: "The id of the Swap that the Fulfillment belongs to."
 *     type: string
 *   order_id:
 *     description: "The id of the Order that the Fulfillment belongs to."
 *     type: string
 *   provider_id:
 *     description: "The id of the Fulfillment Provider responsible for handling the fulfillment"
 *     type: string
 *   items:
 *     description: "The Fulfillment Items in the Fulfillment - these hold information about how many of each Line Item has been fulfilled."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/fulfillment_item"
 *   tracking_links:
 *     description: "The Tracking Links that can be used to track the status of the Fulfillment, these will usually be provided by the Fulfillment Provider."
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/tracking_link"
 *   tracking_numbers:
 *     deprecated: true
 *     description: "The tracking numbers that can be used to track the status of the fulfillment."
 *     type: array
 *     items:
 *       type: string
 *   shipped_at:
 *     description: "The date with timezone at which the Fulfillment was shipped."
 *     type: string
 *     format: date-time
 *   no_notification:
 *     description: "Flag for describing whether or not notifications related to this should be send."
 *     type: boolean
 *   canceled_at:
 *     description: "The date with timezone at which the Fulfillment was canceled."
 *     type: string
 *     format: date-time
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=fulfillment.js.map