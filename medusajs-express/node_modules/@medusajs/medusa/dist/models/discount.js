"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Discount = void 0;
var typeorm_1 = require("typeorm");
var ulid_1 = require("ulid");
var db_aware_column_1 = require("../utils/db-aware-column");
var discount_rule_1 = require("./discount-rule");
var region_1 = require("./region");
var Discount = /** @class */ (function () {
    function Discount() {
    }
    Discount_1 = Discount;
    Discount.prototype.beforeInsert = function () {
        if (this.id)
            return;
        var id = (0, ulid_1.ulid)();
        this.id = "disc_".concat(id);
        this.code = this.code.toUpperCase();
    };
    var Discount_1;
    __decorate([
        (0, typeorm_1.PrimaryColumn)(),
        __metadata("design:type", String)
    ], Discount.prototype, "id", void 0);
    __decorate([
        (0, typeorm_1.Index)({ unique: true, where: "deleted_at IS NULL" }),
        (0, typeorm_1.Column)(),
        __metadata("design:type", String)
    ], Discount.prototype, "code", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", Boolean)
    ], Discount.prototype, "is_dynamic", void 0);
    __decorate([
        (0, typeorm_1.Index)(),
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Discount.prototype, "rule_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return discount_rule_1.DiscountRule; }, { cascade: true }),
        (0, typeorm_1.JoinColumn)({ name: "rule_id" }),
        __metadata("design:type", discount_rule_1.DiscountRule)
    ], Discount.prototype, "rule", void 0);
    __decorate([
        (0, typeorm_1.Column)(),
        __metadata("design:type", Boolean)
    ], Discount.prototype, "is_disabled", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Discount.prototype, "parent_discount_id", void 0);
    __decorate([
        (0, typeorm_1.ManyToOne)(function () { return Discount_1; }),
        (0, typeorm_1.JoinColumn)({ name: "parent_discount_id" }),
        __metadata("design:type", Discount)
    ], Discount.prototype, "parent_discount", void 0);
    __decorate([
        (0, typeorm_1.Column)({
            type: (0, db_aware_column_1.resolveDbType)("timestamptz"),
            default: function () { return "CURRENT_TIMESTAMP"; },
        }),
        __metadata("design:type", Date)
    ], Discount.prototype, "starts_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz"), nullable: true }),
        __metadata("design:type", Date)
    ], Discount.prototype, "ends_at", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", String)
    ], Discount.prototype, "valid_duration", void 0);
    __decorate([
        (0, typeorm_1.ManyToMany)(function () { return region_1.Region; }, { cascade: true }),
        (0, typeorm_1.JoinTable)({
            name: "discount_regions",
            joinColumn: {
                name: "discount_id",
                referencedColumnName: "id",
            },
            inverseJoinColumn: {
                name: "region_id",
                referencedColumnName: "id",
            },
        }),
        __metadata("design:type", Array)
    ], Discount.prototype, "regions", void 0);
    __decorate([
        (0, typeorm_1.Column)({ nullable: true }),
        __metadata("design:type", Number)
    ], Discount.prototype, "usage_limit", void 0);
    __decorate([
        (0, typeorm_1.Column)({ default: 0 }),
        __metadata("design:type", Number)
    ], Discount.prototype, "usage_count", void 0);
    __decorate([
        (0, typeorm_1.CreateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Discount.prototype, "created_at", void 0);
    __decorate([
        (0, typeorm_1.UpdateDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Discount.prototype, "updated_at", void 0);
    __decorate([
        (0, typeorm_1.DeleteDateColumn)({ type: (0, db_aware_column_1.resolveDbType)("timestamptz") }),
        __metadata("design:type", Date)
    ], Discount.prototype, "deleted_at", void 0);
    __decorate([
        (0, db_aware_column_1.DbAwareColumn)({ type: "jsonb", nullable: true }),
        __metadata("design:type", Object)
    ], Discount.prototype, "metadata", void 0);
    __decorate([
        (0, typeorm_1.BeforeInsert)(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Discount.prototype, "beforeInsert", null);
    Discount = Discount_1 = __decorate([
        (0, typeorm_1.Entity)()
    ], Discount);
    return Discount;
}());
exports.Discount = Discount;
/**
 * @schema discount
 * title: "Discount"
 * description: "Represents a discount that can be applied to a cart for promotional purposes."
 * x-resourceId: discount
 * properties:
 *   id:
 *     description: "The id of the Discount. Will be prefixed by `disc_`."
 *     type: string
 *   code:
 *     description: "A unique code for the discount - this will be used by the customer to apply the discount"
 *     type: string
 *   is_dynamic:
 *     description: "A flag to indicate if multiple instances of the discount can be generated. I.e. for newsletter discounts"
 *     type: boolean
 *   rule:
 *     description: "The Discount Rule that governs the behaviour of the Discount"
 *     anyOf:
 *       - $ref: "#/components/schemas/discount_rule"
 *   is_disabled:
 *     description: "Whether the Discount has been disabled. Disabled discounts cannot be applied to carts"
 *     type: boolean
 *   parent_discount_id:
 *     description: "The Discount that the discount was created from. This will always be a dynamic discount"
 *     type: string
 *   starts_at:
 *     description: "The time at which the discount can be used."
 *     type: string
 *     format: date-time
 *   ends_at:
 *     description: "The time at which the discount can no longer be used."
 *     type: string
 *     format: date-time
 *   regions:
 *     description: "The Regions in which the Discount can be used"
 *     type: array
 *     items:
 *       $ref: "#/components/schemas/region"
 *   usage_limit:
 *     description: "The maximum number of times that a discount can be used."
 *     type: integer
 *   usage_count:
 *     description: "The number of times a discount has been used."
 *     type: integer
 *   created_at:
 *     description: "The date with timezone at which the resource was created."
 *     type: string
 *     format: date-time
 *   updated_at:
 *     description: "The date with timezone at which the resource was last updated."
 *     type: string
 *     format: date-time
 *   deleted_at:
 *     description: "The date with timezone at which the resource was deleted."
 *     type: string
 *     format: date-time
 *   metadata:
 *     description: "An optional key-value map with additional information."
 *     type: object
 */
//# sourceMappingURL=discount.js.map