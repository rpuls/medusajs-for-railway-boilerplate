"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var axios = require("axios")["default"];

var inquirer = require("inquirer");

var open = require("open");

var execa = require("execa");

var resolveCwd = require("resolve-cwd");

var _require = require("medusa-telemetry"),
    track = _require.track;

var _require2 = require("../util/token-store"),
    getToken = _require2.getToken;

var logger = require("../reporter")["default"];

var MEDUSA_CLI_DEBUG = process.env.MEDUSA_CLI_DEBUG || false;
module.exports = {
  link: function () {
    var _link = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(argv) {
      var port, appHost, apiHost, tok, _yield$axios$get$catc, auth, linkActivity, proc, res, err, prompts, _proc;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              track("CLI_LINK", {
                args: argv
              });
              port = process.env.PORT || 9000;
              appHost = process.env.MEDUSA_APP_HOST || "https://app.medusa-commerce.com";
              apiHost = process.env.MEDUSA_API_HOST || "https://api.medusa-commerce.com"; // Checks if there is already a token from a previous log in; this is
              // necessary to redirect the customer to the page where local linking is
              // done

              tok = getToken();

              if (!tok) {
                console.log("You must login to Medusa Cloud first. Please run medusa login.");
                process.exit(1);
              } // Get the currently logged in user; we will be using the Cloud user id to
              // create a user in the local DB with the same user id; allowing you to
              // authenticate to the local API.


              _context2.next = 8;
              return axios.get("".concat(apiHost, "/auth"), {
                headers: {
                  authorization: "Bearer ".concat(tok)
                }
              })["catch"](function (err) {
                console.log(err);
                process.exit(1);
              });

            case 8:
              _yield$axios$get$catc = _context2.sent;
              auth = _yield$axios$get$catc.data;
              linkActivity = logger.activity("Linking local project"); // Create the user with the user id

              if (!(!argv.skipLocalUser && auth.user)) {
                _context2.next = 29;
                break;
              }

              _context2.prev = 12;
              proc = execa("./node_modules/@medusajs/medusa/cli.js", ["user", "--id", auth.user.id, "--email", auth.user.email], {
                env: _objectSpread(_objectSpread({}, process.env), {}, {
                  NODE_ENV: "command"
                })
              });

              if (MEDUSA_CLI_DEBUG) {
                proc.stderr.pipe(process.stderr);
                proc.stdout.pipe(process.stdout);
              }

              _context2.next = 17;
              return proc;

            case 17:
              res = _context2.sent;

              if (!res.stderr) {
                _context2.next = 22;
                break;
              }

              err = new Error("stderr error");
              err.stderr = res.stderr;
              throw err;

            case 22:
              _context2.next = 29;
              break;

            case 24:
              _context2.prev = 24;
              _context2.t0 = _context2["catch"](12);
              logger.failure(linkActivity, "Failed to perform local linking");

              if (_context2.t0.stderr) {
                console.error(_context2.t0.stderr);
              } else if (_context2.t0.code === "ENOENT") {
                logger.error("Couldn't find the Medusa CLI - please make sure that you have installed it globally");
              }

              process.exit(1);

            case 29:
              logger.success(linkActivity, "Local project linked");
              track("CLI_LINK_COMPLETED");
              console.log();
              console.log("Link Medusa Cloud to your local server. This will open the browser");
              console.log();
              prompts = [{
                type: "input",
                name: "open",
                message: "Press enter key to open browser for linking or n to exit"
              }];
              _context2.next = 37;
              return inquirer.prompt(prompts).then( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(a) {
                  var params, browserOpen;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (a.open === "n") {
                            process.exit(0);
                          }

                          params = "lurl=http://localhost:".concat(port, "&ltoken=").concat(auth.user.id); // This step sets the Cloud link by opening a browser

                          _context.next = 4;
                          return open("".concat(appHost, "/local-link?").concat(encodeURI(params)), {
                            app: "browser",
                            wait: false
                          });

                        case 4:
                          browserOpen = _context.sent;
                          browserOpen.on("error", function (err) {
                            console.warn(err);
                            console.log("Could not open browser go to: ".concat(appHost, "/local-link?lurl=http://localhost:9000&ltoken=").concat(auth.user.id));
                          });
                          track("CLI_LINK_BROWSER_OPENED");

                        case 7:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref.apply(this, arguments);
                };
              }());

            case 37:
              if (!argv.develop) {
                _context2.next = 43;
                break;
              }

              _proc = execa("./node_modules/@medusajs/medusa/cli.js", ["develop"]);

              _proc.stdout.pipe(process.stdout);

              _proc.stderr.pipe(process.stderr);

              _context2.next = 43;
              return _proc;

            case 43:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[12, 24]]);
    }));

    function link(_x) {
      return _link.apply(this, arguments);
    }

    return link;
  }()
};