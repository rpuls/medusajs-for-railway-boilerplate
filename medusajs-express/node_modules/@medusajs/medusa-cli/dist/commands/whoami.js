"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var axios = require("axios")["default"];

var _require = require("../util/token-store"),
    getToken = _require.getToken;

var logger = require("../reporter")["default"];
/**
 * Fetches the locally logged in user.
 */


module.exports = {
  whoami: function () {
    var _whoami = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(argv) {
      var apiHost, tok, activity, _yield$axios$get$catc, auth;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              apiHost = process.env.MEDUSA_API_HOST || "https://api.medusa-commerce.com";
              tok = getToken();

              if (!tok) {
                console.log("You are not logged into Medusa Cloud. Please run medusa login.");
                process.exit(0);
              }

              activity = logger.activity("checking login details");
              _context.next = 6;
              return axios.get("".concat(apiHost, "/auth"), {
                headers: {
                  authorization: "Bearer ".concat(tok)
                }
              })["catch"](function (err) {
                logger.failure(activity, "Couldn't gather login details");
                logger.error(err);
                process.exit(1);
              });

            case 6:
              _yield$axios$get$catc = _context.sent;
              auth = _yield$axios$get$catc.data;

              if (auth.user) {
                logger.success(activity, "Hi, ".concat(auth.user.first_name, "! Here are your details:"));
                console.log("id: ".concat(auth.user.id));
                console.log("email: ".concat(auth.user.email));
                console.log("first_name: ".concat(auth.user.first_name));
                console.log("last_name: ".concat(auth.user.last_name));
              }

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function whoami(_x) {
      return _whoami.apply(this, arguments);
    }

    return whoami;
  }()
};