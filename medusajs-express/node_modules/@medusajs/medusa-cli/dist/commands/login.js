"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var axios = require("axios")["default"];

var open = require("open");

var inquirer = require("inquirer");

var _require = require("medusa-telemetry"),
    track = _require.track;

var logger = require("../reporter")["default"];

var _require2 = require("../util/token-store"),
    setToken = _require2.setToken;
/**
 * The login command allows the CLI to keep track of Cloud users; the command
 * makes a cli-login request to the cloud server and keeps an open connection
 * until the user has authenticated via the Medusa Cloud website.
 */


module.exports = {
  login: function () {
    var _login = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_) {
      var apiHost, authHost, loginHost, _yield$axios$post, urls, loginUri, prompts, spinner, fetchAuth, auth, _yield$axios$get$catc, user;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              track("CLI_LOGIN");
              apiHost = process.env.MEDUSA_API_HOST || "https://api.medusa-commerce.com";
              authHost = process.env.MEDUSA_AUTH_HOST || "".concat(apiHost, "/cli-auth");
              loginHost = process.env.MEDUSA_APP_HOST || "https://app.medusa-commerce.com";
              _context3.next = 6;
              return axios.post(authHost);

            case 6:
              _yield$axios$post = _context3.sent;
              urls = _yield$axios$post.data;
              loginUri = "".concat(loginHost).concat(urls.browser_url);
              prompts = [{
                type: "input",
                name: "open",
                message: "Press enter key to open browser for login or n to exit"
              }];
              console.log();
              console.log("Login to Medusa Cloud");
              console.log();
              _context3.next = 15;
              return inquirer.prompt(prompts).then( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(a) {
                  var browserOpen;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (a.open === "n") {
                            process.exit(0);
                          }

                          _context.next = 3;
                          return open(loginUri, {
                            app: "browser",
                            wait: false
                          });

                        case 3:
                          browserOpen = _context.sent;
                          browserOpen.on("error", function (err) {
                            console.warn(err);
                            console.log("Could not open browser go to: ".concat(loginUri));
                          });

                        case 5:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x2) {
                  return _ref.apply(this, arguments);
                };
              }());

            case 15:
              spinner = logger.activity("Waiting for login at ".concat(loginUri));

              fetchAuth = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  var retries,
                      _yield$axios$get,
                      _auth,
                      _args2 = arguments;

                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          retries = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 3;
                          _context2.prev = 1;
                          _context2.next = 4;
                          return axios.get("".concat(authHost).concat(urls.cli_url), {
                            headers: {
                              authorization: "Bearer ".concat(urls.cli_token)
                            }
                          });

                        case 4:
                          _yield$axios$get = _context2.sent;
                          _auth = _yield$axios$get.data;
                          return _context2.abrupt("return", _auth);

                        case 9:
                          _context2.prev = 9;
                          _context2.t0 = _context2["catch"](1);

                          if (!(retries > 0 && _context2.t0.http && _context2.t0.http.statusCode > 500)) {
                            _context2.next = 13;
                            break;
                          }

                          return _context2.abrupt("return", fetchAuth(retries - 1));

                        case 13:
                          throw _context2.t0;

                        case 14:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, null, [[1, 9]]);
                }));

                return function fetchAuth() {
                  return _ref2.apply(this, arguments);
                };
              }();

              _context3.next = 19;
              return fetchAuth();

            case 19:
              auth = _context3.sent;
              _context3.next = 22;
              return axios.get("".concat(apiHost, "/auth"), {
                headers: {
                  authorization: "Bearer ".concat(auth.password)
                }
              })["catch"](function (err) {
                console.log(err);
                process.exit(1);
              });

            case 22:
              _yield$axios$get$catc = _context3.sent;
              user = _yield$axios$get$catc.data;

              if (user) {
                track("CLI_LOGIN_SUCCEEDED");
                logger.success(spinner, "Log in succeeded.");
                setToken(auth.password);
              } else {
                track("CLI_LOGIN_FAILED");
                logger.failure(spinner, "Log in failed.");
              }

            case 25:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function login(_x) {
      return _login.apply(this, arguments);
    }

    return login;
  }()
};