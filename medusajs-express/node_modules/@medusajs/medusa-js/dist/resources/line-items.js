"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = __importDefault(require("./base"));
var LineItemsResource = /** @class */ (function (_super) {
    __extends(LineItemsResource, _super);
    function LineItemsResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a line-item for a cart
     * @param {string} cart_id id of cart
     * @param {StorePostCartsCartLineItemsReq} payload details needed to create a line-item
     * @return {ResponsePromise<StoreCartsRes>}
     */
    LineItemsResource.prototype.create = function (cart_id, payload) {
        var path = "/store/carts/" + cart_id + "/line-items";
        return this.client.request("POST", path, payload);
    };
    /**
     * Updates a line-item.
     * Only quantity updates are allowed
     * @param {string} cart_id id of cart
     * @param {string} line_id id of item to update
     * @param {StorePostCartsCartLineItemsItemReq} payload details needed to update a line-item
     * @return {ResponsePromise<StoreCartsRes>}
     */
    LineItemsResource.prototype.update = function (cart_id, line_id, payload) {
        var path = "/store/carts/" + cart_id + "/line-items/" + line_id;
        return this.client.request("POST", path, payload);
    };
    /**
     * Remove a line-item from a cart
     * @param {string} cart_id id of cart
     * @param {string} line_id id of item to remove
     * @return {ResponsePromise<StoreCartsDeleteRes>}
     */
    LineItemsResource.prototype.delete = function (cart_id, line_id) {
        var path = "/store/carts/" + cart_id + "/line-items/" + line_id;
        return this.client.request("DELETE", path);
    };
    return LineItemsResource;
}(base_1.default));
exports.default = LineItemsResource;
//# sourceMappingURL=line-items.js.map