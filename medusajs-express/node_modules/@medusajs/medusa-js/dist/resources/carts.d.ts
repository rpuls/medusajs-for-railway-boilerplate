import { StoreCartsRes, StoreCompleteCartRes, StorePostCartReq, StorePostCartsCartPaymentSessionReq, StorePostCartsCartPaymentSessionUpdateReq, StorePostCartsCartReq, StorePostCartsCartShippingMethodReq } from "@medusajs/medusa";
import { ResponsePromise } from "../typings";
import BaseResource from "./base";
import LineItemsResource from "./line-items";
declare class CartsResource extends BaseResource {
    lineItems: LineItemsResource;
    /**
     * Adds a shipping method to cart
     * @param {string} cart_id Id of cart
     * @param {StorePostCartsCartShippingMethodReq} payload Containg id of shipping option and optional data
     * @return {ResponsePromise<StoreCartsRes>}
     */
    addShippingMethod(cart_id: string, payload: StorePostCartsCartShippingMethodReq): ResponsePromise<StoreCartsRes>;
    /**
     * Completes a cart.
     * Payment authorization is attempted and if more work is required, we simply return the cart for further updates.
     * If payment is authorized and order is not yet created, we make sure to do so.
     * The completion of a cart can be performed idempotently with a provided header Idempotency-Key.
     * If not provuided, we will generate one for the request.
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCompleteCartRes>}
     */
    complete(cart_id: string): ResponsePromise<StoreCompleteCartRes>;
    /**
     * Creates a cart
     * @param {StorePostCartReq} payload is optional and can contain a region_id and items.
     * The cart will contain the payload, if provided. Otherwise it will be empty
     * @return {ResponsePromise<StoreCartsRes>}
     */
    create(payload?: StorePostCartReq): ResponsePromise<StoreCartsRes>;
    /**
     * Creates payment sessions.
     * Initializes the payment sessions that can be used to pay for the items of the cart.
     * This is usually called when a customer proceeds to checkout.
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    createPaymentSessions(cart_id: string): ResponsePromise<StoreCartsRes>;
    /**
     * Removes a discount from cart.
     * @param {string} cart_id is required
     * @param {string} code discount code to remove
     * @return {ResponsePromise<StoreCartsRes>}
     */
    deleteDiscount(cart_id: string, code: string): ResponsePromise<StoreCartsRes>;
    /**
     * Removes a payment session from a cart.
     * Can be useful in case a payment has failed
     * @param {string} cart_id is required
     * @param {string} provider_id the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    deletePaymentSession(cart_id: string, provider_id: string): ResponsePromise<StoreCartsRes>;
    /**
     * Refreshes a payment session.
     * @param {string} cart_id is required
     * @param {string} provider_id the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    refreshPaymentSession(cart_id: string, provider_id: string): ResponsePromise<StoreCartsRes>;
    /**
     * Retrieves a cart
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    retrieve(cart_id: string): ResponsePromise<StoreCartsRes>;
    /**
     * Refreshes a payment session.
     * @param {string} cart_id is required
     * @param {StorePostCartsCartPaymentSessionReq} payload the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    setPaymentSession(cart_id: string, payload: StorePostCartsCartPaymentSessionReq): ResponsePromise<StoreCartsRes>;
    /**
     * Updates a cart
     * @param {string} cart_id is required
     * @param {StorePostCartsCartReq} payload is required and can contain region_id, email, billing and shipping address
     * @return {ResponsePromise<StoreCartsRes>}
     */
    update(cart_id: string, payload: StorePostCartsCartReq): ResponsePromise<StoreCartsRes>;
    /**
     * Updates the payment method
     * @param {string} cart_id is required
     * @param {string} provider_id is required
     * @param {StorePostCartsCartPaymentSessionUpdateReq} payload is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    updatePaymentSession(cart_id: string, provider_id: string, payload: StorePostCartsCartPaymentSessionUpdateReq): ResponsePromise<StoreCartsRes>;
}
export default CartsResource;
