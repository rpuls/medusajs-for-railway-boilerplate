import { AdminPostOrdersOrderReq, AdminOrdersRes, AdminGetOrdersParams, AdminOrdersListRes, AdminPostOrdersReq, AdminPostOrdersOrderRefundsReq, AdminPostOrdersOrderFulfillmentsReq, AdminPostOrdersOrderShipmentReq, AdminPostOrdersOrderReturnsReq, AdminPostOrdersOrderShippingMethodsReq, AdminPostOrdersOrderSwapsReq, AdminPostOrdersOrderSwapsSwapReceiveReq, AdminPostOrdersOrderSwapsSwapFulfillmentsReq, AdminPostOrdersOrderSwapsSwapShipmentsReq, AdminPostOrdersOrderClaimsReq, AdminPostOrdersOrderClaimsClaimFulfillmentsReq, AdminPostOrdersOrderClaimsClaimShipmentsReq, AdminPostOrdersOrderClaimsClaimReq } from "@medusajs/medusa";
import { ResponsePromise } from "../../typings";
import BaseResource from "../base";
declare class AdminOrdersResource extends BaseResource {
    create(payload: AdminPostOrdersReq): ResponsePromise<AdminOrdersRes>;
    update(id: string, payload: AdminPostOrdersOrderReq): ResponsePromise<AdminOrdersRes>;
    retrieve(id: string): ResponsePromise<AdminOrdersRes>;
    list(query: AdminGetOrdersParams): ResponsePromise<AdminOrdersListRes>;
    complete(id: string): ResponsePromise<AdminOrdersRes>;
    capturePayment(id: string): ResponsePromise<AdminOrdersRes>;
    refundPayment(id: string, payload: AdminPostOrdersOrderRefundsReq): ResponsePromise<AdminOrdersRes>;
    createFulfillment(id: string, payload: AdminPostOrdersOrderFulfillmentsReq): ResponsePromise<AdminOrdersRes>;
    cancelFulfillment(id: string, fulfillmentId: string): ResponsePromise<AdminOrdersRes>;
    cancelSwapFulfillment(id: string, swapId: string, fulfillmentId: string): ResponsePromise<AdminOrdersRes>;
    cancelClaimFulfillment(id: string, claimId: string, fulfillmentId: string): ResponsePromise<AdminOrdersRes>;
    createShipment(id: string, payload: AdminPostOrdersOrderShipmentReq): ResponsePromise<AdminOrdersRes>;
    requestReturn(id: string, payload: AdminPostOrdersOrderReturnsReq): ResponsePromise<AdminOrdersRes>;
    cancel(id: string): ResponsePromise<AdminOrdersRes>;
    addShippingMethod(id: string, payload: AdminPostOrdersOrderShippingMethodsReq): ResponsePromise<AdminOrdersRes>;
    archive(id: string): ResponsePromise<AdminOrdersRes>;
    createSwap(id: string, payload: AdminPostOrdersOrderSwapsReq): ResponsePromise<AdminOrdersRes>;
    cancelSwap(id: string, swapId: string): ResponsePromise<AdminOrdersRes>;
    receiveSwap(id: string, swapId: string, payload: AdminPostOrdersOrderSwapsSwapReceiveReq): ResponsePromise<AdminOrdersRes>;
    fulfillSwap(id: string, swapId: string, payload: AdminPostOrdersOrderSwapsSwapFulfillmentsReq): ResponsePromise<AdminOrdersRes>;
    createSwapShipment(id: string, swapId: string, payload: AdminPostOrdersOrderSwapsSwapShipmentsReq): ResponsePromise<AdminOrdersRes>;
    processSwapPayment(id: string, swapId: string): ResponsePromise<AdminOrdersRes>;
    createClaim(id: string, payload: AdminPostOrdersOrderClaimsReq): ResponsePromise<AdminOrdersRes>;
    cancelClaim(id: string, claimId: string): ResponsePromise<AdminOrdersRes>;
    updateClaim(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimReq): ResponsePromise<AdminOrdersRes>;
    fulfillClaim(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimFulfillmentsReq): ResponsePromise<AdminOrdersRes>;
    createClaimShipment(id: string, claimId: string, payload: AdminPostOrdersOrderClaimsClaimShipmentsReq): ResponsePromise<AdminOrdersRes>;
    deleteMetadata(id: string, key: string): ResponsePromise<AdminOrdersRes>;
}
export default AdminOrdersResource;
