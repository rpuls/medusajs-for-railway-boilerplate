"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = __importDefault(require("../base"));
var AdminShippingOptionsResource = /** @class */ (function (_super) {
    __extends(AdminShippingOptionsResource, _super);
    function AdminShippingOptionsResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @description creates a shipping option.
     * @param payload
     * @returns created shipping option.
     */
    AdminShippingOptionsResource.prototype.create = function (payload) {
        var path = "/admin/shipping-options";
        return this.client.request("POST", path, payload);
    };
    /**
     * @description updates a shipping option
     * @param id id of the shipping option to update.
     * @param payload update to apply to shipping option.
     * @returns the updated shipping option.
     */
    AdminShippingOptionsResource.prototype.update = function (id, payload) {
        var path = "/admin/shipping-options/" + id;
        return this.client.request("POST", path, payload);
    };
    /**
     * @description deletes a shipping option
     * @param id id of shipping option to delete.
     * @returns deleted response
     */
    AdminShippingOptionsResource.prototype.delete = function (id) {
        var path = "/admin/shipping-options/" + id;
        return this.client.request("DELETE", path);
    };
    /**
     * @description get a shipping option
     * @param id id of the shipping option to retrieve.
     * @returns the shipping option with the given id
     */
    AdminShippingOptionsResource.prototype.retrieve = function (id) {
        var path = "/admin/shipping-options/" + id;
        return this.client.request("GET", path);
    };
    /**
     * @description lists shipping options matching a query
     * @param query query for searching shipping options
     * @returns a list of shipping options matching the query.
     */
    AdminShippingOptionsResource.prototype.list = function (query) {
        var path = "/admin/shipping-options";
        if (query) {
            var queryString = Object.entries(query).map(function (_a) {
                var key = _a[0], value = _a[1];
                return typeof value !== "undefined" ? key + "=" + value : "";
            });
            path = "/admin/shipping-options?" + queryString.join("&");
        }
        return this.client.request("GET", path);
    };
    return AdminShippingOptionsResource;
}(base_1.default));
exports.default = AdminShippingOptionsResource;
//# sourceMappingURL=shipping-options.js.map