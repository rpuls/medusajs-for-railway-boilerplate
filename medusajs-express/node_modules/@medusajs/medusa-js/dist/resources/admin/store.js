"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = __importDefault(require("../base"));
var AdminStoresResource = /** @class */ (function (_super) {
    __extends(AdminStoresResource, _super);
    function AdminStoresResource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @description Updates the store
     * @param payload update to apply to the store.
     * @returns the updated store.
     */
    AdminStoresResource.prototype.update = function (payload) {
        var path = "/admin/store/";
        return this.client.request("POST", path, payload);
    };
    /**
     * @description adds a currency to the store.
     * @param currency_code code of the currency to add
     * @returns updated store.
     */
    AdminStoresResource.prototype.addCurrency = function (currency_code) {
        var path = "/admin/store/" + currency_code;
        return this.client.request("POST", path);
    };
    /**
     * @description deletes a currency from the available store currencies
     * @param currency_code currency code of the currency to delete from the store.
     * @returns updated store
     */
    AdminStoresResource.prototype.deleteCurrency = function (currency_code) {
        var path = "/admin/store/currencies/" + currency_code;
        return this.client.request("DELETE", path);
    };
    /**
     * @description gets a medusa store
     * @returns a medusa store
     */
    AdminStoresResource.prototype.retrieve = function () {
        var path = "/admin/store/";
        return this.client.request("GET", path);
    };
    /**
     * @description Lists the store's payment providers
     * @returns a list of payment providers configured on the store
     */
    AdminStoresResource.prototype.listPaymentProviders = function () {
        var path = "/admin/store/payment-providers";
        return this.client.request("GET", path);
    };
    return AdminStoresResource;
}(base_1.default));
exports.default = AdminStoresResource;
//# sourceMappingURL=store.js.map