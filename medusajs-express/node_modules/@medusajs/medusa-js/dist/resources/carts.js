"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = __importDefault(require("./base"));
var line_items_1 = __importDefault(require("./line-items"));
var CartsResource = /** @class */ (function (_super) {
    __extends(CartsResource, _super);
    function CartsResource() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lineItems = new line_items_1.default(_this.client);
        return _this;
    }
    /**
     * Adds a shipping method to cart
     * @param {string} cart_id Id of cart
     * @param {StorePostCartsCartShippingMethodReq} payload Containg id of shipping option and optional data
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.addShippingMethod = function (cart_id, payload) {
        var path = "/store/carts/" + cart_id + "/shipping-methods";
        return this.client.request("POST", path, payload);
    };
    /**
     * Completes a cart.
     * Payment authorization is attempted and if more work is required, we simply return the cart for further updates.
     * If payment is authorized and order is not yet created, we make sure to do so.
     * The completion of a cart can be performed idempotently with a provided header Idempotency-Key.
     * If not provuided, we will generate one for the request.
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCompleteCartRes>}
     */
    CartsResource.prototype.complete = function (cart_id) {
        var path = "/store/carts/" + cart_id + "/complete";
        return this.client.request("POST", path);
    };
    /**
     * Creates a cart
     * @param {StorePostCartReq} payload is optional and can contain a region_id and items.
     * The cart will contain the payload, if provided. Otherwise it will be empty
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.create = function (payload) {
        var path = "/store/carts";
        return this.client.request("POST", path, payload);
    };
    /**
     * Creates payment sessions.
     * Initializes the payment sessions that can be used to pay for the items of the cart.
     * This is usually called when a customer proceeds to checkout.
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.createPaymentSessions = function (cart_id) {
        var path = "/store/carts/" + cart_id + "/payment-sessions";
        return this.client.request("POST", path);
    };
    /**
     * Removes a discount from cart.
     * @param {string} cart_id is required
     * @param {string} code discount code to remove
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.deleteDiscount = function (cart_id, code) {
        var path = "/store/carts/" + cart_id + "/discounts/" + code;
        return this.client.request("DELETE", path);
    };
    /**
     * Removes a payment session from a cart.
     * Can be useful in case a payment has failed
     * @param {string} cart_id is required
     * @param {string} provider_id the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.deletePaymentSession = function (cart_id, provider_id) {
        var path = "/store/carts/" + cart_id + "/payment-sessions/" + provider_id;
        return this.client.request("DELETE", path);
    };
    /**
     * Refreshes a payment session.
     * @param {string} cart_id is required
     * @param {string} provider_id the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.refreshPaymentSession = function (cart_id, provider_id) {
        var path = "/store/carts/" + cart_id + "/payment-sessions/" + provider_id + "/refresh";
        return this.client.request("POST", path);
    };
    /**
     * Retrieves a cart
     * @param {string} cart_id is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.retrieve = function (cart_id) {
        var path = "/store/carts/" + cart_id;
        return this.client.request("GET", path);
    };
    /**
     * Refreshes a payment session.
     * @param {string} cart_id is required
     * @param {StorePostCartsCartPaymentSessionReq} payload the provider id of the session e.g. "stripe"
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.setPaymentSession = function (cart_id, payload) {
        var path = "/store/carts/" + cart_id + "/payment-session";
        return this.client.request("POST", path, payload);
    };
    /**
     * Updates a cart
     * @param {string} cart_id is required
     * @param {StorePostCartsCartReq} payload is required and can contain region_id, email, billing and shipping address
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.update = function (cart_id, payload) {
        var path = "/store/carts/" + cart_id;
        return this.client.request("POST", path, payload);
    };
    /**
     * Updates the payment method
     * @param {string} cart_id is required
     * @param {string} provider_id is required
     * @param {StorePostCartsCartPaymentSessionUpdateReq} payload is required
     * @return {ResponsePromise<StoreCartsRes>}
     */
    CartsResource.prototype.updatePaymentSession = function (cart_id, provider_id, payload) {
        var path = "/store/carts/" + cart_id + "/payment-sessions/" + provider_id;
        return this.client.request("POST", path, payload);
    };
    return CartsResource;
}(base_1.default));
exports.default = CartsResource;
//# sourceMappingURL=carts.js.map