import { AxiosError, AxiosInstance, AxiosRequestHeaders } from "axios";
export interface Config {
    baseUrl: string;
    maxRetries: number;
    apiKey?: string;
}
export interface RequestOptions {
    timeout?: number;
    numberOfRetries?: number;
}
export declare type RequestMethod = "DELETE" | "POST" | "GET";
declare class Client {
    private axiosClient;
    private config;
    constructor(config: Config);
    shouldRetryCondition(err: AxiosError, numRetries: number, maxRetries: number): boolean;
    normalizeHeaders(obj: object): object;
    normalizeHeader(header: string): string;
    requiresAuthentication(path: any, method: any): boolean;
    /**
     * Creates all the initial headers.
     * We add the idempotency key, if the request is configured to retry.
     * @param {object} userHeaders user supplied headers
     * @param {Types.RequestMethod} method request method
     * @param {string} path request path
     * @return {object}
     */
    setHeaders(userHeaders: RequestOptions, method: RequestMethod, path: string): AxiosRequestHeaders;
    /**
     * Creates the axios client used for requests
     * As part of the creation, we configure the retry conditions
     * and the exponential backoff approach.
     * @param {Config} config user supplied configurations
     * @return {AxiosInstance}
     */
    createClient(config: Config): AxiosInstance;
    /**
     * Axios request
     * @param {Types.RequestMethod} method request method
     * @param {string} path request path
     * @param {object} payload request payload
     * @param {RequestOptions} options axios configuration
     * @return {object}
     */
    request(method: RequestMethod, path: string, payload?: object, options?: RequestOptions): Promise<any>;
}
export default Client;
