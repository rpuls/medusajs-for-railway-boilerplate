"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var rax = __importStar(require("retry-axios"));
var uuid_1 = require("uuid");
var unAuthenticatedAdminEndpoints = {
    "/admin/auth": "POST",
    "/admin/users/password-token": "POST",
    "/admin/users/reset-password": "POST",
    "/admin/invites/accept": "POST",
};
var defaultConfig = {
    maxRetries: 0,
    baseUrl: "http://localhost:9000",
};
var Client = /** @class */ (function () {
    function Client(config) {
        /** @private @constant {AxiosInstance} */
        this.axiosClient = this.createClient(__assign(__assign({}, defaultConfig), config));
        /** @private @constant {Config} */
        this.config = __assign(__assign({}, defaultConfig), config);
    }
    Client.prototype.shouldRetryCondition = function (err, numRetries, maxRetries) {
        // Obviously, if we have reached max. retries we stop
        if (numRetries >= maxRetries) {
            return false;
        }
        // If no response, we assume a connection error and retry
        if (!err.response) {
            return true;
        }
        // Retry on conflicts
        if (err.response.status === 409) {
            return true;
        }
        // All 5xx errors are retried
        // OBS: We are currently not retrying 500 requests, since our core needs proper error handling.
        //      At the moment, 500 will be returned on all errors, that are not of type MedusaError.
        if (err.response.status > 500 && err.response.status <= 599) {
            return true;
        }
        return false;
    };
    // Stolen from https://github.com/stripe/stripe-node/blob/fd0a597064289b8c82f374f4747d634050739043/lib/utils.js#L282
    Client.prototype.normalizeHeaders = function (obj) {
        var _this = this;
        if (!(obj && typeof obj === "object")) {
            return obj;
        }
        return Object.keys(obj).reduce(function (result, header) {
            result[_this.normalizeHeader(header)] = obj[header];
            return result;
        }, {});
    };
    // Stolen from https://github.com/marten-de-vries/header-case-normalizer/blob/master/index.js#L36-L41
    Client.prototype.normalizeHeader = function (header) {
        return header
            .split("-")
            .map(function (text) { return text.charAt(0).toUpperCase() + text.substr(1).toLowerCase(); })
            .join("-");
    };
    Client.prototype.requiresAuthentication = function (path, method) {
        return (path.startsWith("/admin") &&
            unAuthenticatedAdminEndpoints[path] !== method);
    };
    /**
     * Creates all the initial headers.
     * We add the idempotency key, if the request is configured to retry.
     * @param {object} userHeaders user supplied headers
     * @param {Types.RequestMethod} method request method
     * @param {string} path request path
     * @return {object}
     */
    Client.prototype.setHeaders = function (userHeaders, method, path) {
        var defaultHeaders = {
            Accept: "application/json",
            "Content-Type": "application/json",
        };
        if (this.config.apiKey && this.requiresAuthentication(path, method)) {
            defaultHeaders = __assign(__assign({}, defaultHeaders), { Authorization: "Bearer " + this.config.apiKey });
        }
        // only add idempotency key, if we want to retry
        if (this.config.maxRetries > 0 && method === "POST") {
            defaultHeaders["Idempotency-Key"] = (0, uuid_1.v4)();
        }
        return Object.assign({}, defaultHeaders, this.normalizeHeaders(userHeaders));
    };
    /**
     * Creates the axios client used for requests
     * As part of the creation, we configure the retry conditions
     * and the exponential backoff approach.
     * @param {Config} config user supplied configurations
     * @return {AxiosInstance}
     */
    Client.prototype.createClient = function (config) {
        var _this = this;
        var client = axios_1.default.create({
            baseURL: config.baseUrl,
        });
        rax.attach(client);
        client.defaults.raxConfig = {
            instance: client,
            retry: config.maxRetries,
            backoffType: "exponential",
            shouldRetry: function (err) {
                var cfg = rax.getConfig(err);
                if (cfg) {
                    return _this.shouldRetryCondition(err, cfg.currentRetryAttempt || 1, cfg.retry || 3);
                }
                else {
                    return false;
                }
            },
        };
        return client;
    };
    /**
     * Axios request
     * @param {Types.RequestMethod} method request method
     * @param {string} path request path
     * @param {object} payload request payload
     * @param {RequestOptions} options axios configuration
     * @return {object}
     */
    Client.prototype.request = function (method, path, payload, options) {
        if (payload === void 0) { payload = {}; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var reqOpts, _a, data, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reqOpts = {
                            method: method,
                            withCredentials: true,
                            url: path,
                            data: payload,
                            json: true,
                            headers: this.setHeaders(options, method, path),
                        };
                        return [4 /*yield*/, this.axiosClient(reqOpts)
                            // e.g. would return an object like of this shape { cart, response }
                        ];
                    case 1:
                        _a = _b.sent(), data = _a.data, response = __rest(_a, ["data"]);
                        // e.g. would return an object like of this shape { cart, response }
                        return [2 /*return*/, __assign(__assign({}, data), { response: response })];
                }
            });
        });
    };
    return Client;
}());
exports.default = Client;
//# sourceMappingURL=request.js.map