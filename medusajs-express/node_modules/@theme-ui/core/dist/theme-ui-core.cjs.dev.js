'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('@emotion/react');
var React = require('react');
var deepmerge = require('deepmerge');
var packageInfo = require('@emotion/react/package.json');
var parseProps = require('@theme-ui/parse-props');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var deepmerge__default = /*#__PURE__*/_interopDefault(deepmerge);
var packageInfo__default = /*#__PURE__*/_interopDefault(packageInfo);
var parseProps__default = /*#__PURE__*/_interopDefault(parseProps);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var __EMOTION_VERSION__ = packageInfo__default['default'].version;
var jsx = function jsx(type, props) {
  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  return react.jsx.apply(void 0, [type, parseProps__default['default'](props)].concat(children));
};
/**
 * @internal for Babel JSX pragma
 * @see https://github.com/system-ui/theme-ui/issues/1603
 */

var createElement = jsx;

/**
 * @internal
 */
var __themeUiDefaultContextValue = {
  __EMOTION_VERSION__: __EMOTION_VERSION__,
  theme: {}
};
/**
 * @internal
 */

var __ThemeUIContext = /*#__PURE__*/React.createContext(__themeUiDefaultContextValue);
var useThemeUI = function useThemeUI() {
  return React.useContext(__ThemeUIContext);
};
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
var FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;
var deepmergeOptions = {
  isMergeableObject: function isMergeableObject(n) {
    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;
  },
  arrayMerge: function arrayMerge(_leftArray, rightArray) {
    return rightArray;
  }
};
/**
 * Deeply merge themes
 */

var merge = function merge(a, b) {
  return deepmerge__default['default'](a, b, deepmergeOptions);
};

function mergeAll() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return deepmerge__default['default'].all(args, deepmergeOptions);
}

merge.all = mergeAll;

/**
 * @internal
 */
var __ThemeUIInternalBaseThemeProvider = function __ThemeUIInternalBaseThemeProvider(_ref) {
  var context = _ref.context,
      children = _ref.children;
  return jsx(react.ThemeContext.Provider, {
    value: context.theme
  }, jsx(__ThemeUIContext.Provider, {
    value: context,
    children: children
  }));
};
function ThemeProvider(_ref2) {
  var theme = _ref2.theme,
      children = _ref2.children;
  var outer = useThemeUI();

  if (process.env.NODE_ENV !== 'production') {
    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {
      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');
    }
  }

  var context = typeof theme === 'function' ? _extends({}, outer, {
    theme: theme(outer.theme)
  }) : merge.all({}, outer, {
    theme: theme
  });
  return jsx(__ThemeUIInternalBaseThemeProvider, {
    context: context,
    children: children
  });
}

exports.ThemeProvider = ThemeProvider;
exports.__ThemeUIContext = __ThemeUIContext;
exports.__ThemeUIInternalBaseThemeProvider = __ThemeUIInternalBaseThemeProvider;
exports.__themeUiDefaultContextValue = __themeUiDefaultContextValue;
exports.createElement = createElement;
exports.jsx = jsx;
exports.merge = merge;
exports.useThemeUI = useThemeUI;
