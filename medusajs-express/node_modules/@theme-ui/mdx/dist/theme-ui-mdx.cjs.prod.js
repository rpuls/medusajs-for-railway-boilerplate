'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@theme-ui/core');
var css = require('@theme-ui/css');
var react = require('react');
var styled = require('@emotion/styled');
var react$1 = require('@mdx-js/react');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["theme"];
// mdx components
var tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx
'inlineCode', 'thematicBreak', // other
'div', // theme-ui
'root'];
var aliases = {
  inlineCode: 'code',
  thematicBreak: 'hr',
  root: 'div'
};

var isAlias = function isAlias(x) {
  return x in aliases;
};

var alias = function alias(n) {
  return isAlias(n) ? aliases[n] : n;
};

var propOverrides = {
  th: {
    align: 'textAlign'
  },
  td: {
    align: 'textAlign'
  }
};
var themed = function themed(key) {
  return function (_ref) {
    var theme = _ref.theme,
        rest = _objectWithoutPropertiesLoose(_ref, _excluded);

    var propsStyle = propOverrides[key];
    var extraStyles = propsStyle ? Object.keys(rest).filter(function (prop) {
      return propsStyle[prop] !== undefined;
    }).reduce(function (acc, prop) {
      var _extends2;

      return _extends({}, acc, (_extends2 = {}, _extends2[propsStyle[prop]] = rest[prop], _extends2));
    }, {}) : undefined;
    return css.css(_extends({}, css.get(theme, "styles." + key), extraStyles))(theme);
  };
}; // opt out of typechecking whenever `as` prop is used

var Themed = styled__default['default']('div')(themed('div'));
/**
 * @deprecated since 0.6.0.
 *
 * `Styled` was renamed to `Themed` to avoid confusion with styled components.
 */

var Styled = styled__default['default']('div')(themed('div'));

var warnStyled = function warnStyled(tag) {
  return function (props) {
    react.useEffect(function () {
    }, []);
    return /*#__PURE__*/react.createElement(alias(tag), props);
  };
};

var components = {};
tags.forEach(function (tag) {
  // fixme?
  components[tag] = styled__default['default'](alias(tag))(themed(tag));
  Themed[tag] = components[tag];
  Styled[tag] = styled__default['default'](warnStyled(tag))(themed(tag));
});

var createComponents = function createComponents(comps) {
  var next = _extends({}, components);

  var componentKeys = Object.keys(comps);
  componentKeys.forEach(function (key) {
    next[key] = styled__default['default'](comps[key])(themed(key));
  });
  return next;
};

var MDXProvider = function MDXProvider(_ref2) {
  var components = _ref2.components,
      children = _ref2.children;
  var outer = react$1.useMDXComponents();
  return core.jsx(react$1.MDXProvider, {
    components: createComponents(_extends({}, outer, components)),
    children: children
  });
};

exports.MDXProvider = MDXProvider;
exports.Styled = Styled;
exports.Themed = Themed;
exports.components = components;
exports.themed = themed;
