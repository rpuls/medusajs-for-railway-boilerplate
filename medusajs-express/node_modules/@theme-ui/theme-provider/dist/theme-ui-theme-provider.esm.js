import React from 'react';
import { useThemeUI, ThemeProvider as ThemeProvider$1, jsx, __themeUiDefaultContextValue } from '@theme-ui/core';
import { css } from '@theme-ui/css';
import { ColorModeProvider } from '@theme-ui/color-modes';
import { MDXProvider } from '@theme-ui/mdx';
import { Global } from '@emotion/react';

var RootStyles = function RootStyles() {
  return jsx(Global, {
    styles: function styles(emotionTheme) {
      var _theme$config;

      var theme = emotionTheme;

      var _ref = theme.config || theme,
          useRootStyles = _ref.useRootStyles;

      if (useRootStyles === false || theme.styles && !theme.styles.root) {
        return null;
      }

      var boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';
      return css({
        '*': {
          boxSizing: boxSizing
        },
        html: {
          variant: 'styles.root'
        },
        body: {
          margin: 0
        }
      })(theme);
    }
  });
};

var ThemeProvider = function ThemeProvider(_ref2) {
  var theme = _ref2.theme,
      components = _ref2.components,
      children = _ref2.children;
  var outer = useThemeUI();
  var isTopLevel = outer === __themeUiDefaultContextValue;
  return /*#__PURE__*/React.createElement(ThemeProvider$1, {
    theme: theme
  }, /*#__PURE__*/React.createElement(ColorModeProvider, null, isTopLevel && /*#__PURE__*/React.createElement(RootStyles, null), /*#__PURE__*/React.createElement(MDXProvider, {
    components: components
  }, children)));
};

export { ThemeProvider };
