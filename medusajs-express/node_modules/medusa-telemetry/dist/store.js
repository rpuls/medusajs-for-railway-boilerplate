"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _path = _interopRequireDefault(require("path"));

var _configstore = _interopRequireDefault(require("configstore"));

var _inMemoryConfig = _interopRequireDefault(require("./util/in-memory-config"));

var _outboxStore = _interopRequireDefault(require("./util/outbox-store"));

var _isTruthy = _interopRequireDefault(require("./util/is-truthy"));

var Store = /*#__PURE__*/function () {
  function Store() {
    (0, _classCallCheck2["default"])(this, Store);

    try {
      this.config_ = new _configstore["default"]("medusa", {}, {
        globalConfigPath: true
      });
    } catch (e) {
      this.config_ = new _inMemoryConfig["default"]();
    }

    var baseDir = _path["default"].dirname(this.config_.path);

    this.outbox_ = new _outboxStore["default"](baseDir);
    this.disabled_ = (0, _isTruthy["default"])(process.env.MEDUSA_DISABLE_TELEMETRY);
  }

  (0, _createClass2["default"])(Store, [{
    key: "getQueueSize",
    value: function getQueueSize() {
      return this.outbox_.getSize();
    }
  }, {
    key: "getQueueCount",
    value: function getQueueCount() {
      return this.outbox_.getCount();
    }
  }, {
    key: "addEvent",
    value: function addEvent(event) {
      if (this.disabled_) {
        return;
      }

      var eventString = JSON.stringify(event);
      return this.outbox_.appendToBuffer(eventString + "\n");
    }
  }, {
    key: "flushEvents",
    value: function () {
      var _flushEvents = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(handler) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.outbox_.startFlushEvents( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(eventData) {
                    var events;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            events = eventData.split("\n").filter(function (e) {
                              return e && e.length > 2;
                            }).map(function (e) {
                              return JSON.parse(e);
                            });
                            _context.next = 3;
                            return handler(events);

                          case 3:
                            return _context.abrupt("return", _context.sent);

                          case 4:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x2) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function flushEvents(_x) {
        return _flushEvents.apply(this, arguments);
      }

      return flushEvents;
    }()
  }, {
    key: "getConfig",
    value: function getConfig(path) {
      return this.config_.get(path);
    }
  }, {
    key: "setConfig",
    value: function setConfig(path, val) {
      return this.config_.set(path, val);
    }
  }]);
  return Store;
}();

var _default = Store;
exports["default"] = _default;