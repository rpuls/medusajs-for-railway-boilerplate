"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _removeTrailingSlash = _interopRequireDefault(require("remove-trailing-slash"));

var _axios = _interopRequireDefault(require("axios"));

var _axiosRetry = _interopRequireDefault(require("axios-retry"));

var _showNotification = _interopRequireDefault(require("./show-notification"));

var _store = _interopRequireDefault(require("../store"));

var _isTruthy = _interopRequireDefault(require("./is-truthy"));

var MEDUSA_TELEMETRY_VERBOSE = process.env.MEDUSA_TELEMETRY_VERBOSE || false;

var TelemetryDispatcher = /*#__PURE__*/function () {
  function TelemetryDispatcher(options) {
    (0, _classCallCheck2["default"])(this, TelemetryDispatcher);
    this.store_ = new _store["default"]();
    this.host = (0, _removeTrailingSlash["default"])(options.host || "https://telemetry.medusa-commerce.com");
    this.path = (0, _removeTrailingSlash["default"])(options.path || "/batch");
    var axiosInstance = options.axiosInstance;

    if (!axiosInstance) {
      axiosInstance = _axios["default"].create();
    }

    this.axiosInstance = axiosInstance;
    this.timeout = options.timeout || false;
    this.flushed = false;
    (0, _axiosRetry["default"])(this.axiosInstance, {
      retries: 3,
      retryDelay: _axiosRetry["default"].exponentialDelay,
      retryCondition: this.isErrorRetryable_
    });
  }

  (0, _createClass2["default"])(TelemetryDispatcher, [{
    key: "isTrackingEnabled",
    value: function isTrackingEnabled() {
      // Cache the result
      if (this.trackingEnabled !== undefined) {
        return this.trackingEnabled;
      }

      var enabled = this.store_.getConfig("telemetry.enabled");

      if (enabled === undefined || enabled === null) {
        (0, _showNotification["default"])();
        enabled = true;
        this.store_.setConfig("telemetry.enabled", enabled);
      }

      this.trackingEnabled = enabled;
      return enabled;
    }
  }, {
    key: "dispatch",
    value: function () {
      var _dispatch = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var _this = this;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.isTrackingEnabled()) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return");

              case 2:
                _context2.next = 4;
                return this.store_.flushEvents( /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(events) {
                    var data, req;
                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (events.length) {
                              _context.next = 3;
                              break;
                            }

                            if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                              console.log("No events to POST - skipping");
                            }

                            return _context.abrupt("return", true);

                          case 3:
                            data = {
                              batch: events,
                              timestamp: new Date()
                            };
                            req = {
                              headers: {}
                            };
                            _context.next = 7;
                            return _this.axiosInstance.post("".concat(_this.host).concat(_this.path), data, req).then(function () {
                              if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                                console.log("POSTing batch succeeded");
                              }

                              return true;
                            })["catch"](function (e) {
                              if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                                console.error("Failed to POST event batch", e);
                              }

                              return false;
                            });

                          case 7:
                            return _context.abrupt("return", _context.sent);

                          case 8:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function dispatch() {
        return _dispatch.apply(this, arguments);
      }

      return dispatch;
    }()
  }, {
    key: "isErrorRetryable_",
    value: function isErrorRetryable_(error) {
      // Retry Network Errors.
      if (_axiosRetry["default"].isNetworkError(error)) {
        return true;
      }

      if (!error.response) {
        // Cannot determine if the request can be retried
        return false;
      } // Retry Server Errors (5xx).


      if (error.response.status >= 500 && error.response.status <= 599) {
        return true;
      } // Retry if rate limited.


      if (error.response.status === 429) {
        return true;
      }

      return false;
    }
  }]);
  return TelemetryDispatcher;
}();

var _default = TelemetryDispatcher;
exports["default"] = _default;