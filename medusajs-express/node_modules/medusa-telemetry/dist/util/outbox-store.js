"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _path = _interopRequireDefault(require("path"));

var _fs = require("fs");

var _isTruthy = _interopRequireDefault(require("./is-truthy"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var MEDUSA_TELEMETRY_VERBOSE = process.env.MEDUSA_TELEMETRY_VERBOSE || false;

var Outbox = /*#__PURE__*/function () {
  function Outbox(baseDir) {
    (0, _classCallCheck2["default"])(this, Outbox);
    this.eventsJsonFileName = "events.json";
    this.bufferFilePath = _path["default"].join(baseDir, this.eventsJsonFileName);
    this.baseDir = baseDir;
  }

  (0, _createClass2["default"])(Outbox, [{
    key: "appendToBuffer",
    value: function appendToBuffer(event) {
      try {
        (0, _fs.appendFileSync)(this.bufferFilePath, event, "utf8");
      } catch (e) {
        if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
          console.error("Failed to append to buffer", e);
        }
      }
    }
  }, {
    key: "getSize",
    value: function getSize() {
      if (!(0, _fs.existsSync)(this.bufferFilePath)) {
        return 0;
      }

      try {
        var stats = (0, _fs.statSync)(this.bufferFilePath);
        return stats.size;
      } catch (e) {
        if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
          console.error("Failed to get outbox size", e);
        }
      }

      return 0;
    }
  }, {
    key: "getCount",
    value: function getCount() {
      if (!(0, _fs.existsSync)(this.bufferFilePath)) {
        return 0;
      }

      try {
        var fileBuffer = (0, _fs.readFileSync)(this.bufferFilePath);
        var str = fileBuffer.toString();
        var lines = str.split("\n");
        return lines.length - 1;
      } catch (e) {
        if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
          console.error("Failed to get outbox count", e);
        }
      }

      return 0;
    }
  }, {
    key: "flushFile",
    value: function () {
      var _flushFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(filePath, flushOperation) {
        var now, success, contents, newPath;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                now = "".concat(Date.now(), "-").concat(process.pid);
                success = false;
                contents = "";
                _context.prev = 3;

                if ((0, _fs.existsSync)(filePath)) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt("return", true);

              case 6:
                // Unique temporary file name across multiple concurrent Medusa instances
                newPath = "".concat(this.bufferFilePath, "-").concat(now);
                (0, _fs.renameSync)(filePath, newPath);
                contents = (0, _fs.readFileSync)(newPath, "utf8");
                (0, _fs.unlinkSync)(newPath); // There is still a chance process dies while sending data and some events are lost
                // This will be ok for now, however

                _context.next = 12;
                return flushOperation(contents);

              case 12:
                success = _context.sent;
                _context.next = 18;
                break;

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](3);

                if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                  console.error("Failed to perform file flush", _context.t0);
                }

              case 18:
                _context.prev = 18;

                // if sending fails, we write the data back to the log
                if (!success) {
                  if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                    console.error("File flush did not succeed - writing back to file", success);
                  }

                  this.appendToBuffer(contents);
                }

                return _context.finish(18);

              case 21:
                return _context.abrupt("return", true);

              case 22:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 15, 18, 21]]);
      }));

      function flushFile(_x, _x2) {
        return _flushFile.apply(this, arguments);
      }

      return flushFile;
    }()
  }, {
    key: "startFlushEvents",
    value: function () {
      var _startFlushEvents = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(flushOperation) {
        var files, filtered, _iterator, _step, file;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this.flushFile(this.bufferFilePath, flushOperation);

              case 3:
                files = (0, _fs.readdirSync)(this.baseDir);
                filtered = files.filter(function (p) {
                  return p.startsWith("events.json");
                });
                _iterator = _createForOfIteratorHelper(filtered);
                _context2.prev = 6;

                _iterator.s();

              case 8:
                if ((_step = _iterator.n()).done) {
                  _context2.next = 14;
                  break;
                }

                file = _step.value;
                _context2.next = 12;
                return this.flushFile(_path["default"].join(this.baseDir, file), flushOperation);

              case 12:
                _context2.next = 8;
                break;

              case 14:
                _context2.next = 19;
                break;

              case 16:
                _context2.prev = 16;
                _context2.t0 = _context2["catch"](6);

                _iterator.e(_context2.t0);

              case 19:
                _context2.prev = 19;

                _iterator.f();

                return _context2.finish(19);

              case 22:
                return _context2.abrupt("return", true);

              case 25:
                _context2.prev = 25;
                _context2.t1 = _context2["catch"](0);

                if ((0, _isTruthy["default"])(MEDUSA_TELEMETRY_VERBOSE)) {
                  console.error("Failed to perform flush", _context2.t1);
                }

              case 28:
                return _context2.abrupt("return", false);

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 25], [6, 16, 19, 22]]);
      }));

      function startFlushEvents(_x3) {
        return _startFlushEvents.apply(this, arguments);
      }

      return startFlushEvents;
    }()
  }]);
  return Outbox;
}();

var _default = Outbox;
exports["default"] = _default;