declare type TQueryKey<TKey, TListQuery = any, TDetailQuery = string> = {
    all: [TKey];
    lists: () => [...TQueryKey<TKey>["all"], "list"];
    list: (query?: TListQuery) => [
        ...ReturnType<TQueryKey<TKey>["lists"]>,
        {
            query: TListQuery | undefined;
        }
    ];
    details: () => [...TQueryKey<TKey>["all"], "detail"];
    detail: (id: TDetailQuery) => [...ReturnType<TQueryKey<TKey>["details"]>, TDetailQuery];
};
export declare const makeKeysFactory: <T, TListQueryType = any, TDetailQueryType = string>(globalKey: T) => TQueryKey<T, TListQueryType, TDetailQueryType>;
export declare const useLocalStorage: (key: string, initialState: string) => readonly [string, (data: string) => void, () => void];
export {};
